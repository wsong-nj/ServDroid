%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ADP15A9.tmp.pdf
%%Creator: Adobe Acrobat 11.0.0
%%For: Think
%%CreationDate: 2018/8/22, 21:45:55
%%BoundingBox: 0 0 240 200
%%HiResBoundingBox: 0 0 239.7166 199.2976
%%CropBox: 0 0 239.7166 199.2976
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 942 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2018-08-22T21:45:14+08:00"
   xmp:CreatorTool="OriginLab Corporation"
   xmp:ModifyDate="2018-08-22T21:45:14+08:00"
   pdf:Producer="Acrobat Distiller 11.0 (Windows)"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:4dc63b56-6d23-427c-9243-6644fbd5801d"
   xmpMM:InstanceID="uuid:7e370233-4604-45fe-b81c-dcd5de33dd95">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">C:UserssqmDesktopRQ2-time.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -199.298 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 199.298 li
239.717 199.298 li
239.717 0 li
cp
clp
53.789 182.209 mo
51.771 177.002 53.789 182.209 51.771 177.002 cv
52.517 177.002 51.771 177.002 52.517 177.002 cv
53.871 180.785 52.517 177.002 53.871 180.785 cv
53.98 181.088 54.071 181.372 54.144 181.637 cv
54.225 181.353 54.318 181.069 54.425 180.785 cv
55.832 177.002 54.425 180.785 55.832 177.002 cv
56.535 177.002 55.832 177.002 56.535 177.002 cv
54.496 182.209 56.535 177.002 54.496 182.209 cv
53.789 182.209 54.496 182.209 53.789 182.209 cv
false sop
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
f
59.268 182.209 mo
58.629 182.209 59.268 182.209 58.629 182.209 cv
58.629 178.135 58.629 182.209 58.629 178.135 cv
58.475 178.282 58.273 178.428 58.023 178.575 cv
57.773 178.722 57.549 178.832 57.35 178.906 cv
57.35 178.287 57.35 178.906 57.35 178.287 cv
57.707 178.119 58.02 177.916 58.288 177.676 cv
58.555 177.437 58.745 177.205 58.856 176.98 cv
59.268 176.98 58.856 176.98 59.268 176.98 cv
59.268 182.209 59.268 176.98 59.268 182.209 cv
f
94.321 182.209 mo
92.303 177.002 94.321 182.209 92.303 177.002 cv
93.049 177.002 92.303 177.002 93.049 177.002 cv
94.403 180.785 93.049 177.002 94.403 180.785 cv
94.512 181.088 94.603 181.372 94.676 181.637 cv
94.757 181.353 94.85 181.069 94.957 180.785 cv
96.364 177.002 94.957 180.785 96.364 177.002 cv
97.067 177.002 96.364 177.002 97.067 177.002 cv
95.028 182.209 97.067 177.002 95.028 182.209 cv
94.321 182.209 95.028 182.209 94.321 182.209 cv
f
100.752 181.595 mo
100.752 182.21 100.752 181.595 100.752 182.21 cv
97.31 182.21 100.752 182.21 97.31 182.21 cv
97.305 182.056 97.33 181.908 97.384 181.766 cv
97.472 181.531 97.612 181.3 97.805 181.073 cv
97.998 180.846 98.277 180.583 98.642 180.284 cv
99.208 179.82 99.59 179.452 99.789 179.181 cv
99.988 178.91 100.088 178.654 100.088 178.412 cv
100.088 178.159 99.997 177.945 99.816 177.771 cv
99.635 177.597 99.399 177.51 99.107 177.51 cv
98.799 177.51 98.553 177.602 98.368 177.787 cv
98.184 177.972 98.09 178.228 98.088 178.554 cv
97.431 178.487 98.088 178.554 97.431 178.487 cv
97.476 177.997 97.645 177.623 97.939 177.366 cv
98.232 177.109 98.627 176.981 99.122 176.981 cv
99.621 176.981 100.017 177.119 100.308 177.396 cv
100.599 177.673 100.745 178.017 100.745 178.426 cv
100.745 178.635 100.702 178.84 100.617 179.041 cv
100.532 179.242 100.39 179.454 100.193 179.677 cv
99.995 179.899 99.666 180.205 99.207 180.593 cv
98.823 180.915 98.577 181.134 98.468 181.249 cv
98.359 181.364 98.269 181.479 98.198 181.595 cv
100.752 181.595 98.198 181.595 100.752 181.595 cv
f
134.853 182.209 mo
132.835 177.002 134.853 182.209 132.835 177.002 cv
133.581 177.002 132.835 177.002 133.581 177.002 cv
134.935 180.785 133.581 177.002 134.935 180.785 cv
135.044 181.088 135.135 181.372 135.208 181.637 cv
135.289 181.353 135.382 181.069 135.489 180.785 cv
136.896 177.002 135.489 180.785 136.896 177.002 cv
137.599 177.002 136.896 177.002 137.599 177.002 cv
135.56 182.209 137.599 177.002 135.56 182.209 cv
134.853 182.209 135.56 182.209 134.853 182.209 cv
f
137.927 180.834 mo
138.566 180.749 137.927 180.834 138.566 180.749 cv
138.64 181.111 138.765 181.372 138.941 181.532 cv
139.118 181.692 139.333 181.772 139.586 181.772 cv
139.887 181.772 140.141 181.668 140.348 181.459 cv
140.555 181.251 140.659 180.993 140.659 180.685 cv
140.659 180.391 140.563 180.149 140.371 179.958 cv
140.179 179.768 139.935 179.672 139.639 179.672 cv
139.518 179.672 139.368 179.696 139.188 179.744 cv
139.259 179.182 139.188 179.744 139.259 179.182 cv
139.302 179.187 139.336 179.189 139.362 179.189 cv
139.634 179.189 139.88 179.118 140.097 178.976 cv
140.315 178.834 140.424 178.615 140.424 178.319 cv
140.424 178.085 140.345 177.89 140.186 177.737 cv
140.028 177.583 139.823 177.506 139.572 177.506 cv
139.323 177.506 139.116 177.584 138.95 177.74 cv
138.784 177.896 138.678 178.131 138.63 178.443 cv
137.991 178.33 138.63 178.443 137.991 178.33 cv
138.069 177.901 138.247 177.569 138.524 177.333 cv
138.801 177.098 139.145 176.98 139.557 176.98 cv
139.842 176.98 140.103 177.041 140.343 177.163 cv
140.582 177.285 140.765 177.451 140.891 177.662 cv
141.018 177.873 141.081 178.096 141.081 178.333 cv
141.081 178.558 141.021 178.763 140.9 178.948 cv
140.779 179.133 140.601 179.279 140.364 179.388 cv
140.672 179.459 140.911 179.607 141.081 179.831 cv
141.252 180.054 141.337 180.334 141.337 180.671 cv
141.337 181.125 141.171 181.511 140.84 181.827 cv
140.508 182.143 140.089 182.301 139.582 182.301 cv
139.125 182.301 138.746 182.165 138.444 181.893 cv
138.142 181.62 137.97 181.267 137.927 180.834 cv
f
175.29 182.209 mo
173.272 177.002 175.29 182.209 173.272 177.002 cv
174.018 177.002 173.272 177.002 174.018 177.002 cv
175.372 180.785 174.018 177.002 175.372 180.785 cv
175.481 181.088 175.572 181.372 175.645 181.637 cv
175.726 181.353 175.819 181.069 175.926 180.785 cv
177.333 177.002 175.926 180.785 177.333 177.002 cv
178.036 177.002 177.333 177.002 178.036 177.002 cv
175.997 182.209 178.036 177.002 175.997 182.209 cv
175.29 182.209 175.997 182.209 175.29 182.209 cv
f
180.41 182.209 mo
180.41 180.962 180.41 182.209 180.41 180.962 cv
178.151 180.962 180.41 180.962 178.151 180.962 cv
178.151 180.376 178.151 180.962 178.151 180.376 cv
180.527 177.002 178.151 180.376 180.527 177.002 cv
181.049 177.002 180.527 177.002 181.049 177.002 cv
181.049 180.376 181.049 177.002 181.049 180.376 cv
181.753 180.376 181.049 180.376 181.753 180.376 cv
181.753 180.962 181.753 180.376 181.753 180.962 cv
181.049 180.962 181.753 180.962 181.049 180.962 cv
181.049 182.209 181.049 180.962 181.049 182.209 cv
180.41 182.209 181.049 182.209 180.41 182.209 cv
cp
180.41 180.376 mo
180.41 178.028 180.41 180.376 180.41 178.028 cv
178.78 180.376 180.41 178.028 178.78 180.376 cv
180.41 180.376 178.78 180.376 180.41 180.376 cv
f
215.822 182.209 mo
213.804 177.002 215.822 182.209 213.804 177.002 cv
214.55 177.002 213.804 177.002 214.55 177.002 cv
215.904 180.785 214.55 177.002 215.904 180.785 cv
216.013 181.088 216.104 181.372 216.177 181.637 cv
216.258 181.353 216.351 181.069 216.458 180.785 cv
217.865 177.002 216.458 180.785 217.865 177.002 cv
218.568 177.002 217.865 177.002 218.568 177.002 cv
216.529 182.209 218.568 177.002 216.529 182.209 cv
215.822 182.209 216.529 182.209 215.822 182.209 cv
f
218.893 180.845 mo
219.564 180.788 218.893 180.845 219.564 180.788 cv
219.614 181.115 219.73 181.361 219.911 181.525 cv
220.092 181.69 220.31 181.772 220.566 181.772 cv
220.874 181.772 221.134 181.656 221.348 181.424 cv
221.561 181.192 221.667 180.884 221.667 180.5 cv
221.667 180.136 221.565 179.848 221.36 179.637 cv
221.155 179.427 220.887 179.321 220.555 179.321 cv
220.349 179.321 220.164 179.368 219.998 179.461 cv
219.832 179.555 219.702 179.676 219.607 179.826 cv
219.007 179.747 219.607 179.826 219.007 179.747 cv
219.511 177.073 219.007 179.747 219.511 177.073 cv
222.101 177.073 219.511 177.073 222.101 177.073 cv
222.101 177.684 222.101 177.073 222.101 177.684 cv
220.023 177.684 222.101 177.684 220.023 177.684 cv
219.742 179.083 220.023 177.684 219.742 179.083 cv
220.055 178.865 220.383 178.756 220.726 178.756 cv
221.181 178.756 221.564 178.914 221.877 179.229 cv
222.189 179.544 222.346 179.949 222.346 180.444 cv
222.346 180.915 222.208 181.322 221.934 181.666 cv
221.6 182.087 221.144 182.298 220.566 182.298 cv
220.092 182.298 219.706 182.165 219.406 181.9 cv
219.107 181.635 218.936 181.283 218.893 180.845 cv
f
17.272 166.131 mo
17.272 165.515 17.335 165.02 17.462 164.644 cv
17.589 164.269 17.777 163.98 18.027 163.776 cv
18.277 163.572 18.591 163.47 18.97 163.47 cv
19.249 163.47 19.495 163.527 19.705 163.639 cv
19.916 163.752 20.09 163.914 20.227 164.126 cv
20.365 164.338 20.473 164.596 20.551 164.9 cv
20.629 165.204 20.668 165.615 20.668 166.131 cv
20.668 166.742 20.605 167.235 20.48 167.61 cv
20.354 167.986 20.166 168.276 19.917 168.481 cv
19.667 168.686 19.351 168.788 18.97 168.788 cv
18.468 168.788 18.074 168.608 17.787 168.248 cv
17.444 167.815 17.272 167.109 17.272 166.131 cv
cp
17.929 166.131 mo
17.929 166.986 18.029 167.555 18.229 167.838 cv
18.429 168.121 18.676 168.262 18.97 168.262 cv
19.264 168.262 19.511 168.12 19.711 167.836 cv
19.911 167.552 20.011 166.984 20.011 166.131 cv
20.011 165.274 19.911 164.704 19.711 164.422 cv
19.511 164.141 19.261 164 18.963 164 cv
18.669 164 18.435 164.124 18.26 164.373 cv
18.039 164.69 17.929 165.276 17.929 166.131 cv
f
20.633 148.433 mo
20.633 149.048 20.633 148.433 20.633 149.048 cv
17.191 149.048 20.633 149.048 17.191 149.048 cv
17.186 148.894 17.211 148.746 17.266 148.604 cv
17.353 148.369 17.493 148.138 17.686 147.911 cv
17.879 147.684 18.158 147.421 18.523 147.122 cv
19.089 146.658 19.471 146.29 19.67 146.019 cv
19.869 145.748 19.969 145.492 19.969 145.25 cv
19.969 144.997 19.878 144.783 19.697 144.609 cv
19.516 144.435 19.28 144.348 18.988 144.348 cv
18.68 144.348 18.434 144.44 18.249 144.625 cv
18.065 144.81 17.971 145.066 17.969 145.392 cv
17.312 145.325 17.969 145.392 17.312 145.325 cv
17.357 144.835 17.526 144.461 17.82 144.204 cv
18.113 143.947 18.508 143.819 19.003 143.819 cv
19.502 143.819 19.898 143.957 20.189 144.234 cv
20.48 144.511 20.626 144.855 20.626 145.264 cv
20.626 145.473 20.583 145.678 20.498 145.879 cv
20.413 146.08 20.271 146.292 20.074 146.515 cv
19.876 146.737 19.547 147.043 19.088 147.431 cv
18.704 147.753 18.458 147.972 18.349 148.087 cv
18.24 148.202 18.15 148.317 18.079 148.433 cv
20.633 148.433 18.079 148.433 20.633 148.433 cv
f
19.322 129.49 mo
19.322 128.243 19.322 129.49 19.322 128.243 cv
17.063 128.243 19.322 128.243 17.063 128.243 cv
17.063 127.657 17.063 128.243 17.063 127.657 cv
19.439 124.283 17.063 127.657 19.439 124.283 cv
19.961 124.283 19.439 124.283 19.961 124.283 cv
19.961 127.657 19.961 124.283 19.961 127.657 cv
20.665 127.657 19.961 127.657 20.665 127.657 cv
20.665 128.243 20.665 127.657 20.665 128.243 cv
19.961 128.243 20.665 128.243 19.961 128.243 cv
19.961 129.49 19.961 128.243 19.961 129.49 cv
19.322 129.49 19.961 129.49 19.322 129.49 cv
cp
19.322 127.657 mo
19.322 125.309 19.322 127.657 19.322 125.309 cv
17.692 127.657 19.322 125.309 17.692 127.657 cv
19.322 127.657 17.692 127.657 19.322 127.657 cv
f
20.59 105.907 mo
19.954 105.957 20.59 105.907 19.954 105.957 cv
19.897 105.706 19.817 105.523 19.713 105.41 cv
19.54 105.227 19.327 105.136 19.073 105.136 cv
18.87 105.136 18.691 105.193 18.537 105.307 cv
18.335 105.454 18.177 105.668 18.061 105.95 cv
17.945 106.231 17.884 106.633 17.88 107.154 cv
18.034 106.919 18.222 106.745 18.444 106.632 cv
18.667 106.518 18.9 106.461 19.144 106.461 cv
19.57 106.461 19.933 106.618 20.233 106.932 cv
20.533 107.246 20.682 107.651 20.682 108.148 cv
20.682 108.475 20.612 108.779 20.471 109.06 cv
20.33 109.34 20.136 109.555 19.89 109.704 cv
19.644 109.853 19.364 109.928 19.052 109.928 cv
18.519 109.928 18.084 109.732 17.748 109.34 cv
17.412 108.948 17.244 108.302 17.244 107.402 cv
17.244 106.396 17.43 105.664 17.802 105.207 cv
18.126 104.809 18.563 104.61 19.112 104.61 cv
19.522 104.61 19.858 104.725 20.119 104.955 cv
20.381 105.185 20.538 105.502 20.59 105.907 cv
cp
17.979 108.152 mo
17.979 108.372 18.026 108.583 18.119 108.784 cv
18.213 108.986 18.344 109.139 18.512 109.244 cv
18.68 109.35 18.856 109.402 19.041 109.402 cv
19.311 109.402 19.543 109.293 19.737 109.076 cv
19.932 108.858 20.029 108.562 20.029 108.187 cv
20.029 107.828 19.933 107.544 19.741 107.337 cv
19.549 107.13 19.308 107.026 19.016 107.026 cv
18.727 107.026 18.482 107.13 18.281 107.337 cv
18.08 107.544 17.979 107.816 17.979 108.152 cv
f
18.256 87.4575 mo
17.991 87.3605 17.794 87.2215 17.666 87.0415 cv
17.538 86.8615 17.475 86.6465 17.475 86.3955 cv
17.475 86.0165 17.611 85.6985 17.883 85.4395 cv
18.155 85.1815 18.518 85.0525 18.97 85.0525 cv
19.425 85.0525 19.791 85.1845 20.068 85.4485 cv
20.345 85.7125 20.483 86.0345 20.483 86.4135 cv
20.483 86.6545 20.42 86.8645 20.293 87.0435 cv
20.166 87.2225 19.974 87.3605 19.716 87.4575 cv
20.036 87.5615 20.279 87.7295 20.446 87.9615 cv
20.613 88.1935 20.696 88.4715 20.696 88.7935 cv
20.696 89.2385 20.539 89.6125 20.224 89.9155 cv
19.909 90.2185 19.495 90.3705 18.981 90.3705 cv
18.467 90.3705 18.052 90.2185 17.737 89.9135 cv
17.422 89.6095 17.265 89.2305 17.265 88.7755 cv
17.265 88.4365 17.351 88.1535 17.522 87.9245 cv
17.694 87.6965 17.939 87.5405 18.256 87.4575 cv
cp
18.128 86.3745 mo
18.128 86.6205 18.207 86.8215 18.366 86.9775 cv
18.525 87.1345 18.731 87.2125 18.984 87.2125 cv
19.23 87.2125 19.432 87.1345 19.59 86.9795 cv
19.747 86.8245 19.826 86.6345 19.826 86.4095 cv
19.826 86.1755 19.745 85.9785 19.583 85.8185 cv
19.421 85.6585 19.219 85.5785 18.977 85.5785 cv
18.733 85.5785 18.531 85.6565 18.37 85.8125 cv
18.209 85.9695 18.128 86.1565 18.128 86.3745 cv
cp
17.922 88.7785 mo
17.922 88.9615 17.965 89.1375 18.052 89.3085 cv
18.138 89.4785 18.267 89.6105 18.437 89.7045 cv
18.608 89.7975 18.791 89.8445 18.988 89.8445 cv
19.293 89.8445 19.545 89.7465 19.744 89.5495 cv
19.943 89.3535 20.043 89.1035 20.043 88.8005 cv
20.043 88.4925 19.94 88.2375 19.736 88.0365 cv
19.531 87.8355 19.274 87.7345 18.966 87.7345 cv
18.666 87.7345 18.416 87.8345 18.219 88.0325 cv
18.021 88.2315 17.922 88.4805 17.922 88.7785 cv
f
15.713 70.6295 mo
15.074 70.6295 15.713 70.6295 15.074 70.6295 cv
15.074 66.5555 15.074 70.6295 15.074 66.5555 cv
14.92 66.7015 14.718 66.8485 14.468 66.9955 cv
14.218 67.1425 13.994 67.2525 13.795 67.3265 cv
13.795 66.7075 13.795 67.3265 13.795 66.7075 cv
14.152 66.5395 14.465 66.3365 14.733 66.0965 cv
15 65.8575 15.19 65.6255 15.301 65.4005 cv
15.713 65.4005 15.301 65.4005 15.713 65.4005 cv
15.713 70.6295 15.713 65.4005 15.713 70.6295 cv
f
17.272 68.0615 mo
17.272 67.4455 17.335 66.9505 17.462 66.5745 cv
17.589 66.1995 17.777 65.9105 18.027 65.7065 cv
18.277 65.5025 18.591 65.4005 18.97 65.4005 cv
19.249 65.4005 19.495 65.4575 19.705 65.5695 cv
19.916 65.6825 20.09 65.8445 20.227 66.0565 cv
20.365 66.2685 20.473 66.5265 20.551 66.8305 cv
20.629 67.1345 20.668 67.5455 20.668 68.0615 cv
20.668 68.6725 20.605 69.1655 20.48 69.5405 cv
20.354 69.9165 20.166 70.2065 19.917 70.4115 cv
19.667 70.6165 19.351 70.7185 18.97 70.7185 cv
18.468 70.7185 18.074 70.5385 17.787 70.1785 cv
17.444 69.7455 17.272 69.0395 17.272 68.0615 cv
cp
17.929 68.0615 mo
17.929 68.9165 18.029 69.4855 18.229 69.7685 cv
18.429 70.0515 18.676 70.1925 18.97 70.1925 cv
19.264 70.1925 19.511 70.0505 19.711 69.7665 cv
19.911 69.4825 20.011 68.9145 20.011 68.0615 cv
20.011 67.2045 19.911 66.6345 19.711 66.3525 cv
19.511 66.0715 19.261 65.9305 18.963 65.9305 cv
18.669 65.9305 18.435 66.0545 18.26 66.3035 cv
18.039 66.6205 17.929 67.2065 17.929 68.0615 cv
f
15.713 50.9785 mo
15.074 50.9785 15.713 50.9785 15.074 50.9785 cv
15.074 46.9045 15.074 50.9785 15.074 46.9045 cv
14.92 47.0505 14.718 47.1975 14.468 47.3445 cv
14.218 47.4915 13.994 47.6015 13.795 47.6755 cv
13.795 47.0565 13.795 47.6755 13.795 47.0565 cv
14.152 46.8885 14.465 46.6855 14.733 46.4455 cv
15 46.2065 15.19 45.9745 15.301 45.7495 cv
15.713 45.7495 15.301 45.7495 15.713 45.7495 cv
15.713 50.9785 15.713 45.7495 15.713 50.9785 cv
f
20.633 50.3645 mo
20.633 50.9795 20.633 50.3645 20.633 50.9795 cv
17.191 50.9795 20.633 50.9795 17.191 50.9795 cv
17.186 50.8255 17.211 50.6775 17.266 50.5345 cv
17.353 50.3005 17.493 50.0695 17.686 49.8425 cv
17.879 49.6145 18.158 49.3525 18.523 49.0535 cv
19.089 48.5895 19.471 48.2215 19.67 47.9505 cv
19.869 47.6795 19.969 47.4235 19.969 47.1815 cv
19.969 46.9285 19.878 46.7145 19.697 46.5405 cv
19.516 46.3665 19.28 46.2795 18.988 46.2795 cv
18.68 46.2795 18.434 46.3715 18.249 46.5565 cv
18.065 46.7415 17.971 46.9975 17.969 47.3235 cv
17.312 47.2565 17.969 47.3235 17.312 47.2565 cv
17.357 46.7665 17.526 46.3925 17.82 46.1355 cv
18.113 45.8785 18.508 45.7505 19.003 45.7505 cv
19.502 45.7505 19.898 45.8885 20.189 46.1655 cv
20.48 46.4425 20.626 46.7865 20.626 47.1955 cv
20.626 47.4045 20.583 47.6095 20.498 47.8105 cv
20.413 48.0115 20.271 48.2235 20.074 48.4465 cv
19.876 48.6685 19.547 48.9745 19.088 49.3625 cv
18.704 49.6845 18.458 49.9035 18.349 50.0185 cv
18.24 50.1325 18.15 50.2485 18.079 50.3645 cv
20.633 50.3645 18.079 50.3645 20.633 50.3645 cv
f
15.713 31.4215 mo
15.074 31.4215 15.713 31.4215 15.074 31.4215 cv
15.074 27.3475 15.074 31.4215 15.074 27.3475 cv
14.92 27.4935 14.718 27.6405 14.468 27.7875 cv
14.218 27.9345 13.994 28.0445 13.795 28.1185 cv
13.795 27.4995 13.795 28.1185 13.795 27.4995 cv
14.152 27.3315 14.465 27.1285 14.733 26.8885 cv
15 26.6495 15.19 26.4175 15.301 26.1925 cv
15.713 26.1925 15.301 26.1925 15.713 26.1925 cv
15.713 31.4215 15.713 26.1925 15.713 31.4215 cv
f
19.322 31.4215 mo
19.322 30.1745 19.322 31.4215 19.322 30.1745 cv
17.063 30.1745 19.322 30.1745 17.063 30.1745 cv
17.063 29.5885 17.063 30.1745 17.063 29.5885 cv
19.439 26.2145 17.063 29.5885 19.439 26.2145 cv
19.961 26.2145 19.439 26.2145 19.961 26.2145 cv
19.961 29.5885 19.961 26.2145 19.961 29.5885 cv
20.665 29.5885 19.961 29.5885 20.665 29.5885 cv
20.665 30.1745 20.665 29.5885 20.665 30.1745 cv
19.961 30.1745 20.665 30.1745 19.961 30.1745 cv
19.961 31.4215 19.961 30.1745 19.961 31.4215 cv
19.322 31.4215 19.961 31.4215 19.322 31.4215 cv
cp
19.322 29.5885 mo
19.322 27.2405 19.322 29.5885 19.322 27.2405 cv
17.692 29.5885 19.322 27.2405 17.692 29.5885 cv
19.322 29.5885 17.692 29.5885 19.322 29.5885 cv
f
15.713 11.7705 mo
15.074 11.7705 15.713 11.7705 15.074 11.7705 cv
15.074 7.69653 15.074 11.7705 15.074 7.69653 cv
14.92 7.84253 14.718 7.98953 14.468 8.13654 cv
14.218 8.28352 13.994 8.39352 13.795 8.46753 cv
13.795 7.84853 13.795 8.46753 13.795 7.84853 cv
14.152 7.68053 14.465 7.47752 14.733 7.23753 cv
15 6.99854 15.19 6.76653 15.301 6.54153 cv
15.713 6.54153 15.301 6.54153 15.713 6.54153 cv
15.713 11.7705 15.713 6.54153 15.713 11.7705 cv
f
20.59 7.83752 mo
19.954 7.88753 20.59 7.83752 19.954 7.88753 cv
19.897 7.63654 19.817 7.45354 19.713 7.34053 cv
19.54 7.15753 19.327 7.06653 19.073 7.06653 cv
18.87 7.06653 18.691 7.12354 18.537 7.23753 cv
18.336 7.38353 18.177 7.59853 18.061 7.88054 cv
17.945 8.16153 17.884 8.56354 17.88 9.08453 cv
18.034 8.84953 18.222 8.67554 18.444 8.56253 cv
18.667 8.44853 18.9 8.39153 19.144 8.39153 cv
19.57 8.39153 19.933 8.54854 20.233 8.86253 cv
20.533 9.17653 20.682 9.58153 20.682 10.0785 cv
20.682 10.4055 20.612 10.7095 20.471 10.9905 cv
20.33 11.2705 20.136 11.4855 19.89 11.6345 cv
19.644 11.7835 19.364 11.8585 19.052 11.8585 cv
18.519 11.8585 18.085 11.6625 17.748 11.2705 cv
17.412 10.8785 17.244 10.2325 17.244 9.33253 cv
17.244 8.32654 17.43 7.59453 17.801 7.13753 cv
18.126 6.73953 18.563 6.54053 19.112 6.54053 cv
19.522 6.54053 19.858 6.65553 20.119 6.88553 cv
20.381 7.11554 20.538 7.43253 20.59 7.83752 cv
cp
17.979 10.0825 mo
17.979 10.3025 18.026 10.5135 18.119 10.7145 cv
18.213 10.9165 18.344 11.0695 18.512 11.1745 cv
18.68 11.2805 18.857 11.3325 19.041 11.3325 cv
19.311 11.3325 19.543 11.2235 19.737 11.0065 cv
19.932 10.7885 20.029 10.4925 20.029 10.1175 cv
20.029 9.75853 19.933 9.47453 19.741 9.26753 cv
19.549 9.06053 19.308 8.95653 19.016 8.95653 cv
18.727 8.95653 18.482 9.06053 18.281 9.26753 cv
18.08 9.47453 17.979 9.74654 17.979 10.0825 cv
f
.567 lw
1 lc
1 lj
10 ml
[] 0 dsh
false sadj
35.961 173.139 mo
35.961 171.627 li
@
56.18 174.556 mo
56.18 171.627 li
@
76.493 173.139 mo
76.493 171.627 li
@
96.712 174.556 mo
96.712 171.627 li
@
116.931 173.139 mo
116.931 171.627 li
@
137.244 174.556 mo
137.244 171.627 li
@
157.463 173.139 mo
157.463 171.627 li
@
177.682 174.556 mo
177.682 171.627 li
@
197.901 173.139 mo
197.901 171.627 li
@
218.214 174.556 mo
218.214 171.627 li
@
238.433 173.139 mo
238.433 171.627 li
@
25.853 171.627 mo
238.433 171.627 li
@
22.924 166.714 mo
25.853 166.714 li
@
24.341 156.888 mo
25.853 156.888 li
@
22.924 147.062 mo
25.853 147.062 li
@
24.341 137.331 mo
25.853 137.331 li
@
22.924 127.505 mo
25.853 127.505 li
@
24.341 117.679 mo
25.853 117.679 li
@
22.924 107.853 mo
25.853 107.853 li
@
24.341 98.0265 mo
25.853 98.0265 li
@
22.924 88.2955 mo
25.853 88.2955 li
@
24.341 78.4695 mo
25.853 78.4695 li
@
22.924 68.6435 mo
25.853 68.6435 li
@
24.341 58.8175 mo
25.853 58.8175 li
@
22.924 48.9915 mo
25.853 48.9915 li
@
24.341 39.1655 mo
25.853 39.1655 li
@
22.924 29.4345 mo
25.853 29.4345 li
@
24.341 19.6085 mo
25.853 19.6085 li
@
22.924 9.78247 mo
25.853 9.78247 li
@
25.853 171.623 mo
25.853 7.32648 li
@
gsave
25.852 7.32951 mo
238.526 7.32951 li
238.526 171.722 li
25.852 171.722 li
cp
eclp
1.134 lw
96.712 98.0285 mo
56.18 98.0285 li
.878538 .2439 1 .131716 cmyk
@
137.244 98.0285 mo
96.712 98.0285 li
@
177.681 127.506 mo
137.244 98.0285 li
@
218.213 166.714 mo
177.681 127.506 li
@
56.18 95.2885 mo
56.747 97.1785 li
58.731 97.1785 li
57.125 98.3115 li
57.786 100.202 li
56.18 99.0675 li
54.479 100.202 li
55.141 98.3115 li
53.535 97.1785 li
55.519 97.1785 li
cp
ef
.283 lw
56.18 95.2885 mo
56.747 97.1785 li
58.731 97.1785 li
57.125 98.3115 li
57.786 100.202 li
56.18 99.0675 li
54.479 100.202 li
55.141 98.3115 li
53.535 97.1785 li
55.519 97.1785 li
cp
@
96.712 95.2885 mo
97.279 97.1785 li
99.263 97.1785 li
97.657 98.3115 li
98.318 100.202 li
96.712 99.0675 li
95.011 100.202 li
95.673 98.3115 li
94.067 97.1785 li
96.051 97.1785 li
cp
ef
96.712 95.2885 mo
97.279 97.1785 li
99.263 97.1785 li
97.657 98.3115 li
98.318 100.202 li
96.712 99.0675 li
95.011 100.202 li
95.673 98.3115 li
94.067 97.1785 li
96.051 97.1785 li
cp
@
137.243 95.2885 mo
137.81 97.1785 li
139.794 97.1785 li
138.188 98.3115 li
138.849 100.202 li
137.243 99.0675 li
135.542 100.202 li
136.204 98.3115 li
134.598 97.1785 li
136.582 97.1785 li
cp
ef
137.243 95.2885 mo
137.81 97.1785 li
139.794 97.1785 li
138.188 98.3115 li
138.849 100.202 li
137.243 99.0675 li
135.542 100.202 li
136.204 98.3115 li
134.598 97.1785 li
136.582 97.1785 li
cp
@
177.681 124.766 mo
178.248 126.656 li
180.232 126.656 li
178.626 127.789 li
179.287 129.679 li
177.681 128.545 li
175.98 129.679 li
176.642 127.789 li
175.036 126.656 li
177.02 126.656 li
cp
ef
177.681 124.766 mo
178.248 126.656 li
180.232 126.656 li
178.626 127.789 li
179.287 129.679 li
177.681 128.545 li
175.98 129.679 li
176.642 127.789 li
175.036 126.656 li
177.02 126.656 li
cp
@
218.213 163.975 mo
218.78 165.865 li
220.764 165.865 li
219.158 166.998 li
219.819 168.888 li
218.213 167.754 li
216.512 168.888 li
217.174 166.998 li
215.568 165.865 li
217.552 165.865 li
cp
ef
218.213 163.975 mo
218.78 165.865 li
220.764 165.865 li
219.158 166.998 li
219.819 168.888 li
218.213 167.754 li
216.512 168.888 li
217.174 166.998 li
215.568 165.865 li
217.552 165.865 li
cp
@
1.134 lw
96.712 137.332 mo
56.18 137.332 li
0 .612726 1 .000701915 cmyk
@
137.244 147.063 mo
96.712 137.332 li
@
177.681 156.889 mo
137.244 147.063 li
@
218.213 156.889 mo
177.681 156.889 li
@
56.18 134.12 mo
58.92 138.938 li
53.346 138.938 li
cp
ef
.283 lw
56.18 134.12 mo
58.92 138.938 li
53.346 138.938 li
cp
@
96.712 134.12 mo
99.452 138.938 li
93.878 138.938 li
cp
ef
96.712 134.12 mo
99.452 138.938 li
93.878 138.938 li
cp
@
137.243 143.851 mo
139.983 148.669 li
134.409 148.669 li
cp
ef
137.243 143.851 mo
139.983 148.669 li
134.409 148.669 li
cp
@
177.681 153.677 mo
180.421 158.495 li
174.847 158.495 li
cp
ef
177.681 153.677 mo
180.421 158.495 li
174.847 158.495 li
cp
@
218.213 153.677 mo
220.953 158.495 li
215.379 158.495 li
cp
ef
218.213 153.677 mo
220.953 158.495 li
215.379 158.495 li
cp
@
1.134 lw
96.712 9.78651 mo
56.18 9.78651 li
1 .978881 .143709 .171023 cmyk
@
137.244 29.4375 mo
96.712 9.78653 li
@
177.681 127.506 mo
137.244 29.4375 li
@
218.213 127.506 mo
177.681 127.506 li
@
58.536 9.80052 mo
58.536 11.1045 57.478 12.1625 56.174 12.1625 cv
54.87 12.1625 53.812 11.1045 53.812 9.80052 cv
53.812 8.49654 54.87 7.43852 56.174 7.43852 cv
57.478 7.43852 58.536 8.49654 58.536 9.80052 cv
cp
ef
.283 lw
58.536 9.80052 mo
58.536 11.1045 57.478 12.1625 56.174 12.1625 cv
54.87 12.1625 53.812 11.1045 53.812 9.80052 cv
53.812 8.49654 54.87 7.43852 56.174 7.43852 cv
57.478 7.43852 58.536 8.49654 58.536 9.80052 cv
cp
@
99.096 9.80052 mo
99.096 11.1045 98.038 12.1625 96.734 12.1625 cv
95.43 12.1625 94.372 11.1045 94.372 9.80052 cv
94.372 8.49654 95.43 7.43852 96.734 7.43852 cv
98.038 7.43852 99.096 8.49654 99.096 9.80052 cv
cp
ef
99.096 9.80052 mo
99.096 11.1045 98.038 12.1625 96.734 12.1625 cv
95.43 12.1625 94.372 11.1045 94.372 9.80052 cv
94.372 8.49654 95.43 7.43852 96.734 7.43852 cv
98.038 7.43852 99.096 8.49654 99.096 9.80052 cv
cp
@
139.596 29.4205 mo
139.596 30.7245 138.538 31.7825 137.234 31.7825 cv
135.93 31.7825 134.872 30.7245 134.872 29.4205 cv
134.872 28.1165 135.93 27.0585 137.234 27.0585 cv
138.538 27.0585 139.596 28.1165 139.596 29.4205 cv
cp
ef
139.596 29.4205 mo
139.596 30.7245 138.538 31.7825 137.234 31.7825 cv
135.93 31.7825 134.872 30.7245 134.872 29.4205 cv
134.872 28.1165 135.93 27.0585 137.234 27.0585 cv
138.538 27.0585 139.596 28.1165 139.596 29.4205 cv
cp
@
180.036 127.521 mo
180.036 128.825 178.978 129.883 177.674 129.883 cv
176.37 129.883 175.312 128.825 175.312 127.521 cv
175.312 126.217 176.37 125.159 177.674 125.159 cv
178.978 125.159 180.036 126.217 180.036 127.521 cv
cp
ef
180.036 127.521 mo
180.036 128.825 178.978 129.883 177.674 129.883 cv
176.37 129.883 175.312 128.825 175.312 127.521 cv
175.312 126.217 176.37 125.159 177.674 125.159 cv
178.978 125.159 180.036 126.217 180.036 127.521 cv
cp
@
220.596 127.521 mo
220.596 128.825 219.538 129.883 218.234 129.883 cv
216.93 129.883 215.872 128.825 215.872 127.521 cv
215.872 126.217 216.93 125.159 218.234 125.159 cv
219.538 125.159 220.596 126.217 220.596 127.521 cv
cp
ef
220.596 127.521 mo
220.596 128.825 219.538 129.883 218.234 129.883 cv
216.93 129.883 215.872 128.825 215.872 127.521 cv
215.872 126.217 216.93 125.159 218.234 125.159 cv
219.538 125.159 220.596 126.217 220.596 127.521 cv
cp
@
1.134 lw
96.712 147.063 mo
56.18 147.063 li
.610498 1 .138643 .0341802 cmyk
@
137.244 147.063 mo
96.712 147.063 li
@
177.681 147.063 mo
137.244 147.063 li
@
218.213 166.714 mo
177.681 147.063 li
@
58.258 144.985 mo
54.1009 144.985 li
54.1009 149.142 li
58.258 149.142 li
cp
f
.283 lw
54.101 144.985 mo
58.2581 144.985 li
58.2581 149.142 li
54.101 149.142 li
cp
@
98.79 144.985 mo
94.6329 144.985 li
94.6329 149.142 li
98.79 149.142 li
cp
f
94.633 144.985 mo
98.7901 144.985 li
98.7901 149.142 li
94.633 149.142 li
cp
@
139.322 144.985 mo
135.165 144.985 li
135.165 149.142 li
139.322 149.142 li
cp
f
135.165 144.985 mo
139.322 144.985 li
139.322 149.142 li
135.165 149.142 li
cp
@
179.759 144.985 mo
175.602 144.985 li
175.602 149.142 li
179.759 149.142 li
cp
f
175.602 144.985 mo
179.759 144.985 li
179.759 149.142 li
175.602 149.142 li
cp
@
220.291 164.636 mo
216.134 164.636 li
216.134 168.793 li
220.291 168.793 li
cp
f
216.134 164.636 mo
220.291 164.636 li
220.291 168.793 li
216.134 168.793 li
cp
@
1.134 lw
96.712 48.9945 mo
56.18 29.4375 li
0 .990631 1 .000396735 cmyk
@
137.244 48.9945 mo
96.712 48.9945 li
@
177.681 107.855 mo
137.244 48.9945 li
@
218.213 107.855 mo
177.681 107.855 li
@
53.156 29.4375 mo
56.179 26.4145 li
59.203 29.4375 li
56.179 32.4605 li
cp
ef
.283 lw
53.156 29.4375 mo
56.179 26.4145 li
59.203 29.4375 li
56.179 32.4605 li
cp
@
93.688 48.9945 mo
96.711 45.9715 li
99.735 48.9945 li
96.711 52.0175 li
cp
ef
93.688 48.9945 mo
96.711 45.9715 li
99.735 48.9945 li
96.711 52.0175 li
cp
@
134.22 48.9945 mo
137.243 45.9715 li
140.267 48.9945 li
137.243 52.0175 li
cp
ef
134.22 48.9945 mo
137.243 45.9715 li
140.267 48.9945 li
137.243 52.0175 li
cp
@
174.657 107.855 mo
177.68 104.832 li
180.704 107.855 li
177.68 110.878 li
cp
ef
174.657 107.855 mo
177.68 104.832 li
180.704 107.855 li
177.68 110.878 li
cp
@
215.189 107.855 mo
218.212 104.832 li
221.236 107.855 li
218.212 110.878 li
cp
ef
215.189 107.855 mo
218.212 104.832 li
221.236 107.855 li
218.212 110.878 li
cp
@
grestore
6.78399 101.82 mo
4.87799 101.431 6.78399 101.82 4.87799 101.431 cv
4.87799 102.187 4.87799 101.431 4.87799 102.187 cv
4.21099 102.187 4.87799 102.187 4.21099 102.187 cv
4.21099 101.296 4.21099 102.187 4.21099 101.296 cv
2.58699 100.965 4.21099 101.296 2.58699 100.965 cv
2.58699 102.187 2.58699 100.965 2.58699 102.187 cv
1.91999 102.187 2.58699 102.187 1.91999 102.187 cv
1.91999 100.831 1.91999 102.187 1.91999 100.831 cv
-7.62939e-6 100.442 1.91999 100.831 -7.62939e-6 100.442 cv
-7.62939e-6 99.7705 -7.62939e-6 100.442 -7.62939e-6 99.7705 cv
1.91999 100.16 -7.62939e-6 99.7705 1.91999 100.16 cv
1.91999 98.7495 1.91999 100.16 1.91999 98.7495 cv
-7.62939e-6 98.3605 1.91999 98.7495 -7.62939e-6 98.3605 cv
-7.62939e-6 97.6845 -7.62939e-6 98.3605 -7.62939e-6 97.6845 cv
1.91999 98.0745 -7.62939e-6 97.6845 1.91999 98.0745 cv
1.91999 97.2995 1.91999 98.0745 1.91999 97.2995 cv
2.58699 97.2995 1.91999 97.2995 2.58699 97.2995 cv
2.58699 98.2085 2.58699 97.2995 2.58699 98.2085 cv
4.21099 98.5435 2.58699 98.2085 4.21099 98.5435 cv
4.21099 97.2995 4.21099 98.5435 4.21099 97.2995 cv
4.87799 97.2995 4.21099 97.2995 4.87799 97.2995 cv
4.87799 98.6785 4.87799 97.2995 4.87799 98.6785 cv
6.78399 99.0675 4.87799 98.6785 6.78399 99.0675 cv
6.78399 99.7385 6.78399 99.0675 6.78399 99.7385 cv
4.87799 99.3535 6.78399 99.7385 4.87799 99.3535 cv
4.87799 100.759 4.87799 99.3535 4.87799 100.759 cv
6.78399 101.149 4.87799 100.759 6.78399 101.149 cv
6.78399 101.82 6.78399 101.149 6.78399 101.82 cv
cp
4.21099 100.625 mo
4.21099 99.2195 4.21099 100.625 4.21099 99.2195 cv
2.58699 98.8845 4.21099 99.2195 2.58699 98.8845 cv
2.58699 100.294 2.58699 98.8845 2.58699 100.294 cv
4.21099 100.625 2.58699 100.294 4.21099 100.625 cv
f
6.67199 93.9565 mo
.111992 93.9565 6.67199 93.9565 .111992 93.9565 cv
.111992 91.4955 .111992 93.9565 .111992 91.4955 cv
.111992 90.9945 .177992 90.5925 .310993 90.2895 cv
.443993 89.9865 .647993 89.7495 .923992 89.5775 cv
1.19999 89.4065 1.48899 89.3205 1.78999 89.3205 cv
2.06999 89.3205 2.33399 89.3965 2.58199 89.5485 cv
2.82999 89.7015 3.02899 89.9305 3.18199 90.2375 cv
3.29799 89.8415 3.49599 89.5365 3.77699 89.3225 cv
4.05699 89.1095 4.38799 89.0025 4.76999 89.0025 cv
5.07699 89.0025 5.36299 89.0675 5.62699 89.1975 cv
5.89099 89.3275 6.09499 89.4875 6.23799 89.6785 cv
6.38099 89.8695 6.48899 90.1085 6.56199 90.3965 cv
6.63499 90.6845 6.67199 91.0375 6.67199 91.4555 cv
6.67199 93.9565 6.67199 91.4555 6.67199 93.9565 cv
cp
2.86799 93.0885 mo
2.86799 91.6695 2.86799 93.0885 2.86799 91.6695 cv
2.86799 91.2855 2.84299 91.0095 2.79199 90.8425 cv
2.72699 90.6215 2.61799 90.4545 2.46599 90.3435 cv
2.31299 90.2315 2.12299 90.1755 1.89299 90.1755 cv
1.67499 90.1755 1.48299 90.2275 1.31799 90.3315 cv
1.15199 90.4365 1.03899 90.5855 .977993 90.7795 cv
.916992 90.9735 .885992 91.3055 .885992 91.7775 cv
.885992 93.0885 .885992 91.7775 .885992 93.0885 cv
2.86799 93.0885 .885992 93.0885 2.86799 93.0885 cv
cp
5.89799 93.0885 mo
5.89799 91.4555 5.89799 93.0885 5.89799 91.4555 cv
5.89799 91.1745 5.88699 90.9775 5.86699 90.8645 cv
5.83099 90.6645 5.77099 90.4975 5.68799 90.3635 cv
5.60399 90.2295 5.48199 90.1185 5.32299 90.0325 cv
5.16299 89.9455 4.97899 89.9025 4.76999 89.9025 cv
4.52599 89.9025 4.31299 89.9645 4.13299 90.0905 cv
3.95199 90.2155 3.82499 90.3895 3.75199 90.6115 cv
3.67899 90.8335 3.64199 91.1535 3.64199 91.5715 cv
3.64199 93.0885 3.64199 91.5715 3.64199 93.0885 cv
5.89799 93.0885 3.64199 93.0885 5.89799 93.0885 cv
f
6.67199 84.7675 mo
5.97399 84.7675 6.67199 84.7675 5.97399 84.7675 cv
6.51099 85.1375 6.77899 85.6405 6.77899 86.2755 cv
6.77899 86.5555 6.72599 86.8175 6.61799 87.0605 cv
6.51099 87.3035 6.37599 87.4845 6.21299 87.6025 cv
6.05099 87.7205 5.85199 87.8025 5.61599 87.8505 cv
5.45799 87.8835 5.20699 87.8995 4.86399 87.8995 cv
1.91999 87.8995 4.86399 87.8995 1.91999 87.8995 cv
1.91999 87.0945 1.91999 87.8995 1.91999 87.0945 cv
4.55499 87.0945 1.91999 87.0945 4.55499 87.0945 cv
4.97599 87.0945 5.25899 87.0775 5.40599 87.0455 cv
5.61699 86.9945 5.78399 86.8875 5.90499 86.7235 cv
6.02499 86.5585 6.08599 86.3565 6.08599 86.1145 cv
6.08599 85.8725 6.02399 85.6465 5.89999 85.4345 cv
5.77599 85.2225 5.60799 85.0725 5.39399 84.9845 cv
5.18099 84.8965 4.87199 84.8525 4.46599 84.8525 cv
1.91999 84.8525 4.46599 84.8525 1.91999 84.8525 cv
1.91999 84.0475 1.91999 84.8525 1.91999 84.0475 cv
6.67199 84.0475 1.91999 84.0475 6.67199 84.0475 cv
6.67199 84.7675 6.67199 84.0475 6.67199 84.7675 cv
f
7.06599 82.9275 mo
7.18199 82.1445 7.06599 82.9275 7.18199 82.1445 cv
7.42399 82.1115 7.59999 82.0205 7.70999 81.8715 cv
7.85999 81.6715 7.93399 81.3985 7.93399 81.0525 cv
7.93399 80.6795 7.85999 80.3915 7.70999 80.1885 cv
7.56099 79.9865 7.35199 79.8485 7.08399 79.7775 cv
6.91999 79.7355 6.57499 79.7165 6.04999 79.7195 cv
6.46499 80.0715 6.67199 80.5095 6.67199 81.0345 cv
6.67199 81.6875 6.43699 82.1935 5.96499 82.5515 cv
5.49399 82.9095 4.92899 83.0885 4.26899 83.0885 cv
3.81599 83.0885 3.39699 83.0065 3.01399 82.8425 cv
2.63099 82.6785 2.33499 82.4405 2.12599 82.1285 cv
1.91699 81.8165 1.81299 81.4505 1.81299 81.0305 cv
1.81299 80.4695 2.03899 80.0065 2.49299 79.6435 cv
1.91999 79.6435 2.49299 79.6435 1.91999 79.6435 cv
1.91999 78.9005 1.91999 79.6435 1.91999 78.9005 cv
6.02799 78.9005 1.91999 78.9005 6.02799 78.9005 cv
6.76799 78.9005 7.29199 78.9755 7.60099 79.1265 cv
7.90999 79.2765 8.15299 79.5155 8.33199 79.8425 cv
8.51099 80.1685 8.60099 80.5705 8.60099 81.0485 cv
8.60099 81.6145 8.47299 82.0725 8.21799 82.4215 cv
7.96299 82.7705 7.57899 82.9395 7.06599 82.9275 cv
cp
4.21099 82.2605 mo
4.83499 82.2605 5.28999 82.1365 5.57599 81.8895 cv
5.86199 81.6415 6.00499 81.3315 6.00499 80.9585 cv
6.00499 80.5885 5.86299 80.2785 5.57799 80.0275 cv
5.29299 79.7775 4.84599 79.6515 4.23799 79.6515 cv
3.65599 79.6515 3.21799 79.7805 2.92199 80.0395 cv
2.62699 80.2975 2.47899 80.6085 2.47899 80.9715 cv
2.47899 81.3305 2.62499 81.6345 2.91599 81.8845 cv
3.20599 82.1355 3.63799 82.2605 4.21099 82.2605 cv
f
5.25399 78.0005 mo
5.12899 77.2045 5.25399 78.0005 5.12899 77.2045 cv
5.44799 77.1595 5.69299 77.0345 5.86299 76.8305 cv
6.03299 76.6255 6.11799 76.3405 6.11799 75.9735 cv
6.11799 75.6035 6.04199 75.3295 5.89199 75.1505 cv
5.74099 74.9715 5.56399 74.8815 5.36099 74.8815 cv
5.17899 74.8815 5.03599 74.9605 4.93199 75.1185 cv
4.85999 75.2295 4.76899 75.5035 4.65899 75.9425 cv
4.50999 76.5325 4.38099 76.9425 4.27199 77.1705 cv
4.16299 77.3985 4.01199 77.5715 3.81999 77.6895 cv
3.62699 77.8075 3.41499 77.8665 3.18199 77.8665 cv
2.96999 77.8665 2.77399 77.8175 2.59399 77.7205 cv
2.41299 77.6235 2.26299 77.4915 2.14399 77.3245 cv
2.05099 77.1995 1.97299 77.0285 1.90899 76.8125 cv
1.84499 76.5965 1.81299 76.3645 1.81299 76.1165 cv
1.81299 75.7435 1.86699 75.4165 1.97399 75.1345 cv
2.08099 74.8525 2.22699 74.6445 2.40999 74.5105 cv
2.59399 74.3755 2.83899 74.2835 3.14599 74.2325 cv
3.25399 75.0205 3.14599 74.2325 3.25399 75.0205 cv
3.00899 75.0565 2.81799 75.1595 2.68099 75.3315 cv
2.54399 75.5025 2.47499 75.7455 2.47499 76.0585 cv
2.47499 76.4285 2.53599 76.6925 2.65899 76.8505 cv
2.78099 77.0085 2.92399 77.0875 3.08799 77.0875 cv
3.19299 77.0875 3.28699 77.0545 3.36999 76.9895 cv
3.45699 76.9235 3.52799 76.8205 3.58499 76.6805 cv
3.61499 76.5995 3.68299 76.3625 3.79099 75.9685 cv
3.94299 75.3995 4.06699 75.0015 4.16399 74.7765 cv
4.26099 74.5515 4.40199 74.3745 4.58699 74.2465 cv
4.77199 74.1175 5.00199 74.0535 5.27599 74.0535 cv
5.54499 74.0535 5.79799 74.1325 6.03499 74.2885 cv
6.27199 74.4455 6.45499 74.6715 6.58499 74.9665 cv
6.71499 75.2615 6.77999 75.5965 6.77999 75.9685 cv
6.77999 76.5865 6.65199 77.0575 6.39499 77.3805 cv
6.13899 77.7045 5.75799 77.9115 5.25399 78.0005 cv
f
150.187 1.09451 mo
231.156 1.09451 li
231.156 42.0035 li
150.187 42.0035 li
cp
0 0 0 0 cmyk
ef
.189 lw
150.187 1.09451 mo
231.156 1.09451 li
231.156 42.0035 li
150.187 42.0035 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
1.134 lw
153.4 6.10152 mo
167.95 6.10152 li
1 .978881 .143709 .171023 cmyk
@
163.245 6.20052 mo
163.245 7.60852 162.102 8.75153 160.694 8.75153 cv
159.286 8.75153 158.143 7.60852 158.143 6.20052 cv
158.143 4.79253 159.286 3.64952 160.694 3.64952 cv
162.102 3.64952 163.245 4.79253 163.245 6.20052 cv
cp
ef
.378 lw
163.245 6.20052 mo
163.245 7.60852 162.102 8.75153 160.694 8.75153 cv
159.286 8.75153 158.143 7.60852 158.143 6.20052 cv
158.143 4.79253 159.286 3.64952 160.694 3.64952 cv
162.102 3.64952 163.245 4.79253 163.245 6.20052 cv
cp
@
172.159 6.72452 mo
172.159 6.23253 172.159 6.72452 172.159 6.23253 cv
173.935 6.22952 172.159 6.23253 173.935 6.22952 cv
173.935 7.78552 173.935 6.22952 173.935 7.78552 cv
173.663 8.00253 173.381 8.16652 173.091 8.27652 cv
172.802 8.38553 172.504 8.44052 172.199 8.44052 cv
171.787 8.44052 171.413 8.35252 171.076 8.17653 cv
170.74 7.99953 170.486 7.74452 170.314 7.41052 cv
170.143 7.07753 170.057 6.70453 170.057 6.29253 cv
170.057 5.88452 170.142 5.50352 170.313 5.14952 cv
170.483 4.79652 170.729 4.53352 171.049 4.36153 cv
171.37 4.19052 171.739 4.10452 172.156 4.10452 cv
172.459 4.10452 172.733 4.15352 172.978 4.25153 cv
173.223 4.35052 173.416 4.48653 173.555 4.66252 cv
173.694 4.83752 173.8 5.06653 173.872 5.34853 cv
173.372 5.48653 173.872 5.34853 173.372 5.48653 cv
173.309 5.27252 173.231 5.10452 173.137 4.98253 cv
173.044 4.86052 172.91 4.76253 172.737 4.68953 cv
172.563 4.61653 172.371 4.57953 172.159 4.57953 cv
171.905 4.57953 171.686 4.61752 171.501 4.69553 cv
171.316 4.77252 171.167 4.87352 171.054 4.99953 cv
170.94 5.12552 170.852 5.26352 170.789 5.41452 cv
170.682 5.67352 170.629 5.95552 170.629 6.25853 cv
170.629 6.63252 170.693 6.94452 170.822 7.19652 cv
170.951 7.44853 171.138 7.63452 171.384 7.75752 cv
171.63 7.87953 171.891 7.94052 172.168 7.94052 cv
172.408 7.94052 172.642 7.89352 172.871 7.80153 cv
173.1 7.70853 173.274 7.61052 173.392 7.50552 cv
173.392 6.72452 173.392 7.50552 173.392 6.72452 cv
172.159 6.72452 173.392 6.72452 172.159 6.72452 cv
1 /0 /CSD get_res sepcs
1 sep
f
174.474 6.85052 mo
174.474 6.28754 174.63 5.87154 174.943 5.60052 cv
175.204 5.37553 175.523 5.26353 175.898 5.26353 cv
176.316 5.26353 176.657 5.39954 176.922 5.67354 cv
177.187 5.94753 177.32 6.32553 177.32 6.80753 cv
177.32 7.19853 177.261 7.50554 177.144 7.73053 cv
177.027 7.95453 176.856 8.12854 176.632 8.25153 cv
176.408 8.37553 176.163 8.43753 175.898 8.43753 cv
175.473 8.43753 175.129 8.30153 174.867 8.02853 cv
174.605 7.75653 174.474 7.36353 174.474 6.85052 cv
cp
175.003 6.85052 mo
175.003 7.23953 175.088 7.53053 175.258 7.72453 cv
175.427 7.91753 175.641 8.01453 175.898 8.01453 cv
176.154 8.01453 176.367 7.91753 176.536 7.72253 cv
176.706 7.52853 176.791 7.23154 176.791 6.83353 cv
176.791 6.45753 176.705 6.17354 176.535 5.97954 cv
176.364 5.78653 176.152 5.68953 175.898 5.68953 cv
175.641 5.68953 175.427 5.78554 175.258 5.97853 cv
175.088 6.17053 175.003 6.46153 175.003 6.85052 cv
f
177.686 6.85052 mo
177.686 6.28754 177.842 5.87154 178.155 5.60052 cv
178.416 5.37553 178.735 5.26353 179.11 5.26353 cv
179.528 5.26353 179.869 5.39954 180.134 5.67354 cv
180.399 5.94753 180.532 6.32553 180.532 6.80753 cv
180.532 7.19853 180.473 7.50554 180.356 7.73053 cv
180.239 7.95453 180.068 8.12854 179.844 8.25153 cv
179.62 8.37553 179.375 8.43753 179.11 8.43753 cv
178.685 8.43753 178.341 8.30153 178.079 8.02853 cv
177.817 7.75653 177.686 7.36353 177.686 6.85052 cv
cp
178.215 6.85052 mo
178.215 7.23953 178.3 7.53053 178.47 7.72453 cv
178.639 7.91753 178.853 8.01453 179.11 8.01453 cv
179.366 8.01453 179.579 7.91753 179.748 7.72253 cv
179.918 7.52853 180.003 7.23154 180.003 6.83353 cv
180.003 6.45753 179.917 6.17354 179.747 5.97954 cv
179.576 5.78653 179.364 5.68953 179.11 5.68953 cv
178.853 5.68953 178.639 5.78554 178.47 5.97853 cv
178.3 6.17053 178.215 6.46153 178.215 6.85052 cv
f
180.996 8.62051 mo
181.497 8.69452 180.996 8.62051 181.497 8.69452 cv
181.518 8.84952 181.576 8.96152 181.671 9.03252 cv
181.799 9.12752 181.973 9.17552 182.194 9.17552 cv
182.433 9.17552 182.617 9.12752 182.746 9.03252 cv
182.876 8.93752 182.964 8.80353 183.01 8.63152 cv
183.036 8.52753 183.049 8.30652 183.047 7.97153 cv
182.822 8.23653 182.541 8.36852 182.206 8.36852 cv
181.788 8.36852 181.465 8.21852 181.236 7.91652 cv
181.007 7.61552 180.893 7.25452 180.893 6.83252 cv
180.893 6.54352 180.945 6.27553 181.05 6.03052 cv
181.155 5.78552 181.307 5.59653 181.507 5.46252 cv
181.706 5.32953 181.94 5.26253 182.209 5.26253 cv
182.567 5.26253 182.863 5.40752 183.095 5.69753 cv
183.095 5.33153 183.095 5.69753 183.095 5.33153 cv
183.57 5.33153 183.095 5.33153 183.57 5.33153 cv
183.57 7.95653 183.57 5.33153 183.57 7.95653 cv
183.57 8.42952 183.522 8.76453 183.426 8.96252 cv
183.329 9.15952 183.177 9.31552 182.968 9.42952 cv
182.759 9.54453 182.502 9.60152 182.197 9.60152 cv
181.835 9.60152 181.542 9.52052 181.319 9.35753 cv
181.096 9.19353 180.988 8.94852 180.996 8.62051 cv
cp
181.422 6.79552 mo
181.422 7.19452 181.501 7.48552 181.66 7.66852 cv
181.818 7.85152 182.016 7.94252 182.254 7.94252 cv
182.491 7.94252 182.689 7.85152 182.849 7.66953 cv
183.01 7.48752 183.09 7.20152 183.09 6.81252 cv
183.09 6.44153 183.007 6.16052 182.842 5.97153 cv
182.677 5.78352 182.479 5.68852 182.246 5.68852 cv
182.017 5.68852 181.823 5.78152 181.662 5.96751 cv
181.502 6.15352 181.422 6.42952 181.422 6.79552 cv
f
184.291 8.36852 mo
184.291 4.17552 184.291 8.36852 184.291 4.17552 cv
184.806 4.17552 184.291 4.17552 184.806 4.17552 cv
184.806 8.36852 184.806 4.17552 184.806 8.36852 cv
184.291 8.36852 184.806 8.36852 184.291 8.36852 cv
f
187.705 7.39052 mo
188.237 7.45653 187.705 7.39052 188.237 7.45653 cv
188.153 7.76753 187.998 8.00853 187.771 8.17952 cv
187.544 8.35153 187.254 8.43753 186.901 8.43753 cv
186.457 8.43753 186.105 8.30052 185.844 8.02652 cv
185.584 7.75352 185.454 7.36952 185.454 6.87552 cv
185.454 6.36453 185.586 5.96852 185.849 5.68553 cv
186.112 5.40352 186.453 5.26253 186.873 5.26253 cv
187.279 5.26253 187.611 5.40053 187.868 5.67752 cv
188.125 5.95352 188.254 6.34253 188.254 6.84453 cv
188.254 6.87453 188.253 6.92053 188.251 6.98152 cv
185.986 6.98152 188.251 6.98152 185.986 6.98152 cv
186.005 7.31552 186.099 7.57053 186.269 7.74852 cv
186.439 7.92552 186.651 8.01453 186.904 8.01453 cv
187.093 8.01453 187.254 7.96452 187.388 7.86552 cv
187.521 7.76653 187.627 7.60753 187.705 7.39052 cv
cp
186.015 6.55853 mo
187.711 6.55853 186.015 6.55853 187.711 6.55853 cv
187.688 6.30252 187.623 6.11153 187.516 5.98352 cv
187.352 5.78552 187.14 5.68553 186.878 5.68553 cv
186.642 5.68553 186.443 5.76453 186.282 5.92352 cv
186.121 6.08153 186.032 6.29353 186.015 6.55853 cv
f
190.51 8.36852 mo
190.51 4.17552 190.51 8.36852 190.51 4.17552 cv
192.092 4.17552 190.51 4.17552 192.092 4.17552 cv
192.37 4.17552 192.583 4.18852 192.73 4.21552 cv
192.935 4.24953 193.108 4.31552 193.247 4.41153 cv
193.386 4.50752 193.498 4.64252 193.583 4.81653 cv
193.668 4.98952 193.711 5.18053 193.711 5.38852 cv
193.711 5.74452 193.597 6.04652 193.37 6.29352 cv
193.143 6.54053 192.733 6.66353 192.14 6.66353 cv
191.065 6.66353 192.14 6.66353 191.065 6.66353 cv
191.065 8.36852 191.065 6.66353 191.065 8.36852 cv
190.51 8.36852 191.065 8.36852 190.51 8.36852 cv
cp
191.065 6.16953 mo
192.149 6.16953 191.065 6.16953 192.149 6.16953 cv
192.507 6.16953 192.762 6.10252 192.913 5.96852 cv
193.063 5.83553 193.139 5.64752 193.139 5.40552 cv
193.139 5.22952 193.094 5.07953 193.006 4.95453 cv
192.917 4.82953 192.8 4.74753 192.655 4.70752 cv
192.562 4.68253 192.389 4.67052 192.137 4.67052 cv
191.065 4.67052 192.137 4.67052 191.065 4.67052 cv
191.065 6.16953 191.065 4.67052 191.065 6.16953 cv
f
194.306 8.36852 mo
194.306 4.17552 194.306 8.36852 194.306 4.17552 cv
194.821 4.17552 194.306 4.17552 194.821 4.17552 cv
194.821 8.36852 194.821 4.17552 194.821 8.36852 cv
194.306 8.36852 194.821 8.36852 194.306 8.36852 cv
f
197.623 7.99452 mo
197.432 8.15652 197.249 8.27052 197.072 8.33752 cv
196.896 8.40453 196.707 8.43753 196.505 8.43753 cv
196.171 8.43753 195.915 8.35654 195.735 8.19353 cv
195.556 8.03053 195.466 7.82153 195.466 7.56853 cv
195.466 7.41953 195.5 7.28352 195.568 7.16052 cv
195.636 7.03754 195.724 6.93953 195.834 6.86453 cv
195.944 6.79053 196.067 6.73453 196.204 6.69553 cv
196.305 6.66953 196.458 6.64352 196.662 6.61853 cv
197.078 6.56953 197.384 6.51053 197.58 6.44153 cv
197.582 6.37053 197.583 6.32652 197.583 6.30653 cv
197.583 6.09753 197.534 5.94952 197.437 5.86353 cv
197.306 5.74753 197.11 5.68953 196.851 5.68953 cv
196.609 5.68953 196.43 5.73154 196.314 5.81653 cv
196.199 5.90154 196.114 6.05153 196.058 6.26653 cv
195.555 6.19853 196.058 6.26653 195.555 6.19853 cv
195.601 5.98253 195.676 5.80853 195.781 5.67653 cv
195.886 5.54353 196.037 5.44153 196.236 5.37053 cv
196.434 5.29852 196.664 5.26353 196.925 5.26353 cv
197.184 5.26353 197.395 5.29353 197.557 5.35452 cv
197.719 5.41553 197.838 5.49252 197.915 5.58453 cv
197.991 5.67754 198.044 5.79453 198.075 5.93553 cv
198.092 6.02254 198.101 6.18153 198.101 6.40953 cv
198.101 7.09653 198.101 6.40953 198.101 7.09653 cv
198.101 7.57452 198.112 7.87753 198.134 8.00453 cv
198.156 8.13153 198.199 8.25253 198.264 8.36952 cv
197.726 8.36952 198.264 8.36952 197.726 8.36952 cv
197.673 8.26253 197.638 8.13753 197.623 7.99452 cv
cp
197.58 6.84453 mo
197.393 6.92053 197.113 6.98553 196.739 7.03954 cv
196.528 7.06953 196.378 7.10452 196.29 7.14253 cv
196.202 7.18053 196.135 7.23653 196.087 7.30952 cv
196.039 7.38252 196.016 7.46452 196.016 7.55453 cv
196.016 7.69153 196.068 7.80553 196.171 7.89754 cv
196.275 7.98853 196.427 8.03453 196.628 8.03453 cv
196.826 8.03453 197.002 7.99153 197.157 7.90453 cv
197.311 7.81754 197.425 7.69853 197.497 7.54852 cv
197.552 7.43153 197.58 7.26053 197.58 7.03352 cv
197.58 6.84453 197.58 7.03352 197.58 6.84453 cv
f
198.83 9.53851 mo
198.773 9.05553 198.83 9.53851 198.773 9.05553 cv
198.885 9.08553 198.984 9.10052 199.067 9.10052 cv
199.182 9.10052 199.273 9.08153 199.342 9.04352 cv
199.411 9.00552 199.467 8.95251 199.511 8.88351 cv
199.543 8.83252 199.596 8.70451 199.668 8.50052 cv
199.678 8.47153 199.693 8.42952 199.714 8.37453 cv
198.561 5.33153 199.714 8.37453 198.561 5.33153 cv
199.116 5.33153 198.561 5.33153 199.116 5.33153 cv
199.748 7.09052 199.116 5.33153 199.748 7.09052 cv
199.83 7.31352 199.904 7.54752 199.968 7.79352 cv
200.027 7.55753 200.098 7.32652 200.18 7.10152 cv
200.829 5.33153 200.18 7.10152 200.829 5.33153 cv
201.344 5.33153 200.829 5.33153 201.344 5.33153 cv
200.189 8.42052 201.344 5.33153 200.189 8.42052 cv
200.065 8.75352 199.968 8.98352 199.9 9.10953 cv
199.808 9.27953 199.703 9.40352 199.585 9.48251 cv
199.467 9.56152 199.326 9.60152 199.162 9.60152 cv
199.063 9.60152 198.952 9.58052 198.83 9.53851 cv
f
203.248 8.36852 mo
203.248 4.17552 203.248 8.36852 203.248 4.17552 cv
204.083 4.17552 203.248 4.17552 204.083 4.17552 cv
205.076 7.14452 204.083 4.17552 205.076 7.14452 cv
205.167 7.42052 205.234 7.62752 205.276 7.76453 cv
205.324 7.61252 205.398 7.38852 205.499 7.09253 cv
206.503 4.17552 205.499 7.09253 206.503 4.17552 cv
207.249 4.17552 206.503 4.17552 207.249 4.17552 cv
207.249 8.36852 207.249 4.17552 207.249 8.36852 cv
206.715 8.36852 207.249 8.36852 206.715 8.36852 cv
206.715 4.85953 206.715 8.36852 206.715 4.85953 cv
205.496 8.36852 206.715 4.85953 205.496 8.36852 cv
204.996 8.36852 205.496 8.36852 204.996 8.36852 cv
203.783 4.79852 204.996 8.36852 203.783 4.79852 cv
203.783 8.36852 203.783 4.79852 203.783 8.36852 cv
203.248 8.36852 203.783 8.36852 203.248 8.36852 cv
f
207.826 6.85052 mo
207.826 6.28754 207.982 5.87154 208.295 5.60052 cv
208.556 5.37553 208.875 5.26353 209.25 5.26353 cv
209.668 5.26353 210.009 5.39954 210.274 5.67354 cv
210.539 5.94753 210.672 6.32553 210.672 6.80753 cv
210.672 7.19853 210.613 7.50554 210.496 7.73053 cv
210.379 7.95453 210.208 8.12854 209.984 8.25153 cv
209.76 8.37553 209.515 8.43753 209.25 8.43753 cv
208.825 8.43753 208.481 8.30153 208.219 8.02853 cv
207.957 7.75653 207.826 7.36353 207.826 6.85052 cv
cp
208.355 6.85052 mo
208.355 7.23953 208.44 7.53053 208.61 7.72453 cv
208.779 7.91753 208.993 8.01453 209.25 8.01453 cv
209.506 8.01453 209.719 7.91753 209.888 7.72253 cv
210.058 7.52853 210.143 7.23154 210.143 6.83353 cv
210.143 6.45753 210.057 6.17354 209.887 5.97954 cv
209.716 5.78653 209.504 5.68953 209.25 5.68953 cv
208.993 5.68953 208.779 5.78554 208.61 5.97853 cv
208.44 6.17053 208.355 6.46153 208.355 6.85052 cv
f
212.074 8.36852 mo
210.918 5.33052 212.074 8.36852 210.918 5.33052 cv
211.462 5.33052 210.918 5.33052 211.462 5.33052 cv
212.114 7.15053 211.462 5.33052 212.114 7.15053 cv
212.185 7.34653 212.249 7.55052 212.309 7.76253 cv
212.354 7.60152 212.418 7.40952 212.5 7.18452 cv
213.175 5.33052 212.5 7.18452 213.175 5.33052 cv
213.704 5.33052 213.175 5.33052 213.704 5.33052 cv
212.555 8.36852 213.704 5.33052 212.555 8.36852 cv
212.074 8.36852 212.555 8.36852 212.074 8.36852 cv
f
214.162 4.76752 mo
214.162 4.17552 214.162 4.76752 214.162 4.17552 cv
214.677 4.17552 214.162 4.17552 214.677 4.17552 cv
214.677 4.76752 214.677 4.17552 214.677 4.76752 cv
214.162 4.76752 214.677 4.76752 214.162 4.76752 cv
cp
214.162 8.36853 mo
214.162 5.33052 214.162 8.36853 214.162 5.33052 cv
214.677 5.33052 214.162 5.33052 214.677 5.33052 cv
214.677 8.36853 214.677 5.33052 214.677 8.36853 cv
214.162 8.36853 214.677 8.36853 214.162 8.36853 cv
f
217.561 7.39052 mo
218.093 7.45653 217.561 7.39052 218.093 7.45653 cv
218.009 7.76753 217.854 8.00853 217.627 8.17952 cv
217.4 8.35153 217.11 8.43753 216.757 8.43753 cv
216.313 8.43753 215.961 8.30052 215.7 8.02652 cv
215.44 7.75352 215.31 7.36952 215.31 6.87552 cv
215.31 6.36453 215.442 5.96852 215.705 5.68553 cv
215.968 5.40352 216.309 5.26253 216.729 5.26253 cv
217.135 5.26253 217.467 5.40053 217.724 5.67752 cv
217.981 5.95352 218.11 6.34253 218.11 6.84453 cv
218.11 6.87453 218.109 6.92053 218.107 6.98152 cv
215.842 6.98152 218.107 6.98152 215.842 6.98152 cv
215.861 7.31552 215.955 7.57053 216.125 7.74852 cv
216.295 7.92552 216.507 8.01453 216.76 8.01453 cv
216.949 8.01453 217.11 7.96452 217.244 7.86552 cv
217.377 7.76653 217.483 7.60753 217.561 7.39052 cv
cp
215.871 6.55853 mo
217.567 6.55853 215.871 6.55853 217.567 6.55853 cv
217.544 6.30252 217.479 6.11153 217.372 5.98352 cv
217.208 5.78552 216.996 5.68553 216.734 5.68553 cv
216.498 5.68553 216.299 5.76453 216.138 5.92352 cv
215.977 6.08153 215.888 6.29353 215.871 6.55853 cv
f
218.488 7.46252 mo
218.997 7.38254 218.488 7.46252 218.997 7.38254 cv
219.026 7.58653 219.105 7.74254 219.236 7.85153 cv
219.367 7.96053 219.549 8.01453 219.784 8.01453 cv
220.02 8.01453 220.196 7.96654 220.31 7.87053 cv
220.424 7.77353 220.482 7.66054 220.482 7.53152 cv
220.482 7.41454 220.431 7.32353 220.33 7.25653 cv
220.259 7.21053 220.084 7.15253 219.804 7.08253 cv
219.426 6.98653 219.164 6.90453 219.019 6.83453 cv
218.873 6.76553 218.762 6.66853 218.687 6.54553 cv
218.611 6.42253 218.574 6.28653 218.574 6.13853 cv
218.574 6.00253 218.605 5.87753 218.667 5.76253 cv
218.729 5.64653 218.813 5.55054 218.92 5.47453 cv
219 5.41553 219.109 5.36554 219.247 5.32454 cv
219.386 5.28354 219.534 5.26353 219.692 5.26353 cv
219.931 5.26353 220.14 5.29753 220.32 5.36653 cv
220.5 5.43452 220.633 5.52753 220.719 5.64453 cv
220.805 5.76253 220.864 5.91853 220.896 6.11554 cv
220.393 6.18452 220.896 6.11554 220.393 6.18452 cv
220.37 6.02753 220.304 5.90553 220.194 5.81754 cv
220.084 5.73053 219.93 5.68654 219.729 5.68654 cv
219.493 5.68654 219.324 5.72552 219.223 5.80353 cv
219.122 5.88153 219.071 5.97353 219.071 6.07854 cv
219.071 6.14453 219.092 6.20453 219.134 6.25853 cv
219.176 6.31354 219.242 6.35953 219.332 6.39554 cv
219.383 6.41454 219.535 6.45853 219.787 6.52753 cv
220.151 6.62453 220.405 6.70453 220.549 6.76653 cv
220.693 6.82854 220.806 6.91853 220.888 7.03653 cv
220.97 7.15453 221.011 7.30153 221.011 7.47653 cv
221.011 7.64853 220.961 7.81053 220.861 7.96153 cv
220.76 8.11353 220.616 8.23053 220.427 8.31354 cv
220.238 8.39653 220.025 8.43753 219.787 8.43753 cv
219.392 8.43753 219.091 8.35553 218.884 8.19153 cv
218.677 8.02753 218.545 7.78453 218.488 7.46252 cv
f
224.361 8.36852 mo
224.361 4.67052 224.361 8.36852 224.361 4.67052 cv
222.98 4.67052 224.361 4.67052 222.98 4.67052 cv
222.98 4.17552 222.98 4.67052 222.98 4.17552 cv
226.303 4.17552 222.98 4.17552 226.303 4.17552 cv
226.303 4.67052 226.303 4.17552 226.303 4.67052 cv
224.916 4.67052 226.303 4.67052 224.916 4.67052 cv
224.916 8.36852 224.916 4.67052 224.916 8.36852 cv
224.361 8.36852 224.916 8.36852 224.361 8.36852 cv
f
228.083 8.36852 mo
226.458 4.17552 228.083 8.36852 226.458 4.17552 cv
227.059 4.17552 226.458 4.17552 227.059 4.17552 cv
228.149 7.22153 227.059 4.17552 228.149 7.22153 cv
228.237 7.46552 228.31 7.69452 228.369 7.90852 cv
228.434 7.67952 228.509 7.45052 228.595 7.22153 cv
229.728 4.17552 228.595 7.22153 229.728 4.17552 cv
230.294 4.17552 229.728 4.17552 230.294 4.17552 cv
228.652 8.36852 230.294 4.17552 228.652 8.36852 cv
228.083 8.36852 228.652 8.36852 228.083 8.36852 cv
f
1.134 lw
153.4 14.1325 mo
167.95 14.1325 li
0 .990631 1 .000396735 cmyk
@
157.462 14.2265 mo
160.674 11.0145 li
163.887 14.2265 li
160.674 17.4385 li
cp
ef
.378 lw
157.462 14.2265 mo
160.674 11.0145 li
163.887 14.2265 li
160.674 17.4385 li
cp
@
170.214 16.3995 mo
170.214 12.2065 170.214 16.3995 170.214 12.2065 cv
170.769 12.2065 170.214 12.2065 170.769 12.2065 cv
170.769 13.9285 170.769 12.2065 170.769 13.9285 cv
172.948 13.9285 170.769 13.9285 172.948 13.9285 cv
172.948 12.2065 172.948 13.9285 172.948 12.2065 cv
173.503 12.2065 172.948 12.2065 173.503 12.2065 cv
173.503 16.3995 173.503 12.2065 173.503 16.3995 cv
172.948 16.3995 173.503 16.3995 172.948 16.3995 cv
172.948 14.4235 172.948 16.3995 172.948 14.4235 cv
170.769 14.4235 172.948 14.4235 170.769 14.4235 cv
170.769 16.3995 170.769 14.4235 170.769 16.3995 cv
170.214 16.3995 170.769 16.3995 170.214 16.3995 cv
1 /0 /CSD get_res sepcs
1 sep
f
176.364 16.0245 mo
176.173 16.1865 175.99 16.3005 175.813 16.3675 cv
175.637 16.4345 175.448 16.4675 175.246 16.4675 cv
174.912 16.4675 174.656 16.3865 174.476 16.2235 cv
174.297 16.0605 174.207 15.8515 174.207 15.5985 cv
174.207 15.4495 174.241 15.3135 174.309 15.1905 cv
174.377 15.0675 174.465 14.9695 174.575 14.8945 cv
174.685 14.8205 174.808 14.7645 174.945 14.7255 cv
175.046 14.6995 175.199 14.6735 175.403 14.6485 cv
175.819 14.5995 176.125 14.5405 176.321 14.4715 cv
176.323 14.4005 176.324 14.3565 176.324 14.3365 cv
176.324 14.1275 176.275 13.9795 176.178 13.8935 cv
176.047 13.7775 175.851 13.7195 175.592 13.7195 cv
175.35 13.7195 175.171 13.7615 175.055 13.8465 cv
174.94 13.9315 174.855 14.0815 174.799 14.2965 cv
174.296 14.2285 174.799 14.2965 174.296 14.2285 cv
174.342 14.0125 174.417 13.8385 174.522 13.7065 cv
174.627 13.5735 174.778 13.4715 174.977 13.4005 cv
175.175 13.3285 175.405 13.2935 175.666 13.2935 cv
175.925 13.2935 176.136 13.3235 176.298 13.3845 cv
176.46 13.4455 176.579 13.5225 176.656 13.6145 cv
176.732 13.7075 176.785 13.8245 176.816 13.9655 cv
176.833 14.0525 176.842 14.2115 176.842 14.4395 cv
176.842 15.1265 176.842 14.4395 176.842 15.1265 cv
176.842 15.6045 176.853 15.9075 176.875 16.0345 cv
176.896 16.1615 176.94 16.2825 177.005 16.3995 cv
176.467 16.3995 177.005 16.3995 176.467 16.3995 cv
176.414 16.2925 176.379 16.1675 176.364 16.0245 cv
cp
176.321 14.8745 mo
176.134 14.9505 175.854 15.0155 175.48 15.0695 cv
175.269 15.0995 175.119 15.1345 175.031 15.1725 cv
174.943 15.2105 174.876 15.2665 174.828 15.3395 cv
174.78 15.4125 174.757 15.4945 174.757 15.5845 cv
174.757 15.7215 174.809 15.8355 174.912 15.9275 cv
175.016 16.0185 175.168 16.0645 175.369 16.0645 cv
175.567 16.0645 175.743 16.0215 175.898 15.9345 cv
176.052 15.8475 176.166 15.7285 176.238 15.5785 cv
176.293 15.4615 176.321 15.2905 176.321 15.0635 cv
176.321 14.8745 176.321 15.0635 176.321 14.8745 cv
f
177.595 16.3995 mo
177.595 13.3615 177.595 16.3995 177.595 13.3615 cv
178.058 13.3615 177.595 13.3615 178.058 13.3615 cv
178.058 13.7935 178.058 13.3615 178.058 13.7935 cv
178.281 13.4605 178.604 13.2935 179.025 13.2935 cv
179.208 13.2935 179.376 13.3265 179.53 13.3925 cv
179.683 13.4575 179.798 13.5445 179.875 13.6505 cv
179.951 13.7575 180.004 13.8845 180.035 14.0315 cv
180.054 14.1265 180.063 14.2935 180.063 14.5315 cv
180.063 16.3995 180.063 14.5315 180.063 16.3995 cv
179.549 16.3995 180.063 16.3995 179.549 16.3995 cv
179.549 14.5515 179.549 16.3995 179.549 14.5515 cv
179.549 14.3425 179.529 14.1855 179.488 14.0815 cv
179.448 13.9775 179.377 13.8945 179.275 13.8325 cv
179.173 13.7705 179.054 13.7395 178.916 13.7395 cv
178.697 13.7395 178.508 13.8095 178.349 13.9485 cv
178.189 14.0875 178.11 14.3515 178.11 14.7405 cv
178.11 16.3995 178.11 14.7405 178.11 16.3995 cv
177.595 16.3995 178.11 16.3995 177.595 16.3995 cv
f
180.713 16.6515 mo
181.214 16.7255 180.713 16.6515 181.214 16.7255 cv
181.235 16.8805 181.293 16.9925 181.388 17.0635 cv
181.516 17.1585 181.69 17.2065 181.911 17.2065 cv
182.15 17.2065 182.334 17.1585 182.463 17.0635 cv
182.593 16.9685 182.681 16.8345 182.727 16.6625 cv
182.753 16.5585 182.766 16.3375 182.764 16.0025 cv
182.539 16.2675 182.258 16.3995 181.923 16.3995 cv
181.505 16.3995 181.182 16.2495 180.953 15.9475 cv
180.724 15.6465 180.61 15.2855 180.61 14.8635 cv
180.61 14.5745 180.662 14.3065 180.767 14.0615 cv
180.872 13.8165 181.024 13.6275 181.224 13.4935 cv
181.423 13.3605 181.657 13.2935 181.926 13.2935 cv
182.284 13.2935 182.58 13.4385 182.812 13.7285 cv
182.812 13.3625 182.812 13.7285 182.812 13.3625 cv
183.287 13.3625 182.812 13.3625 183.287 13.3625 cv
183.287 15.9875 183.287 13.3625 183.287 15.9875 cv
183.287 16.4605 183.239 16.7955 183.143 16.9935 cv
183.046 17.1905 182.894 17.3465 182.685 17.4605 cv
182.476 17.5755 182.219 17.6325 181.914 17.6325 cv
181.552 17.6325 181.259 17.5515 181.036 17.3875 cv
180.813 17.2245 180.705 16.9795 180.713 16.6515 cv
cp
181.139 14.8265 mo
181.139 15.2255 181.218 15.5165 181.377 15.6995 cv
181.535 15.8825 181.733 15.9735 181.971 15.9735 cv
182.208 15.9735 182.406 15.8825 182.566 15.7005 cv
182.727 15.5185 182.807 15.2325 182.807 14.8435 cv
182.807 14.4725 182.724 14.1915 182.559 14.0025 cv
182.394 13.8145 182.196 13.7195 181.963 13.7195 cv
181.734 13.7195 181.54 13.8125 181.379 13.9985 cv
181.219 14.1845 181.139 14.4605 181.139 14.8265 cv
f
183.828 14.8805 mo
183.828 14.3175 183.984 13.9015 184.297 13.6305 cv
184.558 13.4055 184.877 13.2935 185.252 13.2935 cv
185.67 13.2935 186.011 13.4295 186.276 13.7035 cv
186.541 13.9775 186.674 14.3555 186.674 14.8375 cv
186.674 15.2285 186.615 15.5355 186.498 15.7605 cv
186.381 15.9845 186.21 16.1585 185.986 16.2815 cv
185.762 16.4055 185.517 16.4675 185.252 16.4675 cv
184.827 16.4675 184.483 16.3315 184.221 16.0585 cv
183.959 15.7865 183.828 15.3935 183.828 14.8805 cv
cp
184.357 14.8805 mo
184.357 15.2695 184.442 15.5605 184.612 15.7545 cv
184.781 15.9475 184.995 16.0445 185.252 16.0445 cv
185.508 16.0445 185.721 15.9475 185.89 15.7525 cv
186.06 15.5585 186.145 15.2615 186.145 14.8635 cv
186.145 14.4875 186.059 14.2035 185.889 14.0095 cv
185.718 13.8165 185.506 13.7195 185.252 13.7195 cv
184.995 13.7195 184.781 13.8155 184.612 14.0085 cv
184.442 14.2005 184.357 14.4915 184.357 14.8805 cv
f
189.222 16.3995 mo
189.222 15.9535 189.222 16.3995 189.222 15.9535 cv
188.986 16.2965 188.664 16.4685 188.258 16.4685 cv
188.079 16.4685 187.912 16.4335 187.756 16.3655 cv
187.601 16.2965 187.485 16.2105 187.41 16.1065 cv
187.335 16.0025 187.282 15.8755 187.251 15.7245 cv
187.23 15.6235 187.22 15.4635 187.22 15.2435 cv
187.22 13.3615 187.22 15.2435 187.22 13.3615 cv
187.735 13.3615 187.22 13.3615 187.735 13.3615 cv
187.735 15.0465 187.735 13.3615 187.735 15.0465 cv
187.735 15.3155 187.745 15.4965 187.766 15.5905 cv
187.799 15.7255 187.867 15.8315 187.972 15.9085 cv
188.077 15.9865 188.207 16.0245 188.361 16.0245 cv
188.516 16.0245 188.66 15.9855 188.796 15.9065 cv
188.931 15.8265 189.027 15.7195 189.083 15.5825 cv
189.14 15.4465 189.168 15.2485 189.168 14.9895 cv
189.168 13.3615 189.168 14.9895 189.168 13.3615 cv
189.682 13.3615 189.168 13.3615 189.682 13.3615 cv
189.682 16.3995 189.682 13.3615 189.682 16.3995 cv
189.222 16.3995 189.682 16.3995 189.222 16.3995 cv
f
191.568 15.9395 mo
191.642 16.3945 191.568 15.9395 191.642 16.3945 cv
191.497 16.4245 191.368 16.4405 191.253 16.4405 cv
191.067 16.4405 190.922 16.4105 190.819 16.3515 cv
190.716 16.2925 190.643 16.2145 190.601 16.1185 cv
190.559 16.0215 190.538 15.8195 190.538 15.5105 cv
190.538 13.7625 190.538 15.5105 190.538 13.7625 cv
190.161 13.7625 190.538 13.7625 190.161 13.7625 cv
190.161 13.3625 190.161 13.7625 190.161 13.3625 cv
190.538 13.3625 190.161 13.3625 190.538 13.3625 cv
190.538 12.6105 190.538 13.3625 190.538 12.6105 cv
191.05 12.3015 190.538 12.6105 191.05 12.3015 cv
191.05 13.3625 191.05 12.3015 191.05 13.3625 cv
191.568 13.3625 191.05 13.3625 191.568 13.3625 cv
191.568 13.7625 191.568 13.3625 191.568 13.7625 cv
191.05 13.7625 191.568 13.7625 191.05 13.7625 cv
191.05 15.5395 191.05 13.7625 191.05 15.5395 cv
191.05 15.6855 191.059 15.7805 191.077 15.8225 cv
191.096 15.8645 191.125 15.8975 191.166 15.9225 cv
191.207 15.9475 191.266 15.9595 191.342 15.9595 cv
191.399 15.9595 191.475 15.9525 191.568 15.9395 cv
f
191.844 15.4925 mo
192.353 15.4125 191.844 15.4925 192.353 15.4125 cv
192.382 15.6165 192.461 15.7725 192.592 15.8815 cv
192.723 15.9905 192.905 16.0445 193.14 16.0445 cv
193.376 16.0445 193.552 15.9965 193.666 15.9005 cv
193.78 15.8035 193.838 15.6905 193.838 15.5615 cv
193.838 15.4445 193.787 15.3535 193.686 15.2865 cv
193.615 15.2405 193.44 15.1825 193.16 15.1125 cv
192.782 15.0165 192.52 14.9345 192.375 14.8645 cv
192.229 14.7955 192.118 14.6985 192.043 14.5755 cv
191.967 14.4525 191.93 14.3165 191.93 14.1685 cv
191.93 14.0325 191.961 13.9075 192.023 13.7925 cv
192.085 13.6765 192.169 13.5805 192.276 13.5045 cv
192.356 13.4455 192.465 13.3955 192.603 13.3545 cv
192.742 13.3135 192.89 13.2935 193.048 13.2935 cv
193.286 13.2935 193.496 13.3275 193.676 13.3965 cv
193.856 13.4645 193.989 13.5575 194.075 13.6745 cv
194.161 13.7925 194.22 13.9485 194.252 14.1455 cv
193.749 14.2145 194.252 14.1455 193.749 14.2145 cv
193.726 14.0575 193.66 13.9355 193.55 13.8475 cv
193.44 13.7605 193.286 13.7165 193.085 13.7165 cv
192.849 13.7165 192.68 13.7555 192.579 13.8335 cv
192.478 13.9115 192.427 14.0035 192.427 14.1085 cv
192.427 14.1745 192.448 14.2345 192.49 14.2885 cv
192.532 14.3435 192.598 14.3895 192.688 14.4255 cv
192.739 14.4445 192.891 14.4885 193.143 14.5575 cv
193.507 14.6545 193.761 14.7345 193.905 14.7965 cv
194.049 14.8585 194.162 14.9485 194.244 15.0665 cv
194.326 15.1845 194.367 15.3315 194.367 15.5065 cv
194.367 15.6785 194.317 15.8405 194.217 15.9915 cv
194.116 16.1435 193.972 16.2605 193.783 16.3435 cv
193.594 16.4265 193.381 16.4675 193.143 16.4675 cv
192.748 16.4675 192.447 16.3855 192.24 16.2215 cv
192.033 16.0575 191.901 15.8145 191.844 15.4925 cv
f
1.134 lw
153.4 22.1625 mo
167.95 22.1625 li
.878538 .2439 1 .131716 cmyk
@
160.674 19.3285 mo
161.241 21.3125 li
163.414 21.3125 li
161.713 22.5405 li
162.375 24.6195 li
160.674 23.2965 li
158.879 24.6195 li
159.54 22.5405 li
157.84 21.3125 li
160.013 21.3125 li
cp
ef
.378 lw
160.674 19.3285 mo
161.241 21.3125 li
163.414 21.3125 li
161.713 22.5405 li
162.375 24.6195 li
160.674 23.2965 li
158.879 24.6195 li
159.54 22.5405 li
157.84 21.3125 li
160.013 21.3125 li
cp
@
170.008 23.0835 mo
170.531 23.0375 170.008 23.0835 170.531 23.0375 cv
170.556 23.2475 170.614 23.4195 170.704 23.5535 cv
170.795 23.6885 170.936 23.7975 171.126 23.8805 cv
171.317 23.9635 171.532 24.0045 171.77 24.0045 cv
171.982 24.0045 172.168 23.9735 172.33 23.9105 cv
172.493 23.8475 172.613 23.7605 172.692 23.6515 cv
172.771 23.5415 172.811 23.4215 172.811 23.2925 cv
172.811 23.1605 172.773 23.0455 172.697 22.9475 cv
172.62 22.8495 172.494 22.7665 172.319 22.7005 cv
172.207 22.6565 171.958 22.5885 171.573 22.4955 cv
171.187 22.4035 170.918 22.3165 170.763 22.2345 cv
170.563 22.1295 170.414 21.9995 170.315 21.8435 cv
170.217 21.6885 170.168 21.5145 170.168 21.3215 cv
170.168 21.1095 170.228 20.9125 170.348 20.7285 cv
170.468 20.5445 170.644 20.4045 170.875 20.3095 cv
171.105 20.2135 171.362 20.1665 171.644 20.1665 cv
171.955 20.1665 172.229 20.2165 172.466 20.3165 cv
172.704 20.4165 172.886 20.5635 173.014 20.7585 cv
173.142 20.9525 173.211 21.1725 173.22 21.4185 cv
172.688 21.4585 173.22 21.4185 172.688 21.4585 cv
172.659 21.1935 172.563 20.9935 172.398 20.8585 cv
172.233 20.7225 171.989 20.6555 171.667 20.6555 cv
171.331 20.6555 171.087 20.7165 170.933 20.8395 cv
170.78 20.9625 170.703 21.1105 170.703 21.2845 cv
170.703 21.4355 170.757 21.5595 170.866 21.6565 cv
170.973 21.7535 171.252 21.8535 171.703 21.9555 cv
172.154 22.0575 172.463 22.1465 172.631 22.2225 cv
172.875 22.3355 173.055 22.4775 173.171 22.6505 cv
173.288 22.8225 173.346 23.0215 173.346 23.2465 cv
173.346 23.4695 173.282 23.6795 173.154 23.8775 cv
173.026 24.0745 172.843 24.2285 172.604 24.3375 cv
172.364 24.4475 172.095 24.5025 171.796 24.5025 cv
171.416 24.5025 171.098 24.4465 170.842 24.3365 cv
170.585 24.2255 170.384 24.0595 170.238 23.8375 cv
170.092 23.6155 170.016 23.3635 170.008 23.0835 cv
1 /0 /CSD get_res sepcs
1 sep
f
174.007 24.4305 mo
174.007 20.2375 174.007 24.4305 174.007 20.2375 cv
174.522 20.2375 174.007 20.2375 174.522 20.2375 cv
174.522 22.6285 174.522 20.2375 174.522 22.6285 cv
175.74 21.3925 174.522 22.6285 175.74 21.3925 cv
176.407 21.3925 175.74 21.3925 176.407 21.3925 cv
175.245 22.5195 176.407 21.3925 175.245 22.5195 cv
176.524 24.4305 175.245 22.5195 176.524 24.4305 cv
175.889 24.4305 176.524 24.4305 175.889 24.4305 cv
174.885 22.8775 175.889 24.4305 174.885 22.8775 cv
174.522 23.2265 174.885 22.8775 174.522 23.2265 cv
174.522 24.4305 174.522 23.2265 174.522 24.4305 cv
174.007 24.4305 174.522 24.4305 174.007 24.4305 cv
f
177.005 25.5995 mo
176.948 25.1165 177.005 25.5995 176.948 25.1165 cv
177.06 25.1465 177.159 25.1615 177.242 25.1615 cv
177.357 25.1615 177.448 25.1425 177.517 25.1045 cv
177.586 25.0665 177.642 25.0135 177.686 24.9445 cv
177.718 24.8935 177.771 24.7655 177.843 24.5615 cv
177.853 24.5325 177.868 24.4905 177.889 24.4355 cv
176.736 21.3925 177.889 24.4355 176.736 21.3925 cv
177.291 21.3925 176.736 21.3925 177.291 21.3925 cv
177.923 23.1515 177.291 21.3925 177.923 23.1515 cv
178.005 23.3745 178.079 23.6085 178.143 23.8545 cv
178.202 23.6185 178.273 23.3875 178.355 23.1625 cv
179.004 21.3925 178.355 23.1625 179.004 21.3925 cv
179.519 21.3925 179.004 21.3925 179.519 21.3925 cv
178.364 24.4815 179.519 21.3925 178.364 24.4815 cv
178.24 24.8145 178.143 25.0445 178.075 25.1705 cv
177.983 25.3405 177.878 25.4645 177.76 25.5435 cv
177.642 25.6225 177.501 25.6625 177.337 25.6625 cv
177.238 25.6625 177.127 25.6415 177.005 25.5995 cv
f
179.768 25.5945 mo
179.768 21.3925 179.768 25.5945 179.768 21.3925 cv
180.237 21.3925 179.768 21.3925 180.237 21.3925 cv
180.237 21.7875 180.237 21.3925 180.237 21.7875 cv
180.348 21.6335 180.473 21.5175 180.612 21.4405 cv
180.751 21.3625 180.92 21.3245 181.118 21.3245 cv
181.377 21.3245 181.606 21.3905 181.804 21.5245 cv
182.003 21.6575 182.152 21.8465 182.254 22.0895 cv
182.355 22.3325 182.405 22.5985 182.405 22.8885 cv
182.405 23.1995 182.349 23.4795 182.238 23.7285 cv
182.126 23.9775 181.964 24.1675 181.752 24.3005 cv
181.539 24.4325 181.315 24.4995 181.081 24.4995 cv
180.909 24.4995 180.755 24.4625 180.619 24.3905 cv
180.483 24.3175 180.371 24.2265 180.283 24.1155 cv
180.283 25.5945 180.283 24.1155 180.283 25.5945 cv
179.768 25.5945 180.283 25.5945 179.768 25.5945 cv
cp
180.234 22.9285 mo
180.234 23.3195 180.313 23.6085 180.472 23.7955 cv
180.63 23.9825 180.822 24.0755 181.047 24.0755 cv
181.275 24.0755 181.471 23.9785 181.634 23.7855 cv
181.797 23.5915 181.879 23.2925 181.879 22.8855 cv
181.879 22.4985 181.799 22.2085 181.64 22.0165 cv
181.481 21.8235 181.291 21.7275 181.069 21.7275 cv
180.85 21.7275 180.656 21.8305 180.487 22.0355 cv
180.319 22.2395 180.234 22.5375 180.234 22.9285 cv
f
185.059 23.4525 mo
185.591 23.5185 185.059 23.4525 185.591 23.5185 cv
185.507 23.8295 185.352 24.0705 185.125 24.2415 cv
184.898 24.4135 184.608 24.4995 184.255 24.4995 cv
183.811 24.4995 183.459 24.3625 183.198 24.0885 cv
182.938 23.8155 182.808 23.4315 182.808 22.9375 cv
182.808 22.4265 182.94 22.0305 183.203 21.7475 cv
183.466 21.4655 183.807 21.3245 184.227 21.3245 cv
184.633 21.3245 184.965 21.4625 185.222 21.7395 cv
185.479 22.0155 185.608 22.4045 185.608 22.9065 cv
185.608 22.9365 185.607 22.9825 185.605 23.0435 cv
183.34 23.0435 185.605 23.0435 183.34 23.0435 cv
183.359 23.3775 183.453 23.6325 183.623 23.8105 cv
183.793 23.9875 184.005 24.0765 184.258 24.0765 cv
184.447 24.0765 184.608 24.0265 184.742 23.9275 cv
184.875 23.8285 184.981 23.6695 185.059 23.4525 cv
cp
183.369 22.6205 mo
185.065 22.6205 183.369 22.6205 185.065 22.6205 cv
185.042 22.3645 184.977 22.1735 184.87 22.0455 cv
184.706 21.8475 184.494 21.7475 184.232 21.7475 cv
183.996 21.7475 183.797 21.8265 183.636 21.9855 cv
183.475 22.1435 183.386 22.3555 183.369 22.6205 cv
f
1.134 lw
153.4 30.1935 mo
167.95 30.1935 li
0 .612726 1 .000701915 cmyk
@
160.674 26.7925 mo
163.697 31.9885 li
157.556 31.9885 li
cp
ef
.378 lw
160.674 26.7925 mo
163.697 31.9885 li
157.556 31.9885 li
cp
@
172.159 30.8165 mo
172.159 30.3245 172.159 30.8165 172.159 30.3245 cv
173.935 30.3215 172.159 30.3245 173.935 30.3215 cv
173.935 31.8775 173.935 30.3215 173.935 31.8775 cv
173.663 32.0945 173.381 32.2585 173.091 32.3685 cv
172.802 32.4775 172.504 32.5325 172.199 32.5325 cv
171.787 32.5325 171.413 32.4445 171.076 32.2685 cv
170.74 32.0915 170.486 31.8365 170.314 31.5025 cv
170.143 31.1695 170.057 30.7965 170.057 30.3845 cv
170.057 29.9765 170.142 29.5955 170.313 29.2415 cv
170.483 28.8885 170.729 28.6255 171.049 28.4535 cv
171.37 28.2825 171.739 28.1965 172.156 28.1965 cv
172.459 28.1965 172.733 28.2455 172.978 28.3435 cv
173.223 28.4425 173.416 28.5785 173.555 28.7545 cv
173.694 28.9295 173.8 29.1585 173.872 29.4405 cv
173.372 29.5785 173.872 29.4405 173.372 29.5785 cv
173.309 29.3645 173.231 29.1965 173.137 29.0745 cv
173.044 28.9525 172.91 28.8545 172.737 28.7815 cv
172.563 28.7085 172.371 28.6715 172.159 28.6715 cv
171.905 28.6715 171.686 28.7095 171.501 28.7875 cv
171.316 28.8645 171.167 28.9655 171.054 29.0915 cv
170.94 29.2175 170.852 29.3555 170.789 29.5065 cv
170.682 29.7655 170.629 30.0475 170.629 30.3505 cv
170.629 30.7245 170.693 31.0365 170.822 31.2885 cv
170.951 31.5405 171.138 31.7265 171.384 31.8495 cv
171.63 31.9715 171.891 32.0325 172.168 32.0325 cv
172.408 32.0325 172.642 31.9855 172.871 31.8935 cv
173.1 31.8005 173.274 31.7025 173.392 31.5975 cv
173.392 30.8165 173.392 31.5975 173.392 30.8165 cv
172.159 30.8165 173.392 30.8165 172.159 30.8165 cv
1 /0 /CSD get_res sepcs
1 sep
f
174.474 30.9425 mo
174.474 30.3795 174.63 29.9635 174.943 29.6925 cv
175.204 29.4675 175.523 29.3555 175.898 29.3555 cv
176.316 29.3555 176.657 29.4915 176.922 29.7655 cv
177.187 30.0395 177.32 30.4175 177.32 30.8995 cv
177.32 31.2905 177.261 31.5975 177.144 31.8225 cv
177.027 32.0465 176.856 32.2205 176.632 32.3435 cv
176.408 32.4675 176.163 32.5295 175.898 32.5295 cv
175.473 32.5295 175.129 32.3935 174.867 32.1205 cv
174.605 31.8485 174.474 31.4555 174.474 30.9425 cv
cp
175.003 30.9425 mo
175.003 31.3315 175.088 31.6225 175.258 31.8165 cv
175.427 32.0095 175.641 32.1065 175.898 32.1065 cv
176.154 32.1065 176.367 32.0095 176.536 31.8145 cv
176.706 31.6205 176.791 31.3235 176.791 30.9255 cv
176.791 30.5495 176.705 30.2655 176.535 30.0715 cv
176.364 29.8785 176.152 29.7815 175.898 29.7815 cv
175.641 29.7815 175.427 29.8775 175.258 30.0705 cv
175.088 30.2625 175.003 30.5535 175.003 30.9425 cv
f
177.686 30.9425 mo
177.686 30.3795 177.842 29.9635 178.155 29.6925 cv
178.416 29.4675 178.735 29.3555 179.11 29.3555 cv
179.528 29.3555 179.869 29.4915 180.134 29.7655 cv
180.399 30.0395 180.532 30.4175 180.532 30.8995 cv
180.532 31.2905 180.473 31.5975 180.356 31.8225 cv
180.239 32.0465 180.068 32.2205 179.844 32.3435 cv
179.62 32.4675 179.375 32.5295 179.11 32.5295 cv
178.685 32.5295 178.341 32.3935 178.079 32.1205 cv
177.817 31.8485 177.686 31.4555 177.686 30.9425 cv
cp
178.215 30.9425 mo
178.215 31.3315 178.3 31.6225 178.47 31.8165 cv
178.639 32.0095 178.853 32.1065 179.11 32.1065 cv
179.366 32.1065 179.579 32.0095 179.748 31.8145 cv
179.918 31.6205 180.003 31.3235 180.003 30.9255 cv
180.003 30.5495 179.917 30.2655 179.747 30.0715 cv
179.576 29.8785 179.364 29.7815 179.11 29.7815 cv
178.853 29.7815 178.639 29.8775 178.47 30.0705 cv
178.3 30.2625 178.215 30.5535 178.215 30.9425 cv
f
180.996 32.7125 mo
181.497 32.7865 180.996 32.7125 181.497 32.7865 cv
181.518 32.9415 181.576 33.0535 181.671 33.1245 cv
181.799 33.2195 181.973 33.2675 182.194 33.2675 cv
182.433 33.2675 182.617 33.2195 182.746 33.1245 cv
182.876 33.0295 182.964 32.8955 183.01 32.7235 cv
183.036 32.6195 183.049 32.3985 183.047 32.0635 cv
182.822 32.3285 182.541 32.4605 182.206 32.4605 cv
181.788 32.4605 181.465 32.3105 181.236 32.0085 cv
181.007 31.7075 180.893 31.3465 180.893 30.9245 cv
180.893 30.6355 180.945 30.3675 181.05 30.1225 cv
181.155 29.8775 181.307 29.6885 181.507 29.5545 cv
181.706 29.4215 181.94 29.3545 182.209 29.3545 cv
182.567 29.3545 182.863 29.4995 183.095 29.7895 cv
183.095 29.4235 183.095 29.7895 183.095 29.4235 cv
183.57 29.4235 183.095 29.4235 183.57 29.4235 cv
183.57 32.0485 183.57 29.4235 183.57 32.0485 cv
183.57 32.5215 183.522 32.8565 183.426 33.0545 cv
183.329 33.2515 183.177 33.4075 182.968 33.5215 cv
182.759 33.6365 182.502 33.6935 182.197 33.6935 cv
181.835 33.6935 181.542 33.6125 181.319 33.4485 cv
181.096 33.2855 180.988 33.0405 180.996 32.7125 cv
cp
181.422 30.8875 mo
181.422 31.2865 181.501 31.5775 181.66 31.7605 cv
181.818 31.9435 182.016 32.0345 182.254 32.0345 cv
182.491 32.0345 182.689 31.9435 182.849 31.7615 cv
183.01 31.5795 183.09 31.2935 183.09 30.9045 cv
183.09 30.5335 183.007 30.2525 182.842 30.0645 cv
182.677 29.8755 182.479 29.7805 182.246 29.7805 cv
182.017 29.7805 181.823 29.8735 181.662 30.0595 cv
181.502 30.2455 181.422 30.5215 181.422 30.8875 cv
f
184.291 32.4605 mo
184.291 28.2675 184.291 32.4605 184.291 28.2675 cv
184.806 28.2675 184.291 28.2675 184.806 28.2675 cv
184.806 32.4605 184.806 28.2675 184.806 32.4605 cv
184.291 32.4605 184.806 32.4605 184.291 32.4605 cv
f
187.705 31.4825 mo
188.237 31.5485 187.705 31.4825 188.237 31.5485 cv
188.153 31.8595 187.998 32.1005 187.771 32.2715 cv
187.544 32.4435 187.254 32.5295 186.901 32.5295 cv
186.457 32.5295 186.105 32.3925 185.844 32.1185 cv
185.584 31.8455 185.454 31.4615 185.454 30.9675 cv
185.454 30.4565 185.586 30.0605 185.849 29.7775 cv
186.112 29.4955 186.453 29.3545 186.873 29.3545 cv
187.279 29.3545 187.611 29.4925 187.868 29.7695 cv
188.125 30.0455 188.254 30.4345 188.254 30.9365 cv
188.254 30.9665 188.253 31.0125 188.251 31.0735 cv
185.986 31.0735 188.251 31.0735 185.986 31.0735 cv
186.005 31.4075 186.099 31.6625 186.269 31.8405 cv
186.439 32.0175 186.651 32.1065 186.904 32.1065 cv
187.093 32.1065 187.254 32.0565 187.388 31.9575 cv
187.521 31.8585 187.627 31.6995 187.705 31.4825 cv
cp
186.015 30.6505 mo
187.711 30.6505 186.015 30.6505 187.711 30.6505 cv
187.688 30.3945 187.623 30.2035 187.516 30.0755 cv
187.352 29.8775 187.14 29.7775 186.878 29.7775 cv
186.642 29.7775 186.443 29.8565 186.282 30.0155 cv
186.121 30.1735 186.032 30.3855 186.015 30.6505 cv
f
191.577 32.4605 mo
191.577 28.7625 191.577 32.4605 191.577 28.7625 cv
190.196 28.7625 191.577 28.7625 190.196 28.7625 cv
190.196 28.2675 190.196 28.7625 190.196 28.2675 cv
193.519 28.2675 190.196 28.2675 193.519 28.2675 cv
193.519 28.7625 193.519 28.2675 193.519 28.7625 cv
192.132 28.7625 193.519 28.7625 192.132 28.7625 cv
192.132 32.4605 192.132 28.7625 192.132 32.4605 cv
191.577 32.4605 192.132 32.4605 191.577 32.4605 cv
f
196.016 32.0865 mo
195.825 32.2485 195.642 32.3625 195.465 32.4295 cv
195.289 32.4965 195.1 32.5295 194.898 32.5295 cv
194.564 32.5295 194.308 32.4485 194.128 32.2855 cv
193.949 32.1225 193.859 31.9135 193.859 31.6605 cv
193.859 31.5115 193.893 31.3755 193.961 31.2525 cv
194.029 31.1295 194.117 31.0315 194.227 30.9565 cv
194.337 30.8825 194.46 30.8265 194.597 30.7875 cv
194.698 30.7615 194.851 30.7355 195.055 30.7105 cv
195.471 30.6615 195.777 30.6025 195.973 30.5335 cv
195.975 30.4625 195.976 30.4185 195.976 30.3985 cv
195.976 30.1895 195.927 30.0415 195.83 29.9555 cv
195.699 29.8395 195.503 29.7815 195.244 29.7815 cv
195.002 29.7815 194.823 29.8235 194.707 29.9085 cv
194.592 29.9935 194.507 30.1435 194.451 30.3585 cv
193.948 30.2905 194.451 30.3585 193.948 30.2905 cv
193.994 30.0745 194.069 29.9005 194.174 29.7685 cv
194.279 29.6355 194.43 29.5335 194.629 29.4625 cv
194.827 29.3905 195.057 29.3555 195.318 29.3555 cv
195.577 29.3555 195.788 29.3855 195.95 29.4465 cv
196.112 29.5075 196.231 29.5845 196.308 29.6765 cv
196.384 29.7695 196.437 29.8865 196.468 30.0275 cv
196.485 30.1145 196.494 30.2735 196.494 30.5015 cv
196.494 31.1885 196.494 30.5015 196.494 31.1885 cv
196.494 31.6665 196.505 31.9695 196.527 32.0965 cv
196.549 32.2235 196.592 32.3445 196.657 32.4615 cv
196.119 32.4615 196.657 32.4615 196.119 32.4615 cv
196.066 32.3545 196.031 32.2295 196.016 32.0865 cv
cp
195.973 30.9365 mo
195.786 31.0125 195.506 31.0775 195.132 31.1315 cv
194.921 31.1615 194.771 31.1965 194.683 31.2345 cv
194.595 31.2725 194.528 31.3285 194.48 31.4015 cv
194.432 31.4745 194.409 31.5565 194.409 31.6465 cv
194.409 31.7835 194.461 31.8975 194.564 31.9895 cv
194.668 32.0805 194.82 32.1265 195.021 32.1265 cv
195.219 32.1265 195.395 32.0835 195.55 31.9965 cv
195.704 31.9095 195.818 31.7905 195.89 31.6405 cv
195.945 31.5235 195.973 31.3525 195.973 31.1255 cv
195.973 30.9365 195.973 31.1255 195.973 30.9365 cv
f
197.235 32.4605 mo
197.235 28.2675 197.235 32.4605 197.235 28.2675 cv
197.75 28.2675 197.235 28.2675 197.75 28.2675 cv
197.75 32.4605 197.75 28.2675 197.75 32.4605 cv
197.235 32.4605 197.75 32.4605 197.235 32.4605 cv
f
198.572 32.4605 mo
198.572 28.2675 198.572 32.4605 198.572 28.2675 cv
199.087 28.2675 198.572 28.2675 199.087 28.2675 cv
199.087 30.6585 199.087 28.2675 199.087 30.6585 cv
200.305 29.4225 199.087 30.6585 200.305 29.4225 cv
200.972 29.4225 200.305 29.4225 200.972 29.4225 cv
199.81 30.5495 200.972 29.4225 199.81 30.5495 cv
201.089 32.4605 199.81 30.5495 201.089 32.4605 cv
200.454 32.4605 201.089 32.4605 200.454 32.4605 cv
199.45 30.9075 200.454 32.4605 199.45 30.9075 cv
199.087 31.2565 199.45 30.9075 199.087 31.2565 cv
199.087 32.4605 199.087 31.2565 199.087 32.4605 cv
198.572 32.4605 199.087 32.4605 198.572 32.4605 cv
f
201.636 32.4605 mo
201.636 28.2675 201.636 32.4605 201.636 28.2675 cv
203.209 28.2675 201.636 28.2675 203.209 28.2675 cv
203.529 28.2675 203.786 28.3095 203.98 28.3945 cv
204.174 28.4795 204.325 28.6105 204.435 28.7865 cv
204.544 28.9625 204.599 29.1475 204.599 29.3405 cv
204.599 29.5195 204.551 29.6885 204.453 29.8465 cv
204.356 30.0045 204.209 30.1325 204.013 30.2295 cv
204.266 30.3035 204.461 30.4305 204.598 30.6095 cv
204.734 30.7895 204.802 31.0005 204.802 31.2445 cv
204.802 31.4415 204.761 31.6235 204.678 31.7925 cv
204.595 31.9615 204.492 32.0915 204.37 32.1835 cv
204.248 32.2745 204.095 32.3435 203.911 32.3905 cv
203.727 32.4375 203.502 32.4605 203.235 32.4605 cv
201.636 32.4605 203.235 32.4605 201.636 32.4605 cv
cp
202.191 30.0295 mo
203.098 30.0295 202.191 30.0295 203.098 30.0295 cv
203.344 30.0295 203.52 30.0135 203.627 29.9805 cv
203.768 29.9385 203.874 29.8695 203.946 29.7715 cv
204.017 29.6745 204.053 29.5525 204.053 29.4055 cv
204.053 29.2665 204.02 29.1445 203.953 29.0385 cv
203.886 28.9325 203.791 28.8605 203.667 28.8205 cv
203.543 28.7815 203.33 28.7625 203.029 28.7625 cv
202.191 28.7625 203.029 28.7625 202.191 28.7625 cv
202.191 30.0295 202.191 28.7625 202.191 30.0295 cv
cp
202.191 31.9655 mo
203.235 31.9655 202.191 31.9655 203.235 31.9655 cv
203.414 31.9655 203.54 31.9595 203.612 31.9455 cv
203.74 31.9225 203.847 31.8845 203.933 31.8315 cv
204.019 31.7775 204.089 31.7005 204.144 31.5985 cv
204.2 31.4965 204.227 31.3785 204.227 31.2445 cv
204.227 31.0885 204.187 30.9525 204.107 30.8375 cv
204.027 30.7215 203.916 30.6405 203.774 30.5945 cv
203.632 30.5475 203.427 30.5245 203.16 30.5245 cv
202.191 30.5245 203.16 30.5245 202.191 30.5245 cv
202.191 31.9655 202.191 30.5245 202.191 31.9655 cv
f
207.449 32.0865 mo
207.258 32.2485 207.075 32.3625 206.898 32.4295 cv
206.722 32.4965 206.533 32.5295 206.331 32.5295 cv
205.997 32.5295 205.741 32.4485 205.561 32.2855 cv
205.382 32.1225 205.292 31.9135 205.292 31.6605 cv
205.292 31.5115 205.326 31.3755 205.394 31.2525 cv
205.462 31.1295 205.55 31.0315 205.66 30.9565 cv
205.77 30.8825 205.893 30.8265 206.03 30.7875 cv
206.131 30.7615 206.284 30.7355 206.488 30.7105 cv
206.904 30.6615 207.21 30.6025 207.406 30.5335 cv
207.408 30.4625 207.409 30.4185 207.409 30.3985 cv
207.409 30.1895 207.36 30.0415 207.263 29.9555 cv
207.132 29.8395 206.936 29.7815 206.677 29.7815 cv
206.435 29.7815 206.256 29.8235 206.14 29.9085 cv
206.025 29.9935 205.94 30.1435 205.884 30.3585 cv
205.381 30.2905 205.884 30.3585 205.381 30.2905 cv
205.427 30.0745 205.502 29.9005 205.607 29.7685 cv
205.712 29.6355 205.863 29.5335 206.062 29.4625 cv
206.26 29.3905 206.49 29.3555 206.751 29.3555 cv
207.01 29.3555 207.221 29.3855 207.383 29.4465 cv
207.545 29.5075 207.664 29.5845 207.741 29.6765 cv
207.817 29.7695 207.87 29.8865 207.901 30.0275 cv
207.918 30.1145 207.927 30.2735 207.927 30.5015 cv
207.927 31.1885 207.927 30.5015 207.927 31.1885 cv
207.927 31.6665 207.938 31.9695 207.96 32.0965 cv
207.981 32.2235 208.025 32.3445 208.09 32.4615 cv
207.552 32.4615 208.09 32.4615 207.552 32.4615 cv
207.499 32.3545 207.464 32.2295 207.449 32.0865 cv
cp
207.406 30.9365 mo
207.219 31.0125 206.939 31.0775 206.565 31.1315 cv
206.354 31.1615 206.204 31.1965 206.116 31.2345 cv
206.028 31.2725 205.961 31.3285 205.913 31.4015 cv
205.865 31.4745 205.842 31.5565 205.842 31.6465 cv
205.842 31.7835 205.894 31.8975 205.997 31.9895 cv
206.101 32.0805 206.253 32.1265 206.454 32.1265 cv
206.652 32.1265 206.828 32.0835 206.983 31.9965 cv
207.137 31.9095 207.251 31.7905 207.323 31.6405 cv
207.378 31.5235 207.406 31.3525 207.406 31.1255 cv
207.406 30.9365 207.406 31.1255 207.406 30.9365 cv
f
210.661 31.3485 mo
211.167 31.4145 210.661 31.3485 211.167 31.4145 cv
211.112 31.7635 210.97 32.0365 210.743 32.2335 cv
210.515 32.4315 210.235 32.5295 209.903 32.5295 cv
209.487 32.5295 209.153 32.3935 208.901 32.1225 cv
208.648 31.8505 208.522 31.4605 208.522 30.9535 cv
208.522 30.6255 208.576 30.3385 208.685 30.0925 cv
208.793 29.8465 208.959 29.6625 209.181 29.5395 cv
209.403 29.4165 209.645 29.3545 209.906 29.3545 cv
210.236 29.3545 210.506 29.4385 210.715 29.6055 cv
210.925 29.7725 211.06 30.0085 211.119 30.3155 cv
210.618 30.3935 211.119 30.3155 210.618 30.3935 cv
210.57 30.1895 210.486 30.0355 210.365 29.9325 cv
210.244 29.8295 210.098 29.7785 209.926 29.7785 cv
209.667 29.7785 209.456 29.8715 209.294 30.0575 cv
209.132 30.2435 209.051 30.5375 209.051 30.9395 cv
209.051 31.3475 209.129 31.6445 209.285 31.8295 cv
209.442 32.0135 209.646 32.1065 209.897 32.1065 cv
210.099 32.1065 210.268 32.0445 210.404 31.9205 cv
210.539 31.7965 210.625 31.6055 210.661 31.3485 cv
f
211.611 32.4605 mo
211.611 28.2675 211.611 32.4605 211.611 28.2675 cv
212.126 28.2675 211.611 28.2675 212.126 28.2675 cv
212.126 30.6585 212.126 28.2675 212.126 30.6585 cv
213.344 29.4225 212.126 30.6585 213.344 29.4225 cv
214.011 29.4225 213.344 29.4225 214.011 29.4225 cv
212.849 30.5495 214.011 29.4225 212.849 30.5495 cv
214.128 32.4605 212.849 30.5495 214.128 32.4605 cv
213.493 32.4605 214.128 32.4605 213.493 32.4605 cv
212.489 30.9075 213.493 32.4605 212.489 30.9075 cv
212.126 31.2565 212.489 30.9075 212.126 31.2565 cv
212.126 32.4605 212.126 31.2565 212.126 32.4605 cv
211.611 32.4605 212.126 32.4605 211.611 32.4605 cv
f
1.134 lw
153.4 38.2235 mo
167.95 38.2235 li
.610498 1 .138643 .0341802 cmyk
@
162.942 36.0505 mo
158.407 36.0505 li
158.407 40.5855 li
162.942 40.5855 li
cp
f
.378 lw
158.407 36.0505 mo
162.942 36.0505 li
162.942 40.5855 li
158.407 40.5855 li
cp
@
172.159 38.8465 mo
172.159 38.3545 172.159 38.8465 172.159 38.3545 cv
173.935 38.3515 172.159 38.3545 173.935 38.3515 cv
173.935 39.9075 173.935 38.3515 173.935 39.9075 cv
173.663 40.1245 173.381 40.2885 173.091 40.3985 cv
172.802 40.5075 172.504 40.5625 172.199 40.5625 cv
171.787 40.5625 171.413 40.4745 171.076 40.2985 cv
170.74 40.1215 170.486 39.8665 170.314 39.5325 cv
170.143 39.1995 170.057 38.8265 170.057 38.4145 cv
170.057 38.0065 170.142 37.6255 170.313 37.2715 cv
170.483 36.9185 170.729 36.6555 171.049 36.4835 cv
171.37 36.3125 171.739 36.2265 172.156 36.2265 cv
172.459 36.2265 172.733 36.2755 172.978 36.3735 cv
173.223 36.4725 173.416 36.6085 173.555 36.7845 cv
173.694 36.9595 173.8 37.1885 173.872 37.4705 cv
173.372 37.6085 173.872 37.4705 173.372 37.6085 cv
173.309 37.3945 173.231 37.2265 173.137 37.1045 cv
173.044 36.9825 172.91 36.8845 172.737 36.8115 cv
172.563 36.7385 172.371 36.7015 172.159 36.7015 cv
171.905 36.7015 171.686 36.7395 171.501 36.8175 cv
171.316 36.8945 171.167 36.9955 171.054 37.1215 cv
170.94 37.2475 170.852 37.3855 170.789 37.5365 cv
170.682 37.7955 170.629 38.0775 170.629 38.3805 cv
170.629 38.7545 170.693 39.0665 170.822 39.3185 cv
170.951 39.5705 171.138 39.7565 171.384 39.8795 cv
171.63 40.0015 171.891 40.0625 172.168 40.0625 cv
172.408 40.0625 172.642 40.0155 172.871 39.9235 cv
173.1 39.8305 173.274 39.7325 173.392 39.6275 cv
173.392 38.8465 173.392 39.6275 173.392 38.8465 cv
172.159 38.8465 173.392 38.8465 172.159 38.8465 cv
1 /0 /CSD get_res sepcs
1 sep
f
174.474 38.9725 mo
174.474 38.4095 174.63 37.9935 174.943 37.7225 cv
175.204 37.4975 175.523 37.3855 175.898 37.3855 cv
176.316 37.3855 176.657 37.5215 176.922 37.7955 cv
177.187 38.0695 177.32 38.4475 177.32 38.9295 cv
177.32 39.3205 177.261 39.6275 177.144 39.8525 cv
177.027 40.0765 176.856 40.2505 176.632 40.3735 cv
176.408 40.4975 176.163 40.5595 175.898 40.5595 cv
175.473 40.5595 175.129 40.4235 174.867 40.1505 cv
174.605 39.8785 174.474 39.4855 174.474 38.9725 cv
cp
175.003 38.9725 mo
175.003 39.3615 175.088 39.6525 175.258 39.8465 cv
175.427 40.0395 175.641 40.1365 175.898 40.1365 cv
176.154 40.1365 176.367 40.0395 176.536 39.8445 cv
176.706 39.6505 176.791 39.3535 176.791 38.9555 cv
176.791 38.5795 176.705 38.2955 176.535 38.1015 cv
176.364 37.9085 176.152 37.8115 175.898 37.8115 cv
175.641 37.8115 175.427 37.9075 175.258 38.1005 cv
175.088 38.2925 175.003 38.5835 175.003 38.9725 cv
f
177.686 38.9725 mo
177.686 38.4095 177.842 37.9935 178.155 37.7225 cv
178.416 37.4975 178.735 37.3855 179.11 37.3855 cv
179.528 37.3855 179.869 37.5215 180.134 37.7955 cv
180.399 38.0695 180.532 38.4475 180.532 38.9295 cv
180.532 39.3205 180.473 39.6275 180.356 39.8525 cv
180.239 40.0765 180.068 40.2505 179.844 40.3735 cv
179.62 40.4975 179.375 40.5595 179.11 40.5595 cv
178.685 40.5595 178.341 40.4235 178.079 40.1505 cv
177.817 39.8785 177.686 39.4855 177.686 38.9725 cv
cp
178.215 38.9725 mo
178.215 39.3615 178.3 39.6525 178.47 39.8465 cv
178.639 40.0395 178.853 40.1365 179.11 40.1365 cv
179.366 40.1365 179.579 40.0395 179.748 39.8445 cv
179.918 39.6505 180.003 39.3535 180.003 38.9555 cv
180.003 38.5795 179.917 38.2955 179.747 38.1015 cv
179.576 37.9085 179.364 37.8115 179.11 37.8115 cv
178.853 37.8115 178.639 37.9075 178.47 38.1005 cv
178.3 38.2925 178.215 38.5835 178.215 38.9725 cv
f
180.996 40.7435 mo
181.497 40.8175 180.996 40.7435 181.497 40.8175 cv
181.518 40.9725 181.576 41.0845 181.671 41.1555 cv
181.799 41.2505 181.973 41.2985 182.194 41.2985 cv
182.433 41.2985 182.617 41.2505 182.746 41.1555 cv
182.876 41.0605 182.964 40.9265 183.01 40.7545 cv
183.036 40.6505 183.049 40.4295 183.047 40.0945 cv
182.822 40.3595 182.541 40.4915 182.206 40.4915 cv
181.788 40.4915 181.465 40.3415 181.236 40.0395 cv
181.007 39.7385 180.893 39.3775 180.893 38.9555 cv
180.893 38.6665 180.945 38.3985 181.05 38.1535 cv
181.155 37.9085 181.307 37.7195 181.507 37.5855 cv
181.706 37.4525 181.94 37.3855 182.209 37.3855 cv
182.567 37.3855 182.863 37.5305 183.095 37.8205 cv
183.095 37.4545 183.095 37.8205 183.095 37.4545 cv
183.57 37.4545 183.095 37.4545 183.57 37.4545 cv
183.57 40.0795 183.57 37.4545 183.57 40.0795 cv
183.57 40.5525 183.522 40.8875 183.426 41.0855 cv
183.329 41.2825 183.177 41.4385 182.968 41.5525 cv
182.759 41.6675 182.502 41.7245 182.197 41.7245 cv
181.835 41.7245 181.542 41.6435 181.319 41.4805 cv
181.096 41.3165 180.988 41.0715 180.996 40.7435 cv
cp
181.422 38.9185 mo
181.422 39.3175 181.501 39.6085 181.66 39.7915 cv
181.818 39.9745 182.016 40.0655 182.254 40.0655 cv
182.491 40.0655 182.689 39.9745 182.849 39.7925 cv
183.01 39.6105 183.09 39.3245 183.09 38.9355 cv
183.09 38.5645 183.007 38.2835 182.842 38.0955 cv
182.677 37.9065 182.479 37.8115 182.246 37.8115 cv
182.017 37.8115 181.823 37.9045 181.662 38.0905 cv
181.502 38.2765 181.422 38.5525 181.422 38.9185 cv
f
184.291 40.4915 mo
184.291 36.2985 184.291 40.4915 184.291 36.2985 cv
184.806 36.2985 184.291 36.2985 184.806 36.2985 cv
184.806 40.4915 184.806 36.2985 184.806 40.4915 cv
184.291 40.4915 184.806 40.4915 184.291 40.4915 cv
f
187.705 39.5135 mo
188.237 39.5795 187.705 39.5135 188.237 39.5795 cv
188.153 39.8905 187.998 40.1315 187.771 40.3025 cv
187.544 40.4745 187.254 40.5605 186.901 40.5605 cv
186.457 40.5605 186.105 40.4235 185.844 40.1495 cv
185.584 39.8765 185.454 39.4925 185.454 38.9985 cv
185.454 38.4875 185.586 38.0915 185.849 37.8085 cv
186.112 37.5265 186.453 37.3855 186.873 37.3855 cv
187.279 37.3855 187.611 37.5235 187.868 37.8005 cv
188.125 38.0765 188.254 38.4655 188.254 38.9675 cv
188.254 38.9975 188.253 39.0435 188.251 39.1045 cv
185.986 39.1045 188.251 39.1045 185.986 39.1045 cv
186.005 39.4385 186.099 39.6935 186.269 39.8715 cv
186.439 40.0485 186.651 40.1375 186.904 40.1375 cv
187.093 40.1375 187.254 40.0875 187.388 39.9885 cv
187.521 39.8895 187.627 39.7305 187.705 39.5135 cv
cp
186.015 38.6815 mo
187.711 38.6815 186.015 38.6815 187.711 38.6815 cv
187.688 38.4255 187.623 38.2345 187.516 38.1065 cv
187.352 37.9085 187.14 37.8085 186.878 37.8085 cv
186.642 37.8085 186.443 37.8875 186.282 38.0465 cv
186.121 38.2045 186.032 38.4165 186.015 38.6815 cv
f
193.502 39.0215 mo
194.057 39.1615 193.502 39.0215 194.057 39.1615 cv
193.941 39.6175 193.731 39.9645 193.429 40.2045 cv
193.127 40.4435 192.757 40.5635 192.321 40.5635 cv
191.869 40.5635 191.501 40.4715 191.218 40.2875 cv
190.935 40.1035 190.719 39.8365 190.572 39.4875 cv
190.424 39.1385 190.35 38.7645 190.35 38.3635 cv
190.35 37.9275 190.433 37.5465 190.6 37.2215 cv
190.767 36.8955 191.005 36.6485 191.313 36.4805 cv
191.62 36.3115 191.959 36.2275 192.329 36.2275 cv
192.749 36.2275 193.102 36.3335 193.388 36.5475 cv
193.674 36.7615 193.873 37.0615 193.985 37.4485 cv
193.439 37.5775 193.985 37.4485 193.439 37.5775 cv
193.342 37.2725 193.201 37.0495 193.016 36.9105 cv
192.831 36.7715 192.598 36.7015 192.318 36.7015 cv
191.996 36.7015 191.726 36.7795 191.51 36.9335 cv
191.293 37.0885 191.141 37.2955 191.054 37.5555 cv
190.966 37.8155 190.922 38.0845 190.922 38.3605 cv
190.922 38.7175 190.974 39.0285 191.078 39.2945 cv
191.182 39.5605 191.343 39.7595 191.563 39.8915 cv
191.782 40.0225 192.019 40.0885 192.275 40.0885 cv
192.586 40.0885 192.849 39.9985 193.064 39.8195 cv
193.28 39.6405 193.426 39.3745 193.502 39.0215 cv
f
194.696 40.4915 mo
194.696 36.2985 194.696 40.4915 194.696 36.2985 cv
195.211 36.2985 194.696 36.2985 195.211 36.2985 cv
195.211 37.8025 195.211 36.2985 195.211 37.8025 cv
195.451 37.5245 195.754 37.3855 196.12 37.3855 cv
196.345 37.3855 196.541 37.4295 196.707 37.5185 cv
196.873 37.6075 196.991 37.7295 197.063 37.8855 cv
197.134 38.0425 197.17 38.2695 197.17 38.5665 cv
197.17 40.4915 197.17 38.5665 197.17 40.4915 cv
196.655 40.4915 197.17 40.4915 196.655 40.4915 cv
196.655 38.5665 196.655 40.4915 196.655 38.5665 cv
196.655 38.3095 196.599 38.1215 196.488 38.0045 cv
196.376 37.8875 196.219 37.8285 196.015 37.8285 cv
195.862 37.8285 195.719 37.8685 195.584 37.9475 cv
195.45 38.0265 195.354 38.1335 195.297 38.2695 cv
195.239 38.4045 195.211 38.5915 195.211 38.8295 cv
195.211 40.4915 195.211 38.8295 195.211 40.4915 cv
194.696 40.4915 195.211 40.4915 194.696 40.4915 cv
f
197.902 40.4915 mo
197.902 37.4535 197.902 40.4915 197.902 37.4535 cv
198.365 37.4535 197.902 37.4535 198.365 37.4535 cv
198.365 37.9145 198.365 37.4535 198.365 37.9145 cv
198.484 37.6995 198.593 37.5565 198.693 37.4885 cv
198.793 37.4195 198.903 37.3855 199.023 37.3855 cv
199.197 37.3855 199.373 37.4405 199.552 37.5515 cv
199.375 38.0285 199.552 37.5515 199.375 38.0285 cv
199.249 37.9545 199.123 37.9175 198.997 37.9175 cv
198.885 37.9175 198.784 37.9515 198.694 38.0185 cv
198.605 38.0865 198.541 38.1805 198.503 38.3005 cv
198.445 38.4835 198.417 38.6835 198.417 38.9015 cv
198.417 40.4915 198.417 38.9015 198.417 40.4915 cv
197.902 40.4915 198.417 40.4915 197.902 40.4915 cv
f
199.7 38.9725 mo
199.7 38.4095 199.856 37.9935 200.169 37.7225 cv
200.43 37.4975 200.749 37.3855 201.124 37.3855 cv
201.542 37.3855 201.883 37.5215 202.148 37.7955 cv
202.413 38.0695 202.546 38.4475 202.546 38.9295 cv
202.546 39.3205 202.487 39.6275 202.37 39.8525 cv
202.253 40.0765 202.082 40.2505 201.858 40.3735 cv
201.634 40.4975 201.389 40.5595 201.124 40.5595 cv
200.699 40.5595 200.355 40.4235 200.093 40.1505 cv
199.831 39.8785 199.7 39.4855 199.7 38.9725 cv
cp
200.229 38.9725 mo
200.229 39.3615 200.314 39.6525 200.484 39.8465 cv
200.653 40.0395 200.867 40.1365 201.124 40.1365 cv
201.38 40.1365 201.593 40.0395 201.762 39.8445 cv
201.932 39.6505 202.017 39.3535 202.017 38.9555 cv
202.017 38.5795 201.931 38.2955 201.761 38.1015 cv
201.59 37.9085 201.378 37.8115 201.124 37.8115 cv
200.867 37.8115 200.653 37.9075 200.484 38.1005 cv
200.314 38.2925 200.229 38.5835 200.229 38.9725 cv
f
203.104 40.4915 mo
203.104 37.4535 203.104 40.4915 203.104 37.4535 cv
203.564 37.4535 203.104 37.4535 203.564 37.4535 cv
203.564 37.8805 203.564 37.4535 203.564 37.8805 cv
203.66 37.7315 203.787 37.6115 203.945 37.5215 cv
204.103 37.4305 204.283 37.3855 204.485 37.3855 cv
204.711 37.3855 204.895 37.4325 205.039 37.5255 cv
205.183 37.6185 205.284 37.7495 205.344 37.9175 cv
205.584 37.5625 205.897 37.3855 206.282 37.3855 cv
206.583 37.3855 206.815 37.4685 206.977 37.6355 cv
207.139 37.8025 207.22 38.0595 207.22 38.4065 cv
207.22 40.4915 207.22 38.4065 207.22 40.4915 cv
206.708 40.4915 207.22 40.4915 206.708 40.4915 cv
206.708 38.5785 206.708 40.4915 206.708 38.5785 cv
206.708 38.3725 206.691 38.2235 206.658 38.1335 cv
206.624 38.0425 206.564 37.9695 206.476 37.9145 cv
206.388 37.8595 206.286 37.8315 206.167 37.8315 cv
205.954 37.8315 205.776 37.9025 205.635 38.0445 cv
205.494 38.1865 205.424 38.4145 205.424 38.7265 cv
205.424 40.4915 205.424 38.7265 205.424 40.4915 cv
204.909 40.4915 205.424 40.4915 204.909 40.4915 cv
204.909 38.5175 204.909 40.4915 204.909 38.5175 cv
204.909 38.2895 204.867 38.1175 204.783 38.0035 cv
204.699 37.8885 204.562 37.8315 204.371 37.8315 cv
204.226 37.8315 204.092 37.8695 203.969 37.9455 cv
203.846 38.0225 203.757 38.1335 203.702 38.2805 cv
203.646 38.4275 203.619 38.6395 203.619 38.9155 cv
203.619 40.4915 203.619 38.9155 203.619 40.4915 cv
203.104 40.4915 203.619 40.4915 203.104 40.4915 cv
f
210.097 39.5135 mo
210.629 39.5795 210.097 39.5135 210.629 39.5795 cv
210.545 39.8905 210.39 40.1315 210.163 40.3025 cv
209.936 40.4745 209.646 40.5605 209.293 40.5605 cv
208.849 40.5605 208.497 40.4235 208.236 40.1495 cv
207.976 39.8765 207.846 39.4925 207.846 38.9985 cv
207.846 38.4875 207.978 38.0915 208.241 37.8085 cv
208.504 37.5265 208.845 37.3855 209.265 37.3855 cv
209.671 37.3855 210.003 37.5235 210.26 37.8005 cv
210.517 38.0765 210.646 38.4655 210.646 38.9675 cv
210.646 38.9975 210.645 39.0435 210.643 39.1045 cv
208.378 39.1045 210.643 39.1045 208.378 39.1045 cv
208.397 39.4385 208.491 39.6935 208.661 39.8715 cv
208.831 40.0485 209.043 40.1375 209.296 40.1375 cv
209.485 40.1375 209.646 40.0875 209.78 39.9885 cv
209.913 39.8895 210.019 39.7305 210.097 39.5135 cv
cp
208.407 38.6815 mo
210.103 38.6815 208.407 38.6815 210.103 38.6815 cv
210.08 38.4255 210.015 38.2345 209.908 38.1065 cv
209.744 37.9085 209.532 37.8085 209.27 37.8085 cv
209.034 37.8085 208.835 37.8875 208.674 38.0465 cv
208.513 38.2045 208.424 38.4165 208.407 38.6815 cv
f
114.461 197.515 mo
116.928 191.09 114.461 197.515 116.928 191.09 cv
117.844 191.09 116.928 191.09 117.844 191.09 cv
120.474 197.515 117.844 191.09 120.474 197.515 cv
119.505 197.515 120.474 197.515 119.505 197.515 cv
118.756 195.569 119.505 197.515 118.756 195.569 cv
116.069 195.569 118.756 195.569 116.069 195.569 cv
115.364 197.515 116.069 195.569 115.364 197.515 cv
114.461 197.515 115.364 197.515 114.461 197.515 cv
cp
116.315 194.877 mo
118.493 194.877 116.315 194.877 118.493 194.877 cv
117.822 193.097 118.493 194.877 117.822 193.097 cv
117.618 192.557 117.466 192.113 117.367 191.765 cv
117.285 192.177 117.169 192.586 117.02 192.992 cv
116.315 194.877 117.02 192.992 116.315 194.877 cv
f
121.018 199.298 mo
121.018 192.86 121.018 199.298 121.018 192.86 cv
121.737 192.86 121.018 192.86 121.737 192.86 cv
121.737 193.465 121.737 192.86 121.737 193.465 cv
121.906 193.228 122.098 193.051 122.311 192.932 cv
122.524 192.814 122.783 192.755 123.087 192.755 cv
123.484 192.755 123.835 192.857 124.138 193.062 cv
124.442 193.266 124.672 193.555 124.826 193.927 cv
124.981 194.3 125.059 194.708 125.059 195.152 cv
125.059 195.628 124.973 196.057 124.802 196.438 cv
124.631 196.82 124.383 197.112 124.057 197.315 cv
123.732 197.518 123.389 197.62 123.03 197.62 cv
122.767 197.62 122.531 197.564 122.322 197.453 cv
122.113 197.342 121.941 197.202 121.807 197.032 cv
121.807 199.298 121.807 197.032 121.807 199.298 cv
121.018 199.298 121.807 199.298 121.018 199.298 cv
cp
121.732 195.213 mo
121.732 195.812 121.854 196.255 122.096 196.541 cv
122.339 196.828 122.632 196.971 122.977 196.971 cv
123.328 196.971 123.628 196.823 123.878 196.526 cv
124.127 196.229 124.252 195.77 124.252 195.148 cv
124.252 194.555 124.13 194.111 123.886 193.815 cv
123.642 193.52 123.351 193.373 123.012 193.373 cv
122.676 193.373 122.379 193.53 122.12 193.844 cv
121.862 194.158 121.732 194.615 121.732 195.213 cv
f
125.931 199.298 mo
125.931 192.86 125.931 199.298 125.931 192.86 cv
126.65 192.86 125.931 192.86 126.65 192.86 cv
126.65 193.465 126.65 192.86 126.65 193.465 cv
126.819 193.228 127.011 193.051 127.224 192.932 cv
127.437 192.814 127.696 192.755 128 192.755 cv
128.397 192.755 128.748 192.857 129.051 193.062 cv
129.355 193.266 129.585 193.555 129.739 193.927 cv
129.894 194.3 129.972 194.708 129.972 195.152 cv
129.972 195.628 129.886 196.057 129.715 196.438 cv
129.544 196.82 129.296 197.112 128.97 197.315 cv
128.645 197.518 128.302 197.62 127.943 197.62 cv
127.68 197.62 127.444 197.564 127.235 197.453 cv
127.026 197.342 126.854 197.202 126.72 197.032 cv
126.72 199.298 126.72 197.032 126.72 199.298 cv
125.931 199.298 126.72 199.298 125.931 199.298 cv
cp
126.645 195.213 mo
126.645 195.812 126.767 196.255 127.009 196.541 cv
127.252 196.828 127.545 196.971 127.89 196.971 cv
128.241 196.971 128.541 196.823 128.791 196.526 cv
129.04 196.229 129.165 195.77 129.165 195.148 cv
129.165 194.555 129.043 194.111 128.799 193.815 cv
128.555 193.52 128.264 193.373 127.925 193.373 cv
127.589 193.373 127.292 193.53 127.033 193.844 cv
126.775 194.158 126.645 194.615 126.645 195.213 cv
f
134.593 197.515 mo
132.822 192.861 134.593 197.515 132.822 192.861 cv
133.655 192.861 132.822 192.861 133.655 192.861 cv
134.654 195.648 133.655 192.861 134.654 195.648 cv
134.762 195.949 134.862 196.262 134.952 196.586 cv
135.022 196.341 135.12 196.045 135.246 195.701 cv
136.28 192.861 135.246 195.701 136.28 192.861 cv
137.091 192.861 136.28 192.861 137.091 192.861 cv
135.329 197.515 137.091 192.861 135.329 197.515 cv
134.593 197.515 135.329 197.515 134.593 197.515 cv
f
140.927 196.016 mo
141.742 196.117 140.927 196.016 141.742 196.117 cv
141.614 196.593 141.375 196.963 141.028 197.226 cv
140.68 197.489 140.236 197.62 139.695 197.62 cv
139.015 197.62 138.475 197.41 138.076 196.991 cv
137.677 196.572 137.478 195.984 137.478 195.227 cv
137.478 194.444 137.679 193.836 138.083 193.404 cv
138.486 192.972 139.009 192.755 139.652 192.755 cv
140.274 192.755 140.782 192.967 141.177 193.391 cv
141.571 193.814 141.768 194.411 141.768 195.179 cv
141.768 195.226 141.767 195.296 141.764 195.389 cv
138.293 195.389 141.764 195.389 138.293 195.389 cv
138.322 195.901 138.467 196.292 138.727 196.564 cv
138.987 196.836 139.311 196.971 139.7 196.971 cv
139.989 196.971 140.236 196.895 140.441 196.743 cv
140.645 196.592 140.807 196.349 140.927 196.016 cv
cp
138.337 194.741 mo
140.936 194.741 138.337 194.741 140.936 194.741 cv
140.901 194.349 140.801 194.056 140.638 193.86 cv
140.386 193.556 140.061 193.404 139.66 193.404 cv
139.298 193.404 138.994 193.525 138.747 193.768 cv
138.5 194.01 138.363 194.335 138.337 194.741 cv
f
142.645 197.515 mo
142.645 192.861 142.645 197.515 142.645 192.861 cv
143.355 192.861 142.645 192.861 143.355 192.861 cv
143.355 193.566 143.355 192.861 143.355 193.566 cv
143.536 193.236 143.703 193.019 143.857 192.913 cv
144.01 192.808 144.179 192.756 144.363 192.756 cv
144.629 192.756 144.899 192.84 145.174 193.01 cv
144.902 193.742 145.174 193.01 144.902 193.742 cv
144.709 193.628 144.516 193.571 144.324 193.571 cv
144.151 193.571 143.996 193.623 143.859 193.726 cv
143.722 193.83 143.624 193.974 143.565 194.158 cv
143.478 194.438 143.434 194.745 143.434 195.078 cv
143.434 197.515 143.434 195.078 143.434 197.515 cv
142.645 197.515 143.434 197.515 142.645 197.515 cv
f
145.267 196.125 mo
146.047 196.002 145.267 196.125 146.047 196.002 cv
146.091 196.315 146.213 196.555 146.413 196.721 cv
146.613 196.888 146.893 196.971 147.252 196.971 cv
147.615 196.971 147.883 196.897 148.059 196.749 cv
148.234 196.602 148.322 196.429 148.322 196.23 cv
148.322 196.052 148.244 195.912 148.089 195.809 cv
147.981 195.739 147.712 195.65 147.283 195.542 cv
146.704 195.396 146.303 195.27 146.08 195.163 cv
145.856 195.056 145.687 194.909 145.572 194.72 cv
145.456 194.532 145.398 194.324 145.398 194.096 cv
145.398 193.888 145.446 193.696 145.541 193.52 cv
145.636 193.343 145.765 193.196 145.929 193.079 cv
146.051 192.989 146.219 192.912 146.431 192.849 cv
146.642 192.786 146.87 192.755 147.112 192.755 cv
147.477 192.755 147.798 192.807 148.074 192.913 cv
148.35 193.018 148.554 193.16 148.685 193.34 cv
148.817 193.52 148.908 193.76 148.957 194.061 cv
148.186 194.166 148.957 194.061 148.186 194.166 cv
148.151 193.926 148.049 193.739 147.881 193.605 cv
147.713 193.471 147.476 193.403 147.169 193.403 cv
146.807 193.403 146.548 193.463 146.393 193.583 cv
146.238 193.703 146.161 193.843 146.161 194.004 cv
146.161 194.106 146.193 194.198 146.257 194.28 cv
146.322 194.365 146.423 194.435 146.56 194.49 cv
146.639 194.52 146.871 194.587 147.257 194.692 cv
147.815 194.841 148.204 194.963 148.425 195.058 cv
148.645 195.153 148.818 195.291 148.944 195.472 cv
149.07 195.653 149.132 195.878 149.132 196.147 cv
149.132 196.41 149.056 196.657 148.902 196.89 cv
148.749 197.122 148.528 197.302 148.238 197.429 cv
147.949 197.556 147.622 197.619 147.257 197.619 cv
146.652 197.619 146.191 197.494 145.874 197.243 cv
145.557 196.991 145.355 196.619 145.267 196.125 cv
f
150.028 191.997 mo
150.028 191.09 150.028 191.997 150.028 191.09 cv
150.817 191.09 150.028 191.09 150.817 191.09 cv
150.817 191.997 150.817 191.09 150.817 191.997 cv
150.028 191.997 150.817 191.997 150.028 191.997 cv
cp
150.028 197.515 mo
150.028 192.86 150.028 197.515 150.028 192.86 cv
150.817 192.86 150.028 192.86 150.817 192.86 cv
150.817 197.515 150.817 192.86 150.817 197.515 cv
150.028 197.515 150.817 197.515 150.028 197.515 cv
f
151.714 195.187 mo
151.714 194.325 151.954 193.687 152.433 193.272 cv
152.833 192.927 153.321 192.755 153.897 192.755 cv
154.536 192.755 155.059 192.964 155.465 193.384 cv
155.872 193.803 156.075 194.382 156.075 195.121 cv
156.075 195.72 155.985 196.191 155.805 196.535 cv
155.625 196.878 155.364 197.145 155.021 197.334 cv
154.677 197.524 154.303 197.619 153.897 197.619 cv
153.245 197.619 152.718 197.41 152.317 196.993 cv
151.915 196.575 151.714 195.973 151.714 195.187 cv
cp
152.525 195.187 mo
152.525 195.783 152.655 196.229 152.915 196.526 cv
153.175 196.822 153.502 196.971 153.897 196.971 cv
154.288 196.971 154.614 196.822 154.874 196.524 cv
155.134 196.226 155.264 195.771 155.264 195.161 cv
155.264 194.585 155.133 194.149 154.872 193.852 cv
154.61 193.556 154.285 193.408 153.897 193.408 cv
153.502 193.408 153.175 193.555 152.915 193.85 cv
152.655 194.145 152.525 194.591 152.525 195.187 cv
f
156.92 197.515 mo
156.92 192.861 156.92 197.515 156.92 192.861 cv
157.63 192.861 156.92 192.861 157.63 192.861 cv
157.63 193.523 157.63 192.861 157.63 193.523 cv
157.972 193.011 158.466 192.756 159.111 192.756 cv
159.392 192.756 159.65 192.806 159.885 192.907 cv
160.12 193.008 160.296 193.14 160.413 193.303 cv
160.53 193.467 160.612 193.661 160.658 193.886 cv
160.688 194.032 160.702 194.288 160.702 194.653 cv
160.702 197.515 160.702 194.653 160.702 197.515 cv
159.913 197.515 160.702 197.515 159.913 197.515 cv
159.913 194.684 159.913 197.515 159.913 194.684 cv
159.913 194.363 159.883 194.122 159.821 193.963 cv
159.76 193.804 159.651 193.677 159.495 193.582 cv
159.338 193.487 159.155 193.439 158.945 193.439 cv
158.609 193.439 158.319 193.546 158.075 193.759 cv
157.831 193.972 157.709 194.377 157.709 194.973 cv
157.709 197.515 157.709 194.973 157.709 197.515 cv
156.92 197.515 157.709 197.515 156.92 197.515 cv
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
