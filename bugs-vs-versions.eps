%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ADPCF90.tmp.pdf
%%Creator: Adobe Acrobat 11.0.0
%%For: Think
%%CreationDate: 2018/3/8, 11:40:51
%%BoundingBox: 0 0 445 368
%%HiResBoundingBox: 0 0 444.6325 367.1595
%%CropBox: 0 0 444.6325 367.1595
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 951 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   dc:format="application/pdf"
   xmp:CreateDate="2018-03-08T11:39:51+08:00"
   xmp:CreatorTool="OriginLab Corporation"
   xmp:ModifyDate="2018-03-08T11:39:51+08:00"
   pdf:Producer="Acrobat Distiller 11.0 (Windows)"
   xmpMM:DocumentID="uuid:bb939280-cc8d-4134-b0e7-383294964ff4"
   xmpMM:InstanceID="uuid:9e7d5743-a2f7-4ef4-8186-c129506b4ef6">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">C:UsersAdministratorDesktopGraph13.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -367.159 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 367.159 li
444.632 367.159 li
444.632 0 li
cp
clp
101.99 335.589 mo
98.262 325.969 101.99 335.589 98.262 325.969 cv
99.641 325.969 98.262 325.969 99.641 325.969 cv
102.141 332.957 99.641 325.969 102.141 332.957 cv
102.342 333.517 102.511 334.042 102.646 334.533 cv
102.795 334.008 102.968 333.482 103.165 332.957 cv
105.763 325.969 103.165 332.957 105.763 325.969 cv
107.063 325.969 105.763 325.969 107.063 325.969 cv
103.296 335.589 107.063 325.969 103.296 335.589 cv
101.99 335.589 103.296 335.589 101.99 335.589 cv
false sop
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
f
112.112 335.589 mo
110.931 335.589 112.112 335.589 110.931 335.589 cv
110.931 328.061 110.931 335.589 110.931 328.061 cv
110.646 328.332 110.273 328.604 109.812 328.875 cv
109.35 329.146 108.936 329.35 108.568 329.486 cv
108.568 328.344 108.568 329.486 108.568 328.344 cv
109.229 328.034 109.806 327.656 110.301 327.215 cv
110.795 326.773 111.145 326.344 111.351 325.928 cv
112.112 325.928 111.351 325.928 112.112 325.928 cv
112.112 335.589 112.112 325.928 112.112 335.589 cv
f
176.87 335.589 mo
173.142 325.969 176.87 335.589 173.142 325.969 cv
174.521 325.969 173.142 325.969 174.521 325.969 cv
177.021 332.957 174.521 325.969 177.021 332.957 cv
177.222 333.517 177.391 334.042 177.526 334.533 cv
177.675 334.008 177.848 333.482 178.045 332.957 cv
180.643 325.969 178.045 332.957 180.643 325.969 cv
181.943 325.969 180.643 325.969 181.943 325.969 cv
178.176 335.589 181.943 325.969 178.176 335.589 cv
176.87 335.589 178.176 335.589 176.87 335.589 cv
f
188.751 334.453 mo
188.751 335.589 188.751 334.453 188.751 335.589 cv
182.392 335.589 188.751 335.589 182.392 335.589 cv
182.383 335.305 182.429 335.03 182.53 334.768 cv
182.692 334.335 182.951 333.908 183.307 333.488 cv
183.664 333.068 184.179 332.583 184.853 332.033 cv
185.898 331.174 186.605 330.495 186.973 329.994 cv
187.34 329.493 187.524 329.02 187.524 328.573 cv
187.524 328.105 187.356 327.71 187.022 327.389 cv
186.687 327.068 186.251 326.906 185.713 326.906 cv
185.144 326.906 184.689 327.077 184.348 327.418 cv
184.006 327.76 183.833 328.232 183.829 328.836 cv
182.615 328.711 183.829 328.836 182.615 328.711 cv
182.698 327.805 183.011 327.115 183.553 326.641 cv
184.096 326.167 184.824 325.93 185.739 325.93 cv
186.662 325.93 187.393 326.185 187.931 326.697 cv
188.469 327.208 188.738 327.844 188.738 328.599 cv
188.738 328.986 188.659 329.363 188.502 329.736 cv
188.344 330.107 188.083 330.499 187.717 330.909 cv
187.352 331.322 186.745 331.885 185.896 332.602 cv
185.188 333.197 184.733 333.602 184.531 333.813 cv
184.33 334.025 184.164 334.24 184.033 334.453 cv
188.751 334.453 184.033 334.453 188.751 334.453 cv
f
251.751 335.589 mo
248.023 325.969 251.751 335.589 248.023 325.969 cv
249.402 325.969 248.023 325.969 249.402 325.969 cv
251.902 332.957 249.402 325.969 251.902 332.957 cv
252.103 333.517 252.272 334.042 252.407 334.533 cv
252.556 334.008 252.729 333.482 252.926 332.957 cv
255.524 325.969 252.926 332.957 255.524 325.969 cv
256.824 325.969 255.524 325.969 256.824 325.969 cv
253.057 335.589 256.824 325.969 253.057 335.589 cv
251.751 335.589 253.057 335.589 251.751 335.589 cv
f
257.431 333.049 mo
258.612 332.891 257.431 333.049 258.612 332.891 cv
258.748 333.561 258.979 334.043 259.305 334.339 cv
259.631 334.634 260.028 334.781 260.496 334.781 cv
261.051 334.781 261.521 334.589 261.903 334.204 cv
262.286 333.819 262.478 333.342 262.478 332.773 cv
262.478 332.232 262.3 331.784 261.946 331.431 cv
261.592 331.079 261.141 330.904 260.594 330.904 cv
260.371 330.904 260.093 330.947 259.761 331.034 cv
259.892 329.999 259.761 331.034 259.892 329.999 cv
259.971 330.007 260.034 330.012 260.082 330.012 cv
260.585 330.012 261.038 329.879 261.441 329.617 cv
261.843 329.354 262.044 328.951 262.044 328.404 cv
262.044 327.97 261.898 327.611 261.605 327.327 cv
261.312 327.042 260.933 326.9 260.469 326.9 cv
260.01 326.9 259.627 327.046 259.321 327.333 cv
259.015 327.622 258.818 328.055 258.73 328.633 cv
257.549 328.423 258.73 328.633 257.549 328.423 cv
257.694 327.632 258.022 327.017 258.534 326.582 cv
259.045 326.147 259.682 325.93 260.443 325.93 cv
260.968 325.93 261.452 326.042 261.894 326.267 cv
262.335 326.492 262.673 326.801 262.907 327.189 cv
263.142 327.578 263.259 327.992 263.259 328.43 cv
263.259 328.845 263.147 329.223 262.924 329.564 cv
262.701 329.906 262.37 330.177 261.933 330.378 cv
262.502 330.509 262.944 330.783 263.259 331.195 cv
263.574 331.609 263.731 332.126 263.731 332.747 cv
263.731 333.587 263.425 334.299 262.812 334.883 cv
262.2 335.467 261.425 335.759 260.489 335.759 cv
259.645 335.759 258.944 335.508 258.386 335.005 cv
257.828 334.501 257.51 333.85 257.431 333.049 cv
f
326.457 335.589 mo
322.729 325.969 326.457 335.589 322.729 325.969 cv
324.108 325.969 322.729 325.969 324.108 325.969 cv
326.608 332.957 324.108 325.969 326.608 332.957 cv
326.809 333.517 326.978 334.042 327.113 334.533 cv
327.262 334.008 327.435 333.482 327.632 332.957 cv
330.23 325.969 327.632 332.957 330.23 325.969 cv
331.53 325.969 330.23 325.969 331.53 325.969 cv
327.763 335.589 331.53 325.969 327.763 335.589 cv
326.457 335.589 327.763 335.589 326.457 335.589 cv
f
335.917 335.589 mo
335.917 333.285 335.917 335.589 335.917 333.285 cv
331.743 333.285 335.917 333.285 331.743 333.285 cv
331.743 332.202 331.743 333.285 331.743 332.202 cv
336.134 325.969 331.743 332.202 336.134 325.969 cv
337.098 325.969 336.134 325.969 337.098 325.969 cv
337.098 332.202 337.098 325.969 337.098 332.202 cv
338.398 332.202 337.098 332.202 338.398 332.202 cv
338.398 333.285 338.398 332.202 338.398 333.285 cv
337.098 333.285 338.398 333.285 337.098 333.285 cv
337.098 335.589 337.098 333.285 337.098 335.589 cv
335.917 335.589 337.098 335.589 335.917 335.589 cv
cp
335.917 332.202 mo
335.917 327.865 335.917 332.202 335.917 327.865 cv
332.905 332.202 335.917 327.865 332.905 332.202 cv
335.917 332.202 332.905 332.202 335.917 332.202 cv
f
401.337 335.589 mo
397.609 325.969 401.337 335.589 397.609 325.969 cv
398.988 325.969 397.609 325.969 398.988 325.969 cv
401.488 332.957 398.988 325.969 401.488 332.957 cv
401.689 333.517 401.858 334.042 401.993 334.533 cv
402.142 334.008 402.315 333.482 402.512 332.957 cv
405.11 325.969 402.512 332.957 405.11 325.969 cv
406.41 325.969 405.11 325.969 406.41 325.969 cv
402.643 335.589 406.41 325.969 402.643 335.589 cv
401.337 335.589 402.643 335.589 401.337 335.589 cv
f
407.011 333.068 mo
408.251 332.964 407.011 333.068 408.251 332.964 cv
408.343 333.567 408.556 334.021 408.891 334.326 cv
409.226 334.629 409.629 334.781 410.102 334.781 cv
410.671 334.781 411.152 334.566 411.546 334.138 cv
411.939 333.71 412.136 333.141 412.136 332.431 cv
412.136 331.758 411.947 331.227 411.569 330.837 cv
411.19 330.448 410.695 330.253 410.082 330.253 cv
409.702 330.253 409.358 330.339 409.052 330.512 cv
408.746 330.685 408.505 330.909 408.33 331.185 cv
407.221 331.04 408.33 331.185 407.221 331.04 cv
408.153 326.099 407.221 331.04 408.153 326.099 cv
412.937 326.099 408.153 326.099 412.937 326.099 cv
412.937 327.228 412.937 326.099 412.937 327.228 cv
409.098 327.228 412.937 327.228 409.098 327.228 cv
408.579 329.813 409.098 327.228 408.579 329.813 cv
409.157 329.411 409.763 329.21 410.397 329.21 cv
411.237 329.21 411.946 329.5 412.524 330.082 cv
413.101 330.664 413.39 331.412 413.39 332.326 cv
413.39 333.197 413.136 333.949 412.629 334.585 cv
412.012 335.363 411.17 335.753 410.102 335.753 cv
409.227 335.753 408.513 335.507 407.959 335.017 cv
407.406 334.527 407.09 333.878 407.011 333.068 cv
f
34.528 305.885 mo
34.528 304.749 34.645 303.832 34.879 303.139 cv
35.113 302.445 35.461 301.91 35.923 301.534 cv
36.384 301.158 36.965 300.97 37.665 300.97 cv
38.181 300.97 38.634 301.074 39.023 301.283 cv
39.413 301.49 39.734 301.789 39.988 302.181 cv
40.242 302.572 40.441 303.049 40.585 303.611 cv
40.73 304.173 40.802 304.931 40.802 305.885 cv
40.802 307.014 40.686 307.925 40.454 308.618 cv
40.222 309.313 39.875 309.848 39.414 310.227 cv
38.952 310.604 38.369 310.794 37.665 310.794 cv
36.737 310.794 36.009 310.461 35.48 309.796 cv
34.845 308.995 34.528 307.693 34.528 305.885 cv
cp
35.742 305.885 mo
35.742 307.464 35.927 308.516 36.297 309.038 cv
36.666 309.561 37.122 309.822 37.665 309.822 cv
38.207 309.822 38.664 309.56 39.033 309.035 cv
39.403 308.51 39.588 307.46 39.588 305.885 cv
39.588 304.301 39.403 303.249 39.033 302.729 cv
38.664 302.208 38.203 301.948 37.652 301.948 cv
37.109 301.948 36.676 302.177 36.352 302.637 cv
35.946 303.223 35.742 304.306 35.742 305.885 cv
f
40.736 273.19 mo
40.736 274.326 40.736 273.19 40.736 274.326 cv
34.377 274.326 40.736 274.326 34.377 274.326 cv
34.368 274.042 34.414 273.768 34.515 273.505 cv
34.677 273.073 34.936 272.646 35.292 272.225 cv
35.649 271.806 36.164 271.32 36.838 270.77 cv
37.883 269.911 38.59 269.233 38.958 268.732 cv
39.325 268.23 39.509 267.757 39.509 267.311 cv
39.509 266.842 39.341 266.448 39.007 266.126 cv
38.672 265.805 38.236 265.643 37.698 265.643 cv
37.129 265.643 36.674 265.815 36.333 266.156 cv
35.991 266.497 35.818 266.97 35.814 267.574 cv
34.6 267.449 35.814 267.574 34.6 267.449 cv
34.683 266.543 34.996 265.853 35.538 265.379 cv
36.081 264.904 36.809 264.667 37.724 264.667 cv
38.647 264.667 39.378 264.923 39.916 265.434 cv
40.454 265.945 40.723 266.581 40.723 267.337 cv
40.723 267.723 40.644 268.1 40.487 268.473 cv
40.329 268.845 40.068 269.236 39.702 269.647 cv
39.337 270.059 38.73 270.622 37.881 271.34 cv
37.173 271.935 36.718 272.339 36.516 272.551 cv
36.315 272.763 36.149 272.977 36.018 273.19 cv
40.736 273.19 36.018 273.19 40.736 273.19 cv
f
38.314 238.197 mo
38.314 235.894 38.314 238.197 38.314 235.894 cv
34.14 235.894 38.314 235.894 34.14 235.894 cv
34.14 234.811 34.14 235.894 34.14 234.811 cv
38.531 228.577 34.14 234.811 38.531 228.577 cv
39.495 228.577 38.531 228.577 39.495 228.577 cv
39.495 234.811 39.495 228.577 39.495 234.811 cv
40.795 234.811 39.495 234.811 40.795 234.811 cv
40.795 235.894 40.795 234.811 40.795 235.894 cv
39.495 235.894 40.795 235.894 39.495 235.894 cv
39.495 238.197 39.495 235.894 39.495 238.197 cv
38.314 238.197 39.495 238.197 38.314 238.197 cv
cp
38.314 234.811 mo
38.314 230.473 38.314 234.811 38.314 230.473 cv
35.302 234.811 38.314 230.473 35.302 234.811 cv
38.314 234.811 35.302 234.811 38.314 234.811 cv
f
40.657 194.628 mo
39.482 194.721 40.657 194.628 39.482 194.721 cv
39.377 194.257 39.229 193.919 39.036 193.71 cv
38.717 193.372 38.323 193.204 37.855 193.204 cv
37.479 193.204 37.148 193.31 36.864 193.52 cv
36.492 193.79 36.199 194.187 35.984 194.708 cv
35.77 195.228 35.658 195.969 35.65 196.932 cv
35.934 196.499 36.282 196.178 36.693 195.967 cv
37.104 195.758 37.535 195.652 37.986 195.652 cv
38.774 195.652 39.444 195.943 39.997 196.521 cv
40.551 197.102 40.828 197.85 40.828 198.77 cv
40.828 199.372 40.697 199.935 40.437 200.452 cv
40.177 200.971 39.819 201.368 39.364 201.644 cv
38.909 201.919 38.393 202.057 37.815 202.057 cv
36.831 202.057 36.028 201.695 35.407 200.971 cv
34.786 200.247 34.475 199.053 34.475 197.391 cv
34.475 195.532 34.818 194.18 35.505 193.335 cv
36.105 192.6 36.912 192.234 37.927 192.234 cv
38.684 192.234 39.304 192.445 39.787 192.87 cv
40.271 193.294 40.561 193.881 40.657 194.628 cv
cp
35.834 198.775 mo
35.834 199.182 35.92 199.572 36.093 199.943 cv
36.266 200.316 36.507 200.598 36.818 200.794 cv
37.129 200.988 37.454 201.085 37.796 201.085 cv
38.294 201.085 38.723 200.885 39.082 200.482 cv
39.441 200.079 39.62 199.533 39.62 198.842 cv
39.62 198.176 39.443 197.652 39.089 197.27 cv
38.734 196.887 38.288 196.695 37.75 196.695 cv
37.216 196.695 36.763 196.887 36.391 197.27 cv
36.019 197.652 35.834 198.154 35.834 198.775 cv
f
36.345 160.546 mo
35.855 160.368 35.492 160.111 35.256 159.779 cv
35.019 159.447 34.901 159.049 34.901 158.585 cv
34.901 157.885 35.153 157.296 35.656 156.82 cv
36.159 156.342 36.828 156.104 37.664 156.104 cv
38.504 156.104 39.18 156.348 39.692 156.835 cv
40.204 157.324 40.46 157.917 40.46 158.618 cv
40.46 159.064 40.343 159.452 40.109 159.783 cv
39.875 160.113 39.519 160.368 39.042 160.546 cv
39.633 160.738 40.082 161.049 40.391 161.479 cv
40.699 161.908 40.853 162.419 40.853 163.014 cv
40.853 163.837 40.563 164.527 39.981 165.087 cv
39.399 165.648 38.633 165.928 37.684 165.928 cv
36.734 165.928 35.969 165.646 35.387 165.085 cv
34.805 164.523 34.514 163.822 34.514 162.982 cv
34.514 162.355 34.673 161.831 34.99 161.41 cv
35.307 160.988 35.759 160.7 36.345 160.546 cv
cp
36.109 158.546 mo
36.109 158.999 36.255 159.372 36.548 159.661 cv
36.842 159.95 37.222 160.094 37.69 160.094 cv
38.145 160.094 38.518 159.951 38.809 159.663 cv
39.1 159.378 39.246 159.027 39.246 158.611 cv
39.246 158.178 39.096 157.814 38.796 157.518 cv
38.496 157.223 38.123 157.076 37.677 157.076 cv
37.227 157.076 36.852 157.219 36.555 157.508 cv
36.258 157.796 36.109 158.143 36.109 158.546 cv
cp
35.728 162.988 mo
35.728 163.325 35.808 163.65 35.968 163.965 cv
36.127 164.281 36.365 164.525 36.68 164.697 cv
36.995 164.87 37.334 164.956 37.697 164.956 cv
38.261 164.956 38.727 164.775 39.095 164.411 cv
39.462 164.049 39.646 163.587 39.646 163.027 cv
39.646 162.458 39.457 161.988 39.078 161.617 cv
38.7 161.245 38.226 161.059 37.658 161.059 cv
37.102 161.059 36.641 161.243 36.276 161.609 cv
35.911 161.978 35.728 162.437 35.728 162.988 cv
f
31.646 129.46 mo
30.465 129.46 31.646 129.46 30.465 129.46 cv
30.465 121.933 30.465 129.46 30.465 121.933 cv
30.18 122.204 29.807 122.476 29.346 122.747 cv
28.884 123.018 28.47 123.222 28.102 123.357 cv
28.102 122.215 28.102 123.357 28.102 122.215 cv
28.763 121.905 29.34 121.528 29.835 121.087 cv
30.329 120.645 30.679 120.216 30.885 119.8 cv
31.646 119.8 30.885 119.8 31.646 119.8 cv
31.646 129.46 31.646 119.8 31.646 129.46 cv
f
34.528 124.715 mo
34.528 123.578 34.645 122.663 34.879 121.97 cv
35.113 121.276 35.461 120.741 35.923 120.365 cv
36.384 119.988 36.965 119.801 37.665 119.801 cv
38.181 119.801 38.634 119.905 39.023 120.112 cv
39.413 120.319 39.734 120.62 39.988 121.012 cv
40.242 121.402 40.441 121.879 40.585 122.441 cv
40.73 123.004 40.802 123.762 40.802 124.715 cv
40.802 125.845 40.686 126.755 40.454 127.448 cv
40.222 128.142 39.875 128.677 39.414 129.056 cv
38.952 129.435 38.369 129.625 37.665 129.625 cv
36.737 129.625 36.009 129.292 35.48 128.626 cv
34.845 127.827 34.528 126.522 34.528 124.715 cv
cp
35.742 124.715 mo
35.742 126.294 35.927 127.345 36.297 127.868 cv
36.666 128.392 37.122 128.652 37.665 128.652 cv
38.207 128.652 38.664 128.391 39.033 127.866 cv
39.403 127.34 39.588 126.29 39.588 124.715 cv
39.588 123.132 39.403 122.079 39.033 121.56 cv
38.664 121.039 38.203 120.779 37.652 120.779 cv
37.109 120.779 36.676 121.008 36.352 121.467 cv
35.946 122.053 35.742 123.137 35.742 124.715 cv
f
31.646 93.1555 mo
30.465 93.1555 31.646 93.1555 30.465 93.1555 cv
30.465 85.6285 30.465 93.1555 30.465 85.6285 cv
30.18 85.8995 29.807 86.1715 29.346 86.4425 cv
28.884 86.7135 28.47 86.9175 28.102 87.0525 cv
28.102 85.9105 28.102 87.0525 28.102 85.9105 cv
28.763 85.6005 29.34 85.2235 29.835 84.7825 cv
30.329 84.3405 30.679 83.9115 30.885 83.4955 cv
31.646 83.4955 30.885 83.4955 31.646 83.4955 cv
31.646 93.1555 31.646 83.4955 31.646 93.1555 cv
f
40.736 92.0205 mo
40.736 93.1555 40.736 92.0205 40.736 93.1555 cv
34.377 93.1555 40.736 93.1555 34.377 93.1555 cv
34.368 92.8715 34.414 92.5975 34.515 92.3355 cv
34.677 91.9025 34.936 91.4755 35.292 91.0555 cv
35.649 90.6355 36.164 90.1505 36.838 89.5995 cv
37.883 88.7415 38.59 88.0625 38.958 87.5615 cv
39.325 87.0605 39.509 86.5865 39.509 86.1405 cv
39.509 85.6725 39.341 85.2775 39.007 84.9565 cv
38.672 84.6345 38.236 84.4735 37.698 84.4735 cv
37.129 84.4735 36.674 84.6445 36.333 84.9855 cv
35.991 85.3275 35.818 85.7995 35.814 86.4035 cv
34.6 86.2785 35.814 86.4035 34.6 86.2785 cv
34.683 85.3725 34.996 84.6825 35.538 84.2085 cv
36.081 83.7335 36.809 83.4965 37.724 83.4965 cv
38.647 83.4965 39.378 83.7525 39.916 84.2635 cv
40.454 84.7755 40.723 85.4105 40.723 86.1665 cv
40.723 86.5515 40.644 86.9305 40.487 87.3025 cv
40.329 87.6745 40.068 88.0655 39.702 88.4765 cv
39.337 88.8885 38.73 89.4525 37.881 90.1695 cv
37.173 90.7645 36.718 91.1685 36.516 91.3805 cv
36.315 91.5925 36.149 91.8065 36.018 92.0205 cv
40.736 92.0205 36.018 92.0205 40.736 92.0205 cv
f
31.646 57.0265 mo
30.465 57.0265 31.646 57.0265 30.465 57.0265 cv
30.465 49.4995 30.465 57.0265 30.465 49.4995 cv
30.18 49.7705 29.807 50.0425 29.346 50.3135 cv
28.884 50.5845 28.47 50.7875 28.102 50.9235 cv
28.102 49.7815 28.102 50.9235 28.102 49.7815 cv
28.763 49.4715 29.34 49.0945 29.835 48.6535 cv
30.329 48.2115 30.679 47.7825 30.885 47.3665 cv
31.646 47.3665 30.885 47.3665 31.646 47.3665 cv
31.646 57.0265 31.646 47.3665 31.646 57.0265 cv
f
38.314 57.0265 mo
38.314 54.7235 38.314 57.0265 38.314 54.7235 cv
34.14 54.7235 38.314 54.7235 34.14 54.7235 cv
34.14 53.6405 34.14 54.7235 34.14 53.6405 cv
38.531 47.4065 34.14 53.6405 38.531 47.4065 cv
39.495 47.4065 38.531 47.4065 39.495 47.4065 cv
39.495 53.6405 39.495 47.4065 39.495 53.6405 cv
40.795 53.6405 39.495 53.6405 40.795 53.6405 cv
40.795 54.7235 40.795 53.6405 40.795 54.7235 cv
39.495 54.7235 40.795 54.7235 39.495 54.7235 cv
39.495 57.0265 39.495 54.7235 39.495 57.0265 cv
38.314 57.0265 39.495 57.0265 38.314 57.0265 cv
cp
38.314 53.6405 mo
38.314 49.3025 38.314 53.6405 38.314 49.3025 cv
35.302 53.6405 38.314 49.3025 35.302 53.6405 cv
38.314 53.6405 35.302 53.6405 38.314 53.6405 cv
f
31.646 20.7225 mo
30.465 20.7225 31.646 20.7225 30.465 20.7225 cv
30.465 13.1955 30.465 20.7225 30.465 13.1955 cv
30.18 13.4665 29.807 13.7385 29.346 14.0095 cv
28.884 14.2805 28.47 14.4845 28.102 14.6195 cv
28.102 13.4775 28.102 14.6195 28.102 13.4775 cv
28.763 13.1675 29.34 12.7905 29.835 12.3495 cv
30.329 11.9075 30.679 11.4785 30.885 11.0625 cv
31.646 11.0625 30.885 11.0625 31.646 11.0625 cv
31.646 20.7225 31.646 11.0625 31.646 20.7225 cv
f
40.657 13.4585 mo
39.482 13.5505 40.657 13.4585 39.482 13.5505 cv
39.377 13.0865 39.229 12.7495 39.036 12.5395 cv
38.717 12.2025 38.323 12.0345 37.855 12.0345 cv
37.479 12.0345 37.148 12.1395 36.864 12.3495 cv
36.492 12.6205 36.199 13.0165 35.984 13.5375 cv
35.77 14.0575 35.658 14.7995 35.65 15.7615 cv
35.934 15.3285 36.282 15.0075 36.693 14.7975 cv
37.104 14.5875 37.535 14.4825 37.986 14.4825 cv
38.774 14.4825 39.444 14.7725 39.997 15.3515 cv
40.551 15.9315 40.828 16.6805 40.828 17.5995 cv
40.828 18.2035 40.697 18.7645 40.437 19.2825 cv
40.177 19.8005 39.819 20.1975 39.364 20.4735 cv
38.909 20.7495 38.393 20.8865 37.815 20.8865 cv
36.831 20.8865 36.028 20.5245 35.407 19.8005 cv
34.786 19.0765 34.475 17.8835 34.475 16.2215 cv
34.475 14.3615 34.818 13.0105 35.505 12.1655 cv
36.105 11.4305 36.912 11.0635 37.927 11.0635 cv
38.684 11.0635 39.304 11.2755 39.787 11.6995 cv
40.271 12.1245 40.561 12.7105 40.657 13.4585 cv
cp
35.834 17.6055 mo
35.834 18.0125 35.92 18.4025 36.093 18.7735 cv
36.266 19.1455 36.507 19.4295 36.818 19.6235 cv
37.129 19.8185 37.454 19.9155 37.796 19.9155 cv
38.294 19.9155 38.723 19.7145 39.082 19.3125 cv
39.441 18.9095 39.62 18.3625 39.62 17.6715 cv
39.62 17.0065 39.443 16.4825 39.089 16.0995 cv
38.734 15.7175 38.288 15.5255 37.75 15.5255 cv
37.216 15.5255 36.763 15.7175 36.391 16.0995 cv
36.019 16.4825 35.834 16.9845 35.834 17.6055 cv
f
1.047 lw
1 lc
1 lj
10 ml
[] 0 dsh
false sadj
69.054 318.833 mo
69.054 316.04 li
@
106.407 321.451 mo
106.407 316.04 li
@
143.935 318.833 mo
143.935 316.04 li
@
181.288 321.451 mo
181.288 316.04 li
@
218.641 318.833 mo
218.641 316.04 li
@
256.169 321.451 mo
256.169 316.04 li
@
293.522 318.833 mo
293.522 316.04 li
@
330.875 321.451 mo
330.875 316.04 li
@
368.228 318.833 mo
368.228 316.04 li
@
405.756 321.451 mo
405.756 316.04 li
@
443.109 318.833 mo
443.109 316.04 li
@
50.3789 316.04 mo
443.109 316.04 li
@
44.9679 306.964 mo
50.3789 306.964 li
@
47.5859 288.812 mo
50.3789 288.812 li
@
44.9679 270.66 mo
50.3789 270.66 li
@
47.5859 252.683 mo
50.3789 252.683 li
@
44.9679 234.531 mo
50.3789 234.531 li
@
47.5859 216.379 mo
50.3789 216.379 li
@
44.9679 198.227 mo
50.3789 198.227 li
@
47.5859 180.075 mo
50.3789 180.075 li
@
44.9679 162.098 mo
50.3789 162.098 li
@
47.5859 143.946 mo
50.3789 143.946 li
@
44.9679 125.794 mo
50.3789 125.794 li
@
47.5859 107.642 mo
50.3789 107.642 li
@
44.9679 89.4904 mo
50.3789 89.4904 li
@
47.5859 71.3384 mo
50.3789 71.3384 li
@
44.9679 53.3615 mo
50.3789 53.3615 li
@
47.5859 35.2094 mo
50.3789 35.2094 li
@
44.9679 17.0574 mo
50.3789 17.0574 li
@
50.3789 316.04 mo
50.3789 12.5194 li
@
gsave
50.377 12.5195 mo
443.282 12.5195 li
443.282 316.216 li
50.377 316.216 li
cp
eclp
2.095 lw
181.287 180.076 mo
106.406 180.076 li
.878538 .2439 1 .131716 cmyk
@
256.168 180.076 mo
181.287 180.076 li
@
330.874 234.531 mo
256.168 180.076 li
@
405.755 306.964 mo
330.874 234.531 li
@
106.407 175.014 mo
107.454 178.505 li
111.12 178.505 li
108.152 180.599 li
109.374 184.09 li
106.407 181.996 li
103.265 184.09 li
104.487 180.599 li
101.52 178.505 li
105.185 178.505 li
cp
ef
.524 lw
106.407 175.014 mo
107.454 178.505 li
111.12 178.505 li
108.152 180.599 li
109.374 184.09 li
106.407 181.996 li
103.265 184.09 li
104.487 180.599 li
101.52 178.505 li
105.185 178.505 li
cp
@
181.287 175.014 mo
182.334 178.505 li
186 178.505 li
183.032 180.599 li
184.254 184.09 li
181.287 181.996 li
178.145 184.09 li
179.367 180.599 li
176.4 178.505 li
180.065 178.505 li
cp
ef
181.287 175.014 mo
182.334 178.505 li
186 178.505 li
183.032 180.599 li
184.254 184.09 li
181.287 181.996 li
178.145 184.09 li
179.367 180.599 li
176.4 178.505 li
180.065 178.505 li
cp
@
256.168 175.014 mo
257.215 178.505 li
260.881 178.505 li
257.913 180.599 li
259.135 184.09 li
256.168 181.996 li
253.026 184.09 li
254.248 180.599 li
251.281 178.505 li
254.946 178.505 li
cp
ef
256.168 175.014 mo
257.215 178.505 li
260.881 178.505 li
257.913 180.599 li
259.135 184.09 li
256.168 181.996 li
253.026 184.09 li
254.248 180.599 li
251.281 178.505 li
254.946 178.505 li
cp
@
330.874 229.469 mo
331.921 232.961 li
335.587 232.961 li
332.619 235.055 li
333.841 238.546 li
330.874 236.452 li
327.732 238.546 li
328.954 235.055 li
325.987 232.961 li
329.652 232.961 li
cp
ef
330.874 229.469 mo
331.921 232.961 li
335.587 232.961 li
332.619 235.055 li
333.841 238.546 li
330.874 236.452 li
327.732 238.546 li
328.954 235.055 li
325.987 232.961 li
329.652 232.961 li
cp
@
405.755 301.902 mo
406.802 305.393 li
410.468 305.393 li
407.5 307.487 li
408.722 310.978 li
405.755 308.884 li
402.613 310.978 li
403.835 307.487 li
400.868 305.393 li
404.533 305.393 li
cp
ef
405.755 301.902 mo
406.802 305.393 li
410.468 305.393 li
407.5 307.487 li
408.722 310.978 li
405.755 308.884 li
402.613 310.978 li
403.835 307.487 li
400.868 305.393 li
404.533 305.393 li
cp
@
2.095 lw
181.287 252.684 mo
106.406 252.684 li
0 .612726 1 .000701915 cmyk
@
256.168 288.813 mo
181.287 252.684 li
@
330.874 288.813 mo
256.168 288.813 li
@
405.755 306.964 mo
330.874 288.813 li
@
106.407 246.749 mo
111.469 255.65 li
101.171 255.65 li
cp
ef
.524 lw
106.407 246.749 mo
111.469 255.65 li
101.171 255.65 li
cp
@
181.287 246.749 mo
186.349 255.65 li
176.051 255.65 li
cp
ef
181.287 246.749 mo
186.349 255.65 li
176.051 255.65 li
cp
@
256.168 282.878 mo
261.23 291.779 li
250.932 291.779 li
cp
ef
256.168 282.878 mo
261.23 291.779 li
250.932 291.779 li
cp
@
330.874 282.878 mo
335.936 291.779 li
325.638 291.779 li
cp
ef
330.874 282.878 mo
335.936 291.779 li
325.638 291.779 li
cp
@
405.755 301.03 mo
410.817 309.931 li
400.519 309.931 li
cp
ef
405.755 301.03 mo
410.817 309.931 li
400.519 309.931 li
cp
@
2.095 lw
181.287 17.0575 mo
106.406 17.0575 li
1 .978881 .143709 .171023 cmyk
@
256.168 53.3615 mo
181.287 17.0575 li
@
330.874 234.532 mo
256.168 53.3615 li
@
405.755 234.532 mo
330.874 234.532 li
@
110.764 17.0645 mo
110.764 19.4735 108.809 21.4275 106.4 21.4275 cv
103.992 21.4275 102.037 19.4735 102.037 17.0645 cv
102.037 14.6555 103.992 12.7015 106.4 12.7015 cv
108.809 12.7015 110.764 14.6555 110.764 17.0645 cv
cp
ef
.524 lw
110.764 17.0645 mo
110.764 19.4735 108.809 21.4275 106.4 21.4275 cv
103.992 21.4275 102.037 19.4735 102.037 17.0645 cv
102.037 14.6555 103.992 12.7015 106.4 12.7015 cv
108.809 12.7015 110.764 14.6555 110.764 17.0645 cv
cp
@
185.644 17.0645 mo
185.644 19.4735 183.689 21.4275 181.28 21.4275 cv
178.872 21.4275 176.917 19.4735 176.917 17.0645 cv
176.917 14.6555 178.872 12.7015 181.28 12.7015 cv
183.689 12.7015 185.644 14.6555 185.644 17.0645 cv
cp
ef
185.644 17.0645 mo
185.644 19.4735 183.689 21.4275 181.28 21.4275 cv
178.872 21.4275 176.917 19.4735 176.917 17.0645 cv
176.917 14.6555 178.872 12.7015 181.28 12.7015 cv
183.689 12.7015 185.644 14.6555 185.644 17.0645 cv
cp
@
260.524 53.3645 mo
260.524 55.7735 258.569 57.7275 256.16 57.7275 cv
253.752 57.7275 251.797 55.7735 251.797 53.3645 cv
251.797 50.9555 253.752 49.0015 256.16 49.0015 cv
258.569 49.0015 260.524 50.9555 260.524 53.3645 cv
cp
ef
260.524 53.3645 mo
260.524 55.7735 258.569 57.7275 256.16 57.7275 cv
253.752 57.7275 251.797 55.7735 251.797 53.3645 cv
251.797 50.9555 253.752 49.0015 256.16 49.0015 cv
258.569 49.0015 260.524 50.9555 260.524 53.3645 cv
cp
@
335.224 234.505 mo
335.224 236.914 333.269 238.868 330.86 238.868 cv
328.452 238.868 326.497 236.914 326.497 234.505 cv
326.497 232.096 328.452 230.142 330.86 230.142 cv
333.269 230.142 335.224 232.096 335.224 234.505 cv
cp
ef
335.224 234.505 mo
335.224 236.914 333.269 238.868 330.86 238.868 cv
328.452 238.868 326.497 236.914 326.497 234.505 cv
326.497 232.096 328.452 230.142 330.86 230.142 cv
333.269 230.142 335.224 232.096 335.224 234.505 cv
cp
@
410.104 234.505 mo
410.104 236.914 408.149 238.868 405.74 238.868 cv
403.332 238.868 401.377 236.914 401.377 234.505 cv
401.377 232.096 403.332 230.142 405.74 230.142 cv
408.149 230.142 410.104 232.096 410.104 234.505 cv
cp
ef
410.104 234.505 mo
410.104 236.914 408.149 238.868 405.74 238.868 cv
403.332 238.868 401.377 236.914 401.377 234.505 cv
401.377 232.096 403.332 230.142 405.74 230.142 cv
408.149 230.142 410.104 232.096 410.104 234.505 cv
cp
@
2.095 lw
181.287 270.66 mo
106.406 270.66 li
.610498 1 .138643 .0341802 cmyk
@
256.168 270.66 mo
181.287 270.66 li
@
330.874 270.66 mo
256.168 270.66 li
@
405.755 306.964 mo
330.874 270.66 li
@
110.247 266.82 mo
102.567 266.82 li
102.567 274.5 li
110.247 274.5 li
cp
f
.524 lw
102.567 266.82 mo
110.247 266.82 li
110.247 274.5 li
102.567 274.5 li
cp
@
185.127 266.82 mo
177.447 266.82 li
177.447 274.5 li
185.127 274.5 li
cp
f
177.447 266.82 mo
185.127 266.82 li
185.127 274.5 li
177.447 274.5 li
cp
@
260.008 266.82 mo
252.328 266.82 li
252.328 274.5 li
260.008 274.5 li
cp
f
252.328 266.82 mo
260.008 266.82 li
260.008 274.5 li
252.328 274.5 li
cp
@
334.714 266.82 mo
327.034 266.82 li
327.034 274.5 li
334.714 274.5 li
cp
f
327.034 266.82 mo
334.714 266.82 li
334.714 274.5 li
327.034 274.5 li
cp
@
409.595 303.124 mo
401.915 303.124 li
401.915 310.804 li
409.595 310.804 li
cp
f
401.915 303.124 mo
409.595 303.124 li
409.595 310.804 li
401.915 310.804 li
cp
@
2.095 lw
181.287 89.4905 mo
106.406 71.3385 li
0 .990631 1 .000396735 cmyk
@
256.168 89.4905 mo
181.287 89.4905 li
@
330.874 216.38 mo
256.168 89.4905 li
@
405.755 216.38 mo
330.874 216.38 li
@
100.821 71.3385 mo
106.406 65.7535 li
111.992 71.3385 li
106.406 76.9235 li
cp
ef
.524 lw
100.821 71.3385 mo
106.406 65.7535 li
111.992 71.3385 li
106.406 76.9235 li
cp
@
175.702 89.4905 mo
181.288 83.9055 li
186.873 89.4905 li
181.288 95.0755 li
cp
ef
175.702 89.4905 mo
181.288 83.9055 li
186.873 89.4905 li
181.288 95.0755 li
cp
@
250.582 89.4905 mo
256.167 83.9055 li
261.753 89.4905 li
256.167 95.0755 li
cp
ef
250.582 89.4905 mo
256.167 83.9055 li
261.753 89.4905 li
256.167 95.0755 li
cp
@
325.288 216.38 mo
330.874 210.795 li
336.459 216.38 li
330.874 221.965 li
cp
ef
325.288 216.38 mo
330.874 210.795 li
336.459 216.38 li
330.874 221.965 li
cp
@
400.169 216.38 mo
405.754 210.795 li
411.34 216.38 li
405.754 221.965 li
cp
ef
400.169 216.38 mo
405.754 210.795 li
411.34 216.38 li
405.754 221.965 li
cp
@
grestore
12.533 187.079 mo
9.011 186.36 12.533 187.079 9.011 186.36 cv
9.011 187.757 9.011 186.36 9.011 187.757 cv
7.779 187.757 9.011 187.757 7.779 187.757 cv
7.779 186.112 7.779 187.757 7.779 186.112 cv
4.778 185.5 7.779 186.112 4.778 185.5 cv
4.778 187.757 4.778 185.5 4.778 187.757 cv
3.547 187.757 4.778 187.757 3.547 187.757 cv
3.547 185.252 3.547 187.757 3.547 185.252 cv
3.8147e-6 184.533 3.547 185.252 3.8147e-6 184.533 cv
3.8147e-6 183.293 3.8147e-6 184.533 3.8147e-6 183.293 cv
3.547 184.012 3.8147e-6 183.293 3.547 184.012 cv
3.547 181.408 3.547 184.012 3.547 181.408 cv
3.8147e-6 180.689 3.547 181.408 3.8147e-6 180.689 cv
3.8147e-6 179.441 3.8147e-6 180.689 3.8147e-6 179.441 cv
3.547 180.16 3.8147e-6 179.441 3.547 180.16 cv
3.547 178.73 3.547 180.16 3.547 178.73 cv
4.778 178.73 3.547 178.73 4.778 178.73 cv
4.778 180.408 4.778 178.73 4.778 180.408 cv
7.779 181.028 4.778 180.408 7.779 181.028 cv
7.779 178.73 7.779 181.028 7.779 178.73 cv
9.011 178.73 7.779 178.73 9.011 178.73 cv
9.011 181.276 9.011 178.73 9.011 181.276 cv
12.533 181.995 9.011 181.276 12.533 181.995 cv
12.533 183.235 12.533 181.995 12.533 183.235 cv
9.011 182.524 12.533 183.235 9.011 182.524 cv
9.011 185.12 9.011 182.524 9.011 185.12 cv
12.533 185.839 9.011 185.12 12.533 185.839 cv
12.533 187.079 12.533 185.839 12.533 187.079 cv
cp
7.779 184.872 mo
7.779 182.276 7.779 184.872 7.779 182.276 cv
4.778 181.656 7.779 182.276 4.778 181.656 cv
4.778 184.26 4.778 181.656 4.778 184.26 cv
7.779 184.872 4.778 184.26 7.779 184.872 cv
f
12.326 172.553 mo
.206001 172.553 12.326 172.553 .206001 172.553 cv
.206001 168.006 .206001 172.553 .206001 168.006 cv
.206001 167.08 .329002 166.338 .574001 165.778 cv
.820004 165.219 1.197 164.781 1.707 164.464 cv
2.217 164.147 2.75 163.989 3.307 163.989 cv
3.825 163.989 4.312 164.129 4.77 164.41 cv
5.227 164.691 5.597 165.116 5.878 165.683 cv
6.093 164.95 6.459 164.387 6.977 163.993 cv
7.495 163.599 8.107 163.402 8.812 163.402 cv
9.38 163.402 9.908 163.522 10.396 163.761 cv
10.883 164.001 11.26 164.297 11.524 164.65 cv
11.789 165.003 11.988 165.445 12.123 165.977 cv
12.258 166.509 12.326 167.16 12.326 167.932 cv
12.326 172.553 12.326 167.932 12.326 172.553 cv
cp
5.299 170.949 mo
5.299 168.329 5.299 170.949 5.299 168.329 cv
5.299 167.618 5.252 167.108 5.158 166.799 cv
5.037 166.392 4.836 166.084 4.555 165.878 cv
4.274 165.671 3.921 165.568 3.497 165.568 cv
3.094 165.568 2.74 165.664 2.434 165.857 cv
2.129 166.05 1.919 166.325 1.806 166.684 cv
1.693 167.042 1.637 167.656 1.637 168.527 cv
1.637 170.949 1.637 168.527 1.637 170.949 cv
5.299 170.949 1.637 170.949 5.299 170.949 cv
cp
10.896 170.949 mo
10.896 167.932 10.896 170.949 10.896 167.932 cv
10.896 167.414 10.877 167.05 10.838 166.841 cv
10.772 166.471 10.662 166.163 10.507 165.915 cv
10.353 165.667 10.128 165.463 9.833 165.303 cv
9.539 165.143 9.198 165.063 8.812 165.063 cv
8.361 165.063 7.968 165.179 7.634 165.411 cv
7.301 165.642 7.067 165.963 6.932 166.374 cv
6.797 166.784 6.729 167.375 6.729 168.147 cv
6.729 170.949 6.729 168.147 6.729 170.949 cv
10.896 170.949 6.729 170.949 10.896 170.949 cv
f
12.326 155.577 mo
11.036 155.577 12.326 155.577 11.036 155.577 cv
12.028 156.261 12.524 157.19 12.524 158.364 cv
12.524 158.882 12.425 159.366 12.227 159.815 cv
12.028 160.264 11.779 160.597 11.479 160.815 cv
11.178 161.033 10.81 161.186 10.375 161.274 cv
10.083 161.334 9.62 161.365 8.986 161.365 cv
3.546 161.365 8.986 161.365 3.546 161.365 cv
3.546 159.877 3.546 161.365 3.546 159.877 cv
8.416 159.877 3.546 159.877 8.416 159.877 cv
9.193 159.877 9.716 159.846 9.986 159.786 cv
10.378 159.692 10.685 159.493 10.908 159.191 cv
11.131 158.887 11.243 158.513 11.243 158.066 cv
11.243 157.62 11.129 157.201 10.9 156.81 cv
10.671 156.418 10.36 156.142 9.966 155.979 cv
9.572 155.816 9 155.735 8.25 155.735 cv
3.546 155.735 8.25 155.735 3.546 155.735 cv
3.546 154.247 3.546 155.735 3.546 154.247 cv
12.326 154.247 3.546 154.247 12.326 154.247 cv
12.326 155.577 12.326 154.247 12.326 155.577 cv
f
13.053 152.178 mo
13.268 150.732 13.053 152.178 13.268 150.732 cv
13.714 150.672 14.04 150.504 14.243 150.228 cv
14.519 149.859 14.657 149.355 14.657 148.715 cv
14.657 148.026 14.519 147.495 14.243 147.12 cv
13.968 146.745 13.582 146.492 13.086 146.359 cv
12.783 146.282 12.146 146.246 11.176 146.252 cv
11.942 146.902 12.326 147.712 12.326 148.682 cv
12.326 149.889 11.89 150.823 11.019 151.485 cv
10.149 152.146 9.104 152.477 7.886 152.477 cv
7.048 152.477 6.275 152.325 5.567 152.021 cv
4.859 151.719 4.312 151.279 3.926 150.702 cv
3.54 150.127 3.347 149.451 3.347 148.674 cv
3.347 147.638 3.766 146.784 4.604 146.111 cv
3.546 146.111 4.604 146.111 3.546 146.111 cv
3.546 144.739 3.546 146.111 3.546 144.739 cv
11.135 144.739 3.546 144.739 11.135 144.739 cv
12.502 144.739 13.47 144.878 14.041 145.156 cv
14.611 145.435 15.062 145.876 15.393 146.479 cv
15.723 147.083 15.889 147.825 15.889 148.707 cv
15.889 149.754 15.653 150.6 15.182 151.245 cv
14.711 151.89 14.001 152.201 13.053 152.178 cv
cp
7.779 150.947 mo
8.93 150.947 9.771 150.719 10.3 150.26 cv
10.829 149.803 11.094 149.23 11.094 148.542 cv
11.094 147.858 10.831 147.285 10.304 146.822 cv
9.778 146.359 8.953 146.128 7.828 146.128 cv
6.753 146.128 5.943 146.366 5.398 146.842 cv
4.852 147.32 4.579 147.894 4.579 148.566 cv
4.579 149.228 4.848 149.79 5.385 150.253 cv
5.923 150.715 6.72 150.947 7.779 150.947 cv
f
9.705 143.077 mo
9.474 141.606 9.705 143.077 9.474 141.606 cv
10.063 141.523 10.515 141.293 10.829 140.915 cv
11.143 140.538 11.301 140.01 11.301 139.332 cv
11.301 138.649 11.161 138.142 10.883 137.811 cv
10.605 137.48 10.278 137.315 9.903 137.315 cv
9.567 137.315 9.303 137.461 9.11 137.753 cv
8.977 137.957 8.809 138.464 8.605 139.274 cv
8.33 140.366 8.092 141.122 7.89 141.544 cv
7.689 141.965 7.411 142.285 7.055 142.502 cv
6.7 142.72 6.307 142.829 5.877 142.829 cv
5.486 142.829 5.124 142.739 4.79 142.56 cv
4.457 142.381 4.18 142.137 3.959 141.829 cv
3.788 141.597 3.644 141.282 3.525 140.882 cv
3.407 140.483 3.348 140.054 3.348 139.597 cv
3.348 138.908 3.447 138.303 3.645 137.782 cv
3.844 137.261 4.112 136.877 4.451 136.629 cv
4.79 136.381 5.243 136.21 5.811 136.116 cv
6.01 137.571 5.811 136.116 6.01 137.571 cv
5.558 137.638 5.205 137.829 4.951 138.146 cv
4.698 138.463 4.571 138.911 4.571 139.489 cv
4.571 140.173 4.684 140.66 4.91 140.952 cv
5.136 141.245 5.401 141.391 5.704 141.391 cv
5.897 141.391 6.07 141.33 6.225 141.209 cv
6.384 141.087 6.517 140.897 6.621 140.638 cv
6.677 140.49 6.803 140.051 7.002 139.324 cv
7.283 138.271 7.513 137.537 7.692 137.121 cv
7.871 136.705 8.132 136.378 8.473 136.141 cv
8.815 135.904 9.239 135.786 9.746 135.786 cv
10.242 135.786 10.709 135.93 11.148 136.22 cv
11.586 136.509 11.925 136.927 12.164 137.472 cv
12.404 138.018 12.524 138.635 12.524 139.324 cv
12.524 140.465 12.287 141.334 11.813 141.932 cv
11.339 142.53 10.636 142.912 9.705 143.077 cv
f
280.081 1.1745 mo
429.668 1.1745 li
429.668 76.5745 li
280.081 76.5745 li
cp
0 0 0 0 cmyk
ef
.349 lw
280.081 1.1745 mo
429.668 1.1745 li
429.668 76.5745 li
280.081 76.5745 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
2.095 lw
286.015 10.2505 mo
312.895 10.2505 li
1 .978881 .143709 .171023 cmyk
@
304.193 10.4045 mo
304.193 13.0055 302.082 15.1175 299.48 15.1175 cv
296.879 15.1175 294.767 13.0055 294.767 10.4045 cv
294.767 7.80353 296.879 5.69153 299.48 5.69153 cv
302.082 5.69153 304.193 7.80353 304.193 10.4045 cv
cp
ef
.698 lw
304.193 10.4045 mo
304.193 13.0055 302.082 15.1175 299.48 15.1175 cv
296.879 15.1175 294.767 13.0055 294.767 10.4045 cv
294.767 7.80353 296.879 5.69153 299.48 5.69153 cv
302.082 5.69153 304.193 7.80353 304.193 10.4045 cv
cp
@
320.672 11.4005 mo
320.672 10.4915 320.672 11.4005 320.672 10.4915 cv
323.953 10.4865 320.672 10.4915 323.953 10.4865 cv
323.953 13.3605 323.953 10.4865 323.953 13.3605 cv
323.45 13.7625 322.93 14.0645 322.395 14.2665 cv
321.859 14.4695 321.31 14.5705 320.746 14.5705 cv
319.985 14.5705 319.294 14.4075 318.672 14.0825 cv
318.05 13.7565 317.581 13.2855 317.264 12.6685 cv
316.947 12.0525 316.788 11.3635 316.788 10.6025 cv
316.788 9.84854 316.946 9.14554 317.261 8.49152 cv
317.576 7.83853 318.03 7.35352 318.622 7.03653 cv
319.214 6.71854 319.895 6.56052 320.667 6.56052 cv
321.227 6.56052 321.733 6.65152 322.186 6.83252 cv
322.639 7.01352 322.993 7.26654 323.251 7.59052 cv
323.508 7.91452 323.703 8.33752 323.837 8.85852 cv
322.912 9.11252 323.837 8.85852 322.912 9.11252 cv
322.796 8.71854 322.652 8.40854 322.479 8.18253 cv
322.307 7.95752 322.06 7.77652 321.739 7.64154 cv
321.419 7.50552 321.063 7.43753 320.672 7.43753 cv
320.203 7.43753 319.798 7.50851 319.457 7.65152 cv
319.115 7.79453 318.839 7.98154 318.63 8.21454 cv
318.42 8.44653 318.257 8.70251 318.141 8.98053 cv
317.944 9.45953 317.845 9.97952 317.845 10.5395 cv
317.845 11.2295 317.964 11.8075 318.202 12.2725 cv
318.439 12.7375 318.786 13.0825 319.24 13.3075 cv
319.694 13.5335 320.177 13.6465 320.688 13.6465 cv
321.132 13.6465 321.565 13.5605 321.988 13.3895 cv
322.41 13.2195 322.731 13.0365 322.949 12.8425 cv
322.949 11.4005 322.949 12.8425 322.949 11.4005 cv
320.672 11.4005 322.949 11.4005 320.672 11.4005 cv
1 /0 /CSD get_res sepcs
1 sep
f
324.95 11.6335 mo
324.95 10.5945 325.239 9.82452 325.817 9.32452 cv
326.299 8.90854 326.888 8.70053 327.582 8.70053 cv
328.353 8.70053 328.984 8.95352 329.473 9.45953 cv
329.963 9.96454 330.208 10.6635 330.208 11.5545 cv
330.208 12.2765 330.099 12.8445 329.883 13.2585 cv
329.666 13.6725 329.351 13.9935 328.937 14.2225 cv
328.523 14.4515 328.071 14.5665 327.582 14.5665 cv
326.796 14.5665 326.161 14.3145 325.677 13.8105 cv
325.192 13.3065 324.95 12.5815 324.95 11.6335 cv
cp
325.928 11.6335 mo
325.928 12.3525 326.084 12.8905 326.398 13.2475 cv
326.711 13.6055 327.106 13.7845 327.582 13.7845 cv
328.054 13.7845 328.446 13.6045 328.76 13.2455 cv
329.073 12.8855 329.23 12.3375 329.23 11.6015 cv
329.23 10.9075 329.073 10.3825 328.757 10.0245 cv
328.442 9.66754 328.05 9.48853 327.582 9.48853 cv
327.106 9.48853 326.711 9.66653 326.398 10.0215 cv
326.084 10.3775 325.928 10.9145 325.928 11.6335 cv
f
330.884 11.6335 mo
330.884 10.5945 331.173 9.82452 331.751 9.32452 cv
332.233 8.90854 332.822 8.70053 333.516 8.70053 cv
334.287 8.70053 334.918 8.95352 335.407 9.45953 cv
335.897 9.96454 336.142 10.6635 336.142 11.5545 cv
336.142 12.2765 336.033 12.8445 335.817 13.2585 cv
335.6 13.6725 335.285 13.9935 334.871 14.2225 cv
334.457 14.4515 334.005 14.5665 333.516 14.5665 cv
332.73 14.5665 332.095 14.3145 331.611 13.8105 cv
331.126 13.3065 330.884 12.5815 330.884 11.6335 cv
cp
331.862 11.6335 mo
331.862 12.3525 332.018 12.8905 332.332 13.2475 cv
332.645 13.6055 333.04 13.7845 333.516 13.7845 cv
333.988 13.7845 334.38 13.6045 334.694 13.2455 cv
335.007 12.8855 335.164 12.3375 335.164 11.6015 cv
335.164 10.9075 335.007 10.3825 334.691 10.0245 cv
334.376 9.66754 333.984 9.48853 333.516 9.48853 cv
333.04 9.48853 332.645 9.66653 332.332 10.0215 cv
332.018 10.3775 331.862 10.9145 331.862 11.6335 cv
f
336.998 14.9045 mo
337.923 15.0415 336.998 14.9045 337.923 15.0415 cv
337.961 15.3275 338.069 15.5355 338.245 15.6655 cv
338.481 15.8415 338.803 15.9295 339.212 15.9295 cv
339.652 15.9295 339.992 15.8415 340.232 15.6655 cv
340.471 15.4895 340.633 15.2425 340.718 14.9255 cv
340.767 14.7315 340.79 14.3255 340.787 13.7055 cv
340.371 14.1945 339.853 14.4395 339.233 14.4395 cv
338.462 14.4395 337.865 14.1615 337.442 13.6045 cv
337.019 13.0485 336.808 12.3805 336.808 11.6025 cv
336.808 11.0665 336.905 10.5725 337.098 10.1195 cv
337.292 9.66751 337.573 9.31754 337.941 9.07153 cv
338.309 8.82452 338.742 8.70154 339.238 8.70154 cv
339.901 8.70154 340.447 8.96854 340.877 9.50452 cv
340.877 8.82852 340.877 9.50452 340.877 8.82852 cv
341.754 8.82852 340.877 8.82852 341.754 8.82852 cv
341.754 13.6785 341.754 8.82852 341.754 13.6785 cv
341.754 14.5525 341.665 15.1715 341.487 15.5355 cv
341.309 15.9005 341.027 16.1885 340.641 16.3995 cv
340.256 16.6115 339.781 16.7165 339.217 16.7165 cv
338.548 16.7165 338.007 16.5665 337.595 16.2655 cv
337.183 15.9635 336.984 15.5105 336.998 14.9045 cv
cp
337.785 11.5335 mo
337.785 12.2695 337.932 12.8065 338.224 13.1445 cv
338.516 13.4835 338.883 13.6525 339.323 13.6525 cv
339.76 13.6525 340.126 13.4845 340.422 13.1475 cv
340.718 12.8115 340.866 12.2835 340.866 11.5655 cv
340.866 10.8785 340.714 10.3605 340.409 10.0115 cv
340.104 9.66254 339.737 9.48853 339.307 9.48853 cv
338.884 9.48853 338.525 9.66052 338.229 10.0035 cv
337.933 10.3475 337.785 10.8575 337.785 11.5335 cv
f
343.086 14.4395 mo
343.086 6.69354 343.086 14.4395 343.086 6.69354 cv
344.037 6.69354 343.086 6.69354 344.037 6.69354 cv
344.037 14.4395 344.037 6.69354 344.037 14.4395 cv
343.086 14.4395 344.037 14.4395 343.086 14.4395 cv
f
349.393 12.6325 mo
350.376 12.7545 349.393 12.6325 350.376 12.7545 cv
350.221 13.3285 349.934 13.7735 349.515 14.0905 cv
349.095 14.4075 348.56 14.5665 347.908 14.5665 cv
347.087 14.5665 346.437 14.3135 345.956 13.8085 cv
345.475 13.3025 345.234 12.5935 345.234 11.6815 cv
345.234 10.7375 345.477 10.0045 345.964 9.48352 cv
346.45 8.96152 347.08 8.70151 347.855 8.70151 cv
348.606 8.70151 349.219 8.95651 349.694 9.46753 cv
350.17 9.97852 350.408 10.6965 350.408 11.6235 cv
350.408 11.6795 350.406 11.7645 350.402 11.8765 cv
346.217 11.8765 350.402 11.8765 346.217 11.8765 cv
346.252 12.4935 346.427 12.9655 346.74 13.2925 cv
347.054 13.6205 347.445 13.7845 347.913 13.7845 cv
348.262 13.7845 348.56 13.6925 348.806 13.5095 cv
349.053 13.3265 349.249 13.0345 349.393 12.6325 cv
cp
346.27 11.0945 mo
349.404 11.0945 346.27 11.0945 349.404 11.0945 cv
349.361 10.6225 349.242 10.2685 349.044 10.0325 cv
348.741 9.66653 348.349 9.48352 347.866 9.48352 cv
347.429 9.48352 347.062 9.62952 346.764 9.92151 cv
346.466 10.2145 346.302 10.6055 346.27 11.0945 cv
f
354.575 14.4395 mo
354.575 6.69354 354.575 14.4395 354.575 6.69354 cv
357.497 6.69354 354.575 6.69354 357.497 6.69354 cv
358.011 6.69354 358.404 6.71854 358.675 6.76752 cv
359.056 6.83054 359.375 6.95154 359.632 7.12952 cv
359.889 7.30753 360.096 7.55652 360.253 7.87653 cv
360.41 8.19754 360.488 8.54953 360.488 8.93353 cv
360.488 9.59253 360.278 10.1495 359.859 10.6065 cv
359.44 11.0625 358.683 11.2905 357.587 11.2905 cv
355.6 11.2905 357.587 11.2905 355.6 11.2905 cv
355.6 14.4395 355.6 11.2905 355.6 14.4395 cv
354.575 14.4395 355.6 14.4395 354.575 14.4395 cv
cp
355.6 10.3765 mo
357.603 10.3765 355.6 10.3765 357.603 10.3765 cv
358.265 10.3765 358.735 10.2525 359.014 10.0065 cv
359.292 9.75952 359.431 9.41254 359.431 8.96552 cv
359.431 8.64154 359.349 8.36353 359.185 8.13351 cv
359.022 7.90253 358.806 7.75052 358.538 7.67654 cv
358.365 7.63052 358.047 7.60754 357.582 7.60754 cv
355.6 7.60754 357.582 7.60754 355.6 7.60754 cv
355.6 10.3765 355.6 7.60754 355.6 10.3765 cv
f
361.588 14.4395 mo
361.588 6.69354 361.588 14.4395 361.588 6.69354 cv
362.539 6.69354 361.588 6.69354 362.539 6.69354 cv
362.539 14.4395 362.539 6.69354 362.539 14.4395 cv
361.588 14.4395 362.539 14.4395 361.588 14.4395 cv
f
367.715 13.7465 mo
367.363 14.0455 367.024 14.2575 366.698 14.3805 cv
366.372 14.5035 366.022 14.5655 365.649 14.5655 cv
365.032 14.5655 364.559 14.4145 364.227 14.1135 cv
363.896 13.8125 363.731 13.4275 363.731 12.9595 cv
363.731 12.6845 363.793 12.4335 363.918 12.2065 cv
364.043 11.9795 364.207 11.7965 364.41 11.6595 cv
364.612 11.5225 364.84 11.4185 365.094 11.3475 cv
365.281 11.2985 365.563 11.2505 365.94 11.2045 cv
366.707 11.1135 367.273 11.0045 367.636 10.8775 cv
367.639 10.7475 367.641 10.6645 367.641 10.6295 cv
367.641 10.2415 367.551 9.96851 367.372 9.81052 cv
367.128 9.59552 366.767 9.48752 366.288 9.48752 cv
365.841 9.48752 365.511 9.5665 365.298 9.7225 cv
365.084 9.87952 364.927 10.1575 364.825 10.5555 cv
363.895 10.4285 364.825 10.5555 363.895 10.4285 cv
363.979 10.0305 364.118 9.7085 364.312 9.4635 cv
364.506 9.21951 364.786 9.03052 365.152 8.8985 cv
365.519 8.76651 365.943 8.7005 366.426 8.7005 cv
366.905 8.7005 367.294 8.7565 367.593 8.86951 cv
367.893 8.98251 368.113 9.12451 368.254 9.29449 cv
368.395 9.46552 368.494 9.68152 368.55 9.9425 cv
368.582 10.1045 368.597 10.3965 368.597 10.8195 cv
368.597 12.0875 368.597 10.8195 368.597 12.0875 cv
368.597 12.9715 368.618 13.5305 368.658 13.7645 cv
368.699 13.9995 368.779 14.2235 368.899 14.4385 cv
367.905 14.4385 368.899 14.4385 367.905 14.4385 cv
367.807 14.2415 367.743 14.0105 367.715 13.7465 cv
cp
367.636 11.6225 mo
367.291 11.7635 366.773 11.8835 366.082 11.9815 cv
365.691 12.0385 365.415 12.1015 365.253 12.1715 cv
365.091 12.2425 364.966 12.3455 364.877 12.4815 cv
364.789 12.6165 364.745 12.7675 364.745 12.9325 cv
364.745 13.1865 364.841 13.3975 365.033 13.5665 cv
365.225 13.7355 365.506 13.8205 365.876 13.8205 cv
366.242 13.8205 366.568 13.7405 366.854 13.5805 cv
367.139 13.4195 367.349 13.2005 367.482 12.9225 cv
367.585 12.7075 367.636 12.3905 367.636 11.9715 cv
367.636 11.6225 367.636 11.9715 367.636 11.6225 cv
f
369.945 16.6005 mo
369.839 15.7075 369.945 16.6005 369.839 15.7075 cv
370.047 15.7635 370.229 15.7925 370.384 15.7925 cv
370.595 15.7925 370.764 15.7565 370.891 15.6865 cv
371.018 15.6155 371.122 15.5175 371.203 15.3905 cv
371.263 15.2955 371.359 15.0595 371.493 14.6825 cv
371.511 14.6295 371.539 14.5525 371.578 14.4495 cv
369.448 8.82751 371.578 14.4495 369.448 8.82751 cv
370.473 8.82751 369.448 8.82751 370.473 8.82751 cv
371.641 12.0775 370.473 8.82751 371.641 12.0775 cv
371.793 12.4895 371.928 12.9225 372.048 13.3775 cv
372.157 12.9405 372.288 12.5145 372.439 12.0985 cv
373.639 8.82751 372.439 12.0985 373.639 8.82751 cv
374.59 8.82751 373.639 8.82751 374.59 8.82751 cv
372.455 14.5345 374.59 8.82751 372.455 14.5345 cv
372.226 15.1505 372.048 15.5755 371.921 15.8075 cv
371.752 16.1215 371.558 16.3515 371.34 16.4975 cv
371.122 16.6435 370.861 16.7165 370.558 16.7165 cv
370.375 16.7165 370.17 16.6785 369.945 16.6005 cv
f
378.107 14.4395 mo
378.107 6.69354 378.107 14.4395 378.107 6.69354 cv
379.65 6.69354 378.107 6.69354 379.65 6.69354 cv
381.484 12.1775 379.65 6.69354 381.484 12.1775 cv
381.653 12.6885 381.776 13.0705 381.853 13.3245 cv
381.942 13.0425 382.079 12.6285 382.266 12.0825 cv
384.12 6.69354 382.266 12.0825 384.12 6.69354 cv
385.499 6.69354 384.12 6.69354 385.499 6.69354 cv
385.499 14.4395 385.499 6.69354 385.499 14.4395 cv
384.511 14.4395 385.499 14.4395 384.511 14.4395 cv
384.511 7.95654 384.511 14.4395 384.511 7.95654 cv
382.26 14.4395 384.511 7.95654 382.26 14.4395 cv
381.336 14.4395 382.26 14.4395 381.336 14.4395 cv
379.095 7.84552 381.336 14.4395 379.095 7.84552 cv
379.095 14.4395 379.095 7.84552 379.095 14.4395 cv
378.107 14.4395 379.095 14.4395 378.107 14.4395 cv
f
386.565 11.6335 mo
386.565 10.5945 386.854 9.82452 387.432 9.32452 cv
387.914 8.90854 388.503 8.70053 389.197 8.70053 cv
389.968 8.70053 390.599 8.95352 391.088 9.45953 cv
391.578 9.96454 391.823 10.6635 391.823 11.5545 cv
391.823 12.2765 391.714 12.8445 391.498 13.2585 cv
391.281 13.6725 390.966 13.9935 390.552 14.2225 cv
390.138 14.4515 389.686 14.5665 389.197 14.5665 cv
388.411 14.5665 387.776 14.3145 387.292 13.8105 cv
386.807 13.3065 386.565 12.5815 386.565 11.6335 cv
cp
387.543 11.6335 mo
387.543 12.3525 387.699 12.8905 388.013 13.2475 cv
388.326 13.6055 388.721 13.7845 389.197 13.7845 cv
389.669 13.7845 390.061 13.6045 390.375 13.2455 cv
390.688 12.8855 390.845 12.3375 390.845 11.6015 cv
390.845 10.9075 390.688 10.3825 390.372 10.0245 cv
390.057 9.66754 389.665 9.48853 389.197 9.48853 cv
388.721 9.48853 388.326 9.66653 388.013 10.0215 cv
387.699 10.3775 387.543 10.9145 387.543 11.6335 cv
f
394.412 14.4395 mo
392.277 8.82852 394.412 14.4395 392.277 8.82852 cv
393.281 8.82852 392.277 8.82852 393.281 8.82852 cv
394.486 12.1885 393.281 8.82852 394.486 12.1885 cv
394.616 12.5515 394.736 12.9285 394.845 13.3195 cv
394.93 13.0235 395.048 12.6675 395.199 12.2515 cv
396.446 8.82852 395.199 12.2515 396.446 8.82852 cv
397.424 8.82852 396.446 8.82852 397.424 8.82852 cv
395.3 14.4395 397.424 8.82852 395.3 14.4395 cv
394.412 14.4395 395.3 14.4395 394.412 14.4395 cv
f
398.27 7.7865 mo
398.27 6.6925 398.27 7.7865 398.27 6.6925 cv
399.221 6.6925 398.27 6.6925 399.221 6.6925 cv
399.221 7.7865 399.221 6.6925 399.221 7.7865 cv
398.27 7.7865 399.221 7.7865 398.27 7.7865 cv
cp
398.27 14.4385 mo
398.27 8.82751 398.27 14.4385 398.27 8.82751 cv
399.221 8.82751 398.27 8.82751 399.221 8.82751 cv
399.221 14.4385 399.221 8.82751 399.221 14.4385 cv
398.27 14.4385 399.221 14.4385 398.27 14.4385 cv
f
404.55 12.6325 mo
405.533 12.7545 404.55 12.6325 405.533 12.7545 cv
405.378 13.3285 405.091 13.7735 404.672 14.0905 cv
404.252 14.4075 403.717 14.5665 403.065 14.5665 cv
402.244 14.5665 401.594 14.3135 401.113 13.8085 cv
400.632 13.3025 400.391 12.5935 400.391 11.6815 cv
400.391 10.7375 400.634 10.0045 401.121 9.48352 cv
401.607 8.96152 402.237 8.70151 403.012 8.70151 cv
403.763 8.70151 404.376 8.95651 404.851 9.46753 cv
405.327 9.97852 405.565 10.6965 405.565 11.6235 cv
405.565 11.6795 405.563 11.7645 405.559 11.8765 cv
401.374 11.8765 405.559 11.8765 401.374 11.8765 cv
401.409 12.4935 401.584 12.9655 401.897 13.2925 cv
402.211 13.6205 402.602 13.7845 403.07 13.7845 cv
403.419 13.7845 403.717 13.6925 403.963 13.5095 cv
404.21 13.3265 404.406 13.0345 404.55 12.6325 cv
cp
401.427 11.0945 mo
404.561 11.0945 401.427 11.0945 404.561 11.0945 cv
404.518 10.6225 404.398 10.2685 404.201 10.0325 cv
403.898 9.66653 403.505 9.48352 403.023 9.48352 cv
402.586 9.48352 402.219 9.62952 401.921 9.92151 cv
401.623 10.2145 401.459 10.6055 401.427 11.0945 cv
f
406.262 12.7645 mo
407.203 12.6165 406.262 12.7645 407.203 12.6165 cv
407.255 12.9935 407.402 13.2825 407.644 13.4835 cv
407.885 13.6835 408.222 13.7845 408.656 13.7845 cv
409.093 13.7845 409.417 13.6955 409.628 13.5175 cv
409.839 13.3395 409.945 13.1305 409.945 12.8915 cv
409.945 12.6765 409.852 12.5075 409.665 12.3845 cv
409.535 12.2995 409.211 12.1925 408.693 12.0615 cv
407.995 11.8855 407.512 11.7335 407.242 11.6045 cv
406.973 11.4765 406.768 11.2985 406.629 11.0715 cv
406.49 10.8435 406.421 10.5925 406.421 10.3185 cv
406.421 10.0675 406.478 9.83652 406.592 9.6235 cv
406.707 9.41052 406.863 9.23352 407.06 9.0925 cv
407.208 8.98352 407.41 8.8905 407.665 8.81451 cv
407.92 8.7395 408.194 8.70151 408.487 8.70151 cv
408.927 8.70151 409.314 8.7645 409.646 8.89151 cv
409.979 9.01852 410.225 9.18951 410.384 9.40652 cv
410.542 9.6235 410.651 9.91251 410.711 10.2755 cv
409.781 10.4025 410.711 10.2755 409.781 10.4025 cv
409.739 10.1135 409.616 9.88852 409.414 9.7265 cv
409.211 9.56451 408.925 9.48352 408.555 9.48352 cv
408.118 9.48352 407.807 9.55551 407.62 9.69952 cv
407.433 9.84451 407.34 10.0135 407.34 10.2075 cv
407.34 10.3305 407.379 10.4415 407.456 10.5405 cv
407.534 10.6425 407.655 10.7265 407.821 10.7935 cv
407.916 10.8285 408.196 10.9095 408.661 11.0365 cv
409.334 11.2165 409.803 11.3635 410.069 11.4775 cv
410.335 11.5925 410.544 11.7585 410.695 11.9775 cv
410.847 12.1955 410.923 12.4665 410.923 12.7905 cv
410.923 13.1075 410.83 13.4065 410.645 13.6865 cv
410.46 13.9665 410.193 14.1835 409.845 14.3365 cv
409.496 14.4895 409.101 14.5665 408.661 14.5665 cv
407.932 14.5665 407.376 14.4145 406.994 14.1115 cv
406.612 13.8085 406.368 13.3595 406.262 12.7645 cv
f
417.113 14.4395 mo
417.113 7.60754 417.113 14.4395 417.113 7.60754 cv
414.561 7.60754 417.113 7.60754 414.561 7.60754 cv
414.561 6.69354 414.561 7.60754 414.561 6.69354 cv
420.701 6.69354 414.561 6.69354 420.701 6.69354 cv
420.701 7.60754 420.701 6.69354 420.701 7.60754 cv
418.138 7.60754 420.701 7.60754 418.138 7.60754 cv
418.138 14.4395 418.138 7.60754 418.138 14.4395 cv
417.113 14.4395 418.138 14.4395 417.113 14.4395 cv
f
423.989 14.4395 mo
420.988 6.69354 423.989 14.4395 420.988 6.69354 cv
422.097 6.69354 420.988 6.69354 422.097 6.69354 cv
424.111 12.3205 422.097 6.69354 424.111 12.3205 cv
424.273 12.7715 424.408 13.1945 424.517 13.5885 cv
424.637 13.1665 424.776 12.7435 424.935 12.3205 cv
427.027 6.69354 424.935 12.3205 427.027 6.69354 cv
428.074 6.69354 427.027 6.69354 428.074 6.69354 cv
425.041 14.4395 428.074 6.69354 425.041 14.4395 cv
423.989 14.4395 425.041 14.4395 423.989 14.4395 cv
f
2.095 lw
286.015 25.0855 mo
312.895 25.0855 li
0 .990631 1 .000396735 cmyk
@
293.521 25.2605 mo
299.456 19.3265 li
305.39 25.2605 li
299.456 31.1945 li
cp
ef
.698 lw
293.521 25.2605 mo
299.456 19.3265 li
305.39 25.2605 li
299.456 31.1945 li
cp
@
317.079 29.2745 mo
317.079 21.5285 317.079 29.2745 317.079 21.5285 cv
318.104 21.5285 317.079 21.5285 318.104 21.5285 cv
318.104 24.7095 318.104 21.5285 318.104 24.7095 cv
322.131 24.7095 318.104 24.7095 322.131 24.7095 cv
322.131 21.5285 322.131 24.7095 322.131 21.5285 cv
323.156 21.5285 322.131 21.5285 323.156 21.5285 cv
323.156 29.2745 323.156 21.5285 323.156 29.2745 cv
322.131 29.2745 323.156 29.2745 322.131 29.2745 cv
322.131 25.6235 322.131 29.2745 322.131 25.6235 cv
318.104 25.6235 322.131 25.6235 318.104 25.6235 cv
318.104 29.2745 318.104 25.6235 318.104 29.2745 cv
317.079 29.2745 318.104 29.2745 317.079 29.2745 cv
1 /0 /CSD get_res sepcs
1 sep
f
328.442 28.5825 mo
328.09 28.8815 327.751 29.0935 327.425 29.2165 cv
327.099 29.3395 326.749 29.4015 326.376 29.4015 cv
325.759 29.4015 325.286 29.2505 324.954 28.9495 cv
324.623 28.6485 324.458 28.2635 324.458 27.7955 cv
324.458 27.5205 324.52 27.2695 324.645 27.0425 cv
324.77 26.8155 324.934 26.6325 325.137 26.4955 cv
325.339 26.3585 325.567 26.2545 325.821 26.1835 cv
326.008 26.1345 326.29 26.0865 326.667 26.0405 cv
327.434 25.9495 328 25.8405 328.363 25.7135 cv
328.366 25.5835 328.368 25.5005 328.368 25.4655 cv
328.368 25.0775 328.278 24.8045 328.099 24.6465 cv
327.855 24.4315 327.494 24.3235 327.015 24.3235 cv
326.568 24.3235 326.238 24.4025 326.025 24.5585 cv
325.811 24.7155 325.654 24.9935 325.552 25.3915 cv
324.622 25.2645 325.552 25.3915 324.622 25.2645 cv
324.706 24.8665 324.845 24.5445 325.039 24.2995 cv
325.233 24.0555 325.513 23.8665 325.879 23.7345 cv
326.246 23.6025 326.67 23.5365 327.153 23.5365 cv
327.632 23.5365 328.021 23.5925 328.32 23.7055 cv
328.62 23.8185 328.84 23.9605 328.981 24.1305 cv
329.122 24.3015 329.221 24.5175 329.277 24.7785 cv
329.309 24.9405 329.324 25.2325 329.324 25.6555 cv
329.324 26.9235 329.324 25.6555 329.324 26.9235 cv
329.324 27.8075 329.345 28.3665 329.385 28.6005 cv
329.426 28.8355 329.506 29.0595 329.626 29.2745 cv
328.632 29.2745 329.626 29.2745 328.632 29.2745 cv
328.534 29.0775 328.47 28.8465 328.442 28.5825 cv
cp
328.363 26.4585 mo
328.018 26.5995 327.5 26.7195 326.809 26.8175 cv
326.418 26.8745 326.142 26.9375 325.98 27.0075 cv
325.818 27.0785 325.692 27.1815 325.604 27.3175 cv
325.516 27.4525 325.472 27.6035 325.472 27.7685 cv
325.472 28.0225 325.568 28.2335 325.76 28.4025 cv
325.952 28.5715 326.233 28.6565 326.603 28.6565 cv
326.969 28.6565 327.295 28.5765 327.581 28.4165 cv
327.866 28.2555 328.076 28.0365 328.209 27.7585 cv
328.312 27.5435 328.363 27.2265 328.363 26.8075 cv
328.363 26.4585 328.363 26.8075 328.363 26.4585 cv
f
330.715 29.2745 mo
330.715 23.6635 330.715 29.2745 330.715 23.6635 cv
331.571 23.6635 330.715 23.6635 331.571 23.6635 cv
331.571 24.4605 331.571 23.6635 331.571 24.4605 cv
331.983 23.8445 332.579 23.5365 333.357 23.5365 cv
333.695 23.5365 334.006 23.5965 334.29 23.7185 cv
334.573 23.8405 334.785 23.9995 334.926 24.1965 cv
335.067 24.3935 335.166 24.6285 335.222 24.8995 cv
335.258 25.0755 335.275 25.3835 335.275 25.8245 cv
335.275 29.2745 335.275 25.8245 335.275 29.2745 cv
334.324 29.2745 335.275 29.2745 334.324 29.2745 cv
334.324 25.8615 334.324 29.2745 334.324 25.8615 cv
334.324 25.4735 334.287 25.1835 334.213 24.9915 cv
334.139 24.7995 334.008 24.6465 333.819 24.5325 cv
333.631 24.4175 333.41 24.3605 333.156 24.3605 cv
332.751 24.3605 332.402 24.4895 332.107 24.7465 cv
331.813 25.0035 331.666 25.4915 331.666 26.2095 cv
331.666 29.2745 331.666 26.2095 331.666 29.2745 cv
330.715 29.2745 331.666 29.2745 330.715 29.2745 cv
f
336.475 29.7395 mo
337.4 29.8765 336.475 29.7395 337.4 29.8765 cv
337.438 30.1625 337.546 30.3705 337.722 30.5005 cv
337.958 30.6765 338.28 30.7645 338.689 30.7645 cv
339.129 30.7645 339.469 30.6765 339.709 30.5005 cv
339.948 30.3245 340.11 30.0775 340.195 29.7605 cv
340.244 29.5665 340.267 29.1605 340.264 28.5405 cv
339.848 29.0295 339.33 29.2745 338.71 29.2745 cv
337.939 29.2745 337.342 28.9965 336.919 28.4395 cv
336.496 27.8835 336.285 27.2155 336.285 26.4375 cv
336.285 25.9015 336.382 25.4075 336.575 24.9545 cv
336.769 24.5025 337.05 24.1525 337.418 23.9065 cv
337.786 23.6595 338.219 23.5365 338.715 23.5365 cv
339.378 23.5365 339.924 23.8035 340.354 24.3395 cv
340.354 23.6635 340.354 24.3395 340.354 23.6635 cv
341.231 23.6635 340.354 23.6635 341.231 23.6635 cv
341.231 28.5135 341.231 23.6635 341.231 28.5135 cv
341.231 29.3875 341.142 30.0065 340.964 30.3705 cv
340.786 30.7355 340.504 31.0235 340.118 31.2345 cv
339.733 31.4465 339.258 31.5515 338.694 31.5515 cv
338.025 31.5515 337.484 31.4015 337.072 31.1005 cv
336.66 30.7985 336.461 30.3455 336.475 29.7395 cv
cp
337.262 26.3685 mo
337.262 27.1045 337.409 27.6415 337.701 27.9795 cv
337.993 28.3185 338.36 28.4875 338.8 28.4875 cv
339.237 28.4875 339.603 28.3195 339.899 27.9825 cv
340.195 27.6465 340.343 27.1185 340.343 26.4005 cv
340.343 25.7135 340.191 25.1955 339.886 24.8465 cv
339.581 24.4975 339.214 24.3235 338.784 24.3235 cv
338.361 24.3235 338.002 24.4955 337.706 24.8385 cv
337.41 25.1825 337.262 25.6925 337.262 26.3685 cv
f
342.23 26.4695 mo
342.23 25.4305 342.519 24.6605 343.097 24.1605 cv
343.579 23.7445 344.168 23.5365 344.862 23.5365 cv
345.633 23.5365 346.264 23.7895 346.753 24.2955 cv
347.243 24.8005 347.488 25.4995 347.488 26.3905 cv
347.488 27.1125 347.379 27.6805 347.163 28.0945 cv
346.946 28.5085 346.631 28.8295 346.217 29.0585 cv
345.803 29.2875 345.351 29.4025 344.862 29.4025 cv
344.076 29.4025 343.441 29.1505 342.957 28.6465 cv
342.472 28.1425 342.23 27.4175 342.23 26.4695 cv
cp
343.208 26.4695 mo
343.208 27.1885 343.364 27.7265 343.678 28.0835 cv
343.991 28.4415 344.386 28.6205 344.862 28.6205 cv
345.334 28.6205 345.726 28.4405 346.04 28.0815 cv
346.353 27.7215 346.51 27.1735 346.51 26.4375 cv
346.51 25.7435 346.353 25.2185 346.037 24.8605 cv
345.722 24.5035 345.33 24.3245 344.862 24.3245 cv
344.386 24.3245 343.991 24.5025 343.678 24.8575 cv
343.364 25.2135 343.208 25.7505 343.208 26.4695 cv
f
352.196 29.2745 mo
352.196 28.4505 352.196 29.2745 352.196 28.4505 cv
351.759 29.0845 351.166 29.4015 350.415 29.4015 cv
350.084 29.4015 349.775 29.3375 349.488 29.2115 cv
349.201 29.0845 348.988 28.9245 348.848 28.7325 cv
348.709 28.5405 348.612 28.3055 348.555 28.0275 cv
348.516 27.8405 348.497 27.5445 348.497 27.1395 cv
348.497 23.6635 348.497 27.1395 348.497 23.6635 cv
349.448 23.6635 348.497 23.6635 349.448 23.6635 cv
349.448 26.7755 349.448 23.6635 349.448 26.7755 cv
349.448 27.2715 349.468 27.6065 349.506 27.7795 cv
349.566 28.0295 349.693 28.2255 349.887 28.3685 cv
350.081 28.5105 350.32 28.5825 350.605 28.5825 cv
350.891 28.5825 351.159 28.5095 351.409 28.3635 cv
351.659 28.2165 351.836 28.0175 351.94 27.7655 cv
352.044 27.5145 352.096 27.1485 352.096 26.6695 cv
352.096 23.6635 352.096 26.6695 352.096 23.6635 cv
353.047 23.6635 352.096 23.6635 353.047 23.6635 cv
353.047 29.2745 353.047 23.6635 353.047 29.2745 cv
352.196 29.2745 353.047 29.2745 352.196 29.2745 cv
f
356.53 28.4245 mo
356.667 29.2645 356.53 28.4245 356.667 29.2645 cv
356.4 29.3215 356.16 29.3495 355.949 29.3495 cv
355.604 29.3495 355.336 29.2945 355.146 29.1855 cv
354.955 29.0765 354.821 28.9325 354.744 28.7545 cv
354.666 28.5765 354.628 28.2025 354.628 27.6315 cv
354.628 24.4035 354.628 27.6315 354.628 24.4035 cv
353.93 24.4035 354.628 24.4035 353.93 24.4035 cv
353.93 23.6635 353.93 24.4035 353.93 23.6635 cv
354.628 23.6635 353.93 23.6635 354.628 23.6635 cv
354.628 22.2745 354.628 23.6635 354.628 22.2745 cv
355.574 21.7035 354.628 22.2745 355.574 21.7035 cv
355.574 23.6635 355.574 21.7035 355.574 23.6635 cv
356.53 23.6635 355.574 23.6635 356.53 23.6635 cv
356.53 24.4035 356.53 23.6635 356.53 24.4035 cv
355.574 24.4035 356.53 24.4035 355.574 24.4035 cv
355.574 27.6845 355.574 24.4035 355.574 27.6845 cv
355.574 27.9555 355.59 28.1305 355.624 28.2075 cv
355.657 28.2855 355.712 28.3465 355.788 28.3925 cv
355.863 28.4385 355.972 28.4615 356.113 28.4615 cv
356.218 28.4615 356.357 28.4495 356.53 28.4245 cv
f
357.04 27.5995 mo
357.981 27.4515 357.04 27.5995 357.981 27.4515 cv
358.033 27.8285 358.18 28.1175 358.422 28.3185 cv
358.663 28.5185 359 28.6195 359.434 28.6195 cv
359.871 28.6195 360.195 28.5305 360.406 28.3525 cv
360.617 28.1745 360.723 27.9655 360.723 27.7265 cv
360.723 27.5115 360.63 27.3425 360.443 27.2195 cv
360.313 27.1345 359.989 27.0275 359.471 26.8965 cv
358.773 26.7205 358.29 26.5685 358.02 26.4395 cv
357.751 26.3115 357.546 26.1335 357.407 25.9065 cv
357.268 25.6785 357.199 25.4275 357.199 25.1535 cv
357.199 24.9025 357.256 24.6715 357.37 24.4585 cv
357.485 24.2455 357.641 24.0685 357.838 23.9275 cv
357.986 23.8185 358.188 23.7255 358.443 23.6495 cv
358.698 23.5745 358.972 23.5365 359.265 23.5365 cv
359.705 23.5365 360.092 23.5995 360.424 23.7265 cv
360.757 23.8535 361.003 24.0245 361.162 24.2415 cv
361.32 24.4585 361.429 24.7475 361.489 25.1105 cv
360.559 25.2375 361.489 25.1105 360.559 25.2375 cv
360.517 24.9485 360.394 24.7235 360.192 24.5615 cv
359.989 24.3995 359.703 24.3185 359.333 24.3185 cv
358.896 24.3185 358.585 24.3905 358.398 24.5345 cv
358.211 24.6795 358.118 24.8485 358.118 25.0425 cv
358.118 25.1655 358.157 25.2765 358.234 25.3745 cv
358.312 25.4775 358.433 25.5615 358.599 25.6285 cv
358.694 25.6635 358.974 25.7445 359.439 25.8715 cv
360.112 26.0515 360.581 26.1985 360.847 26.3125 cv
361.113 26.4275 361.322 26.5935 361.473 26.8125 cv
361.625 27.0305 361.701 27.3015 361.701 27.6255 cv
361.701 27.9425 361.608 28.2415 361.423 28.5215 cv
361.238 28.8015 360.971 29.0185 360.623 29.1715 cv
360.274 29.3245 359.879 29.4015 359.439 29.4015 cv
358.71 29.4015 358.154 29.2495 357.772 28.9465 cv
357.39 28.6435 357.146 28.1945 357.04 27.5995 cv
f
2.095 lw
286.015 39.9215 mo
312.895 39.9215 li
.878538 .2439 1 .131716 cmyk
@
299.456 34.6855 mo
300.503 38.3505 li
304.518 38.3505 li
301.376 40.6195 li
302.598 44.4595 li
299.456 42.0165 li
296.14 44.4595 li
297.361 40.6195 li
294.22 38.3505 li
298.234 38.3505 li
cp
ef
.698 lw
299.456 34.6855 mo
300.503 38.3505 li
304.518 38.3505 li
301.376 40.6195 li
302.598 44.4595 li
299.456 42.0165 li
296.14 44.4595 li
297.361 40.6195 li
294.22 38.3505 li
298.234 38.3505 li
cp
@
316.698 41.6215 mo
317.665 41.5365 316.698 41.6215 317.665 41.5365 cv
317.711 41.9245 317.817 42.2425 317.985 42.4905 cv
318.152 42.7395 318.412 42.9395 318.764 43.0935 cv
319.116 43.2465 319.513 43.3225 319.953 43.3225 cv
320.344 43.3225 320.689 43.2645 320.989 43.1485 cv
321.288 43.0325 321.511 42.8725 321.657 42.6705 cv
321.803 42.4675 321.876 42.2465 321.876 42.0075 cv
321.876 41.7645 321.806 41.5515 321.665 41.3705 cv
321.524 41.1895 321.292 41.0365 320.968 40.9135 cv
320.76 40.8325 320.3 40.7065 319.588 40.5355 cv
318.877 40.3645 318.378 40.2035 318.093 40.0525 cv
317.723 39.8585 317.447 39.6185 317.266 39.3305 cv
317.085 39.0435 316.994 38.7225 316.994 38.3665 cv
316.994 37.9755 317.105 37.6105 317.327 37.2705 cv
317.549 36.9305 317.873 36.6725 318.299 36.4965 cv
318.725 36.3205 319.199 36.2315 319.721 36.2315 cv
320.295 36.2315 320.801 36.3245 321.24 36.5095 cv
321.678 36.6945 322.016 36.9665 322.252 37.3255 cv
322.488 37.6855 322.614 38.0915 322.632 38.5465 cv
321.649 38.6205 322.632 38.5465 321.649 38.6205 cv
321.596 38.1305 321.418 37.7605 321.113 37.5105 cv
320.808 37.2605 320.358 37.1355 319.763 37.1355 cv
319.143 37.1355 318.691 37.2495 318.407 37.4765 cv
318.124 37.7035 317.982 37.9775 317.982 38.2975 cv
317.982 38.5765 318.082 38.8055 318.283 38.9845 cv
318.481 39.1645 318.996 39.3485 319.829 39.5375 cv
320.662 39.7255 321.234 39.8905 321.544 40.0315 cv
321.994 40.2385 322.327 40.5025 322.542 40.8205 cv
322.757 41.1395 322.865 41.5065 322.865 41.9225 cv
322.865 42.3345 322.747 42.7235 322.511 43.0875 cv
322.275 43.4525 321.935 43.7355 321.493 43.9385 cv
321.051 44.1415 320.554 44.2425 320.001 44.2425 cv
319.3 44.2425 318.712 44.1405 318.238 43.9355 cv
317.764 43.7315 317.393 43.4245 317.123 43.0135 cv
316.854 42.6035 316.712 42.1395 316.698 41.6215 cv
1 /0 /CSD get_res sepcs
1 sep
f
324.087 44.1105 mo
324.087 36.3645 324.087 44.1105 324.087 36.3645 cv
325.038 36.3645 324.087 36.3645 325.038 36.3645 cv
325.038 40.7815 325.038 36.3645 325.038 40.7815 cv
327.289 38.4995 325.038 40.7815 327.289 38.4995 cv
328.52 38.4995 327.289 38.4995 328.52 38.4995 cv
326.375 40.5805 328.52 38.4995 326.375 40.5805 cv
328.737 44.1105 326.375 40.5805 328.737 44.1105 cv
327.564 44.1105 328.737 44.1105 327.564 44.1105 cv
325.709 41.2415 327.564 44.1105 325.709 41.2415 cv
325.038 41.8855 325.709 41.2415 325.038 41.8855 cv
325.038 44.1105 325.038 41.8855 325.038 44.1105 cv
324.087 44.1105 325.038 44.1105 324.087 44.1105 cv
f
329.625 46.2715 mo
329.519 45.3785 329.625 46.2715 329.519 45.3785 cv
329.727 45.4345 329.909 45.4635 330.064 45.4635 cv
330.275 45.4635 330.444 45.4275 330.571 45.3575 cv
330.698 45.2865 330.802 45.1885 330.883 45.0615 cv
330.943 44.9665 331.039 44.7305 331.173 44.3535 cv
331.191 44.3005 331.219 44.2235 331.258 44.1205 cv
329.128 38.4985 331.258 44.1205 329.128 38.4985 cv
330.153 38.4985 329.128 38.4985 330.153 38.4985 cv
331.321 41.7485 330.153 38.4985 331.321 41.7485 cv
331.473 42.1605 331.608 42.5935 331.728 43.0485 cv
331.837 42.6115 331.968 42.1855 332.119 41.7695 cv
333.319 38.4985 332.119 41.7695 333.319 38.4985 cv
334.27 38.4985 333.319 38.4985 334.27 38.4985 cv
332.135 44.2055 334.27 38.4985 332.135 44.2055 cv
331.906 44.8225 331.728 45.2465 331.601 45.4785 cv
331.432 45.7925 331.238 46.0225 331.02 46.1685 cv
330.802 46.3145 330.541 46.3875 330.238 46.3875 cv
330.055 46.3875 329.85 46.3495 329.625 46.2715 cv
f
334.729 46.2615 mo
334.729 38.4995 334.729 46.2615 334.729 38.4995 cv
335.596 38.4995 334.729 38.4995 335.596 38.4995 cv
335.596 39.2285 335.596 38.4995 335.596 39.2285 cv
335.8 38.9435 336.031 38.7295 336.288 38.5865 cv
336.545 38.4445 336.857 38.3725 337.223 38.3725 cv
337.702 38.3725 338.125 38.4955 338.491 38.7425 cv
338.858 38.9895 339.134 39.3375 339.321 39.7865 cv
339.508 40.2355 339.601 40.7275 339.601 41.2625 cv
339.601 41.8375 339.498 42.3545 339.292 42.8135 cv
339.086 43.2735 338.786 43.6255 338.394 43.8705 cv
338.001 44.1155 337.588 44.2375 337.154 44.2375 cv
336.837 44.2375 336.553 44.1705 336.301 44.0375 cv
336.049 43.9035 335.842 43.7345 335.68 43.5295 cv
335.68 46.2615 335.68 43.5295 335.68 46.2615 cv
334.729 46.2615 335.68 46.2615 334.729 46.2615 cv
cp
335.59 41.3365 mo
335.59 42.0595 335.737 42.5925 336.029 42.9375 cv
336.321 43.2835 336.675 43.4555 337.091 43.4555 cv
337.514 43.4555 337.876 43.2775 338.177 42.9195 cv
338.478 42.5615 338.629 42.0075 338.629 41.2575 cv
338.629 40.5425 338.482 40.0075 338.187 39.6515 cv
337.893 39.2955 337.542 39.1175 337.133 39.1175 cv
336.728 39.1175 336.37 39.3075 336.058 39.6855 cv
335.746 40.0645 335.59 40.6145 335.59 41.3365 cv
f
344.505 42.3035 mo
345.488 42.4255 344.505 42.3035 345.488 42.4255 cv
345.333 42.9995 345.046 43.4445 344.627 43.7615 cv
344.207 44.0785 343.672 44.2375 343.02 44.2375 cv
342.199 44.2375 341.549 43.9845 341.068 43.4795 cv
340.587 42.9735 340.346 42.2645 340.346 41.3525 cv
340.346 40.4085 340.589 39.6755 341.076 39.1545 cv
341.562 38.6325 342.192 38.3725 342.967 38.3725 cv
343.718 38.3725 344.331 38.6275 344.806 39.1385 cv
345.282 39.6495 345.52 40.3675 345.52 41.2945 cv
345.52 41.3505 345.518 41.4355 345.514 41.5475 cv
341.329 41.5475 345.514 41.5475 341.329 41.5475 cv
341.364 42.1645 341.539 42.6365 341.852 42.9635 cv
342.166 43.2915 342.557 43.4555 343.025 43.4555 cv
343.374 43.4555 343.672 43.3635 343.918 43.1805 cv
344.165 42.9975 344.361 42.7055 344.505 42.3035 cv
cp
341.382 40.7655 mo
344.516 40.7655 341.382 40.7655 344.516 40.7655 cv
344.473 40.2935 344.354 39.9395 344.156 39.7035 cv
343.853 39.3375 343.46 39.1545 342.978 39.1545 cv
342.541 39.1545 342.174 39.3005 341.876 39.5925 cv
341.578 39.8855 341.414 40.2765 341.382 40.7655 cv
f
2.095 lw
286.015 54.7575 mo
312.895 54.7575 li
0 .612726 1 .000701915 cmyk
@
299.456 48.4735 mo
305.042 58.0735 li
293.696 58.0735 li
cp
ef
.698 lw
299.456 48.4735 mo
305.042 58.0735 li
293.696 58.0735 li
cp
@
320.672 55.9085 mo
320.672 54.9995 320.672 55.9085 320.672 54.9995 cv
323.953 54.9945 320.672 54.9995 323.953 54.9945 cv
323.953 57.8685 323.953 54.9945 323.953 57.8685 cv
323.45 58.2705 322.93 58.5725 322.395 58.7745 cv
321.859 58.9775 321.31 59.0785 320.746 59.0785 cv
319.985 59.0785 319.294 58.9155 318.672 58.5905 cv
318.05 58.2645 317.581 57.7935 317.264 57.1765 cv
316.947 56.5605 316.788 55.8715 316.788 55.1105 cv
316.788 54.3565 316.946 53.6535 317.261 52.9995 cv
317.576 52.3465 318.03 51.8615 318.622 51.5445 cv
319.214 51.2275 319.895 51.0685 320.667 51.0685 cv
321.227 51.0685 321.733 51.1595 322.186 51.3405 cv
322.639 51.5215 322.993 51.7745 323.251 52.0985 cv
323.508 52.4225 323.703 52.8455 323.837 53.3665 cv
322.912 53.6205 323.837 53.3665 322.912 53.6205 cv
322.796 53.2265 322.652 52.9165 322.479 52.6905 cv
322.307 52.4655 322.06 52.2845 321.739 52.1495 cv
321.419 52.0135 321.063 51.9455 320.672 51.9455 cv
320.203 51.9455 319.798 52.0165 319.457 52.1595 cv
319.115 52.3025 318.839 52.4895 318.63 52.7225 cv
318.42 52.9545 318.257 53.2105 318.141 53.4885 cv
317.944 53.9675 317.845 54.4875 317.845 55.0475 cv
317.845 55.7375 317.964 56.3155 318.202 56.7805 cv
318.439 57.2455 318.786 57.5905 319.24 57.8155 cv
319.694 58.0415 320.177 58.1545 320.688 58.1545 cv
321.132 58.1545 321.565 58.0685 321.988 57.8975 cv
322.41 57.7275 322.731 57.5445 322.949 57.3515 cv
322.949 55.9085 322.949 57.3515 322.949 55.9085 cv
320.672 55.9085 322.949 55.9085 320.672 55.9085 cv
1 /0 /CSD get_res sepcs
1 sep
f
324.95 56.1405 mo
324.95 55.1015 325.239 54.3315 325.817 53.8315 cv
326.299 53.4155 326.888 53.2075 327.582 53.2075 cv
328.353 53.2075 328.984 53.4605 329.473 53.9665 cv
329.963 54.4715 330.208 55.1705 330.208 56.0615 cv
330.208 56.7835 330.099 57.3515 329.883 57.7655 cv
329.666 58.1795 329.351 58.5005 328.937 58.7295 cv
328.523 58.9585 328.071 59.0735 327.582 59.0735 cv
326.796 59.0735 326.161 58.8215 325.677 58.3175 cv
325.192 57.8135 324.95 57.0885 324.95 56.1405 cv
cp
325.928 56.1405 mo
325.928 56.8595 326.084 57.3975 326.398 57.7545 cv
326.711 58.1125 327.106 58.2915 327.582 58.2915 cv
328.054 58.2915 328.446 58.1115 328.76 57.7525 cv
329.073 57.3925 329.23 56.8445 329.23 56.1085 cv
329.23 55.4145 329.073 54.8895 328.757 54.5315 cv
328.442 54.1745 328.05 53.9955 327.582 53.9955 cv
327.106 53.9955 326.711 54.1735 326.398 54.5285 cv
326.084 54.8845 325.928 55.4215 325.928 56.1405 cv
f
330.884 56.1405 mo
330.884 55.1015 331.173 54.3315 331.751 53.8315 cv
332.233 53.4155 332.822 53.2075 333.516 53.2075 cv
334.287 53.2075 334.918 53.4605 335.407 53.9665 cv
335.897 54.4715 336.142 55.1705 336.142 56.0615 cv
336.142 56.7835 336.033 57.3515 335.817 57.7655 cv
335.6 58.1795 335.285 58.5005 334.871 58.7295 cv
334.457 58.9585 334.005 59.0735 333.516 59.0735 cv
332.73 59.0735 332.095 58.8215 331.611 58.3175 cv
331.126 57.8135 330.884 57.0885 330.884 56.1405 cv
cp
331.862 56.1405 mo
331.862 56.8595 332.018 57.3975 332.332 57.7545 cv
332.645 58.1125 333.04 58.2915 333.516 58.2915 cv
333.988 58.2915 334.38 58.1115 334.694 57.7525 cv
335.007 57.3925 335.164 56.8445 335.164 56.1085 cv
335.164 55.4145 335.007 54.8895 334.691 54.5315 cv
334.376 54.1745 333.984 53.9955 333.516 53.9955 cv
333.04 53.9955 332.645 54.1735 332.332 54.5285 cv
332.018 54.8845 331.862 55.4215 331.862 56.1405 cv
f
336.998 59.4115 mo
337.923 59.5485 336.998 59.4115 337.923 59.5485 cv
337.961 59.8345 338.069 60.0425 338.245 60.1725 cv
338.481 60.3485 338.803 60.4365 339.212 60.4365 cv
339.652 60.4365 339.992 60.3485 340.232 60.1725 cv
340.471 59.9965 340.633 59.7495 340.718 59.4325 cv
340.767 59.2385 340.79 58.8325 340.787 58.2125 cv
340.371 58.7015 339.853 58.9465 339.233 58.9465 cv
338.462 58.9465 337.865 58.6685 337.442 58.1115 cv
337.019 57.5555 336.808 56.8875 336.808 56.1095 cv
336.808 55.5735 336.905 55.0795 337.098 54.6265 cv
337.292 54.1745 337.573 53.8245 337.941 53.5785 cv
338.309 53.3315 338.742 53.2085 339.238 53.2085 cv
339.901 53.2085 340.447 53.4755 340.877 54.0115 cv
340.877 53.3355 340.877 54.0115 340.877 53.3355 cv
341.754 53.3355 340.877 53.3355 341.754 53.3355 cv
341.754 58.1855 341.754 53.3355 341.754 58.1855 cv
341.754 59.0595 341.665 59.6785 341.487 60.0425 cv
341.309 60.4075 341.027 60.6955 340.641 60.9065 cv
340.256 61.1185 339.781 61.2235 339.217 61.2235 cv
338.548 61.2235 338.007 61.0735 337.595 60.7725 cv
337.183 60.4705 336.984 60.0175 336.998 59.4115 cv
cp
337.785 56.0405 mo
337.785 56.7765 337.932 57.3135 338.224 57.6515 cv
338.516 57.9905 338.883 58.1595 339.323 58.1595 cv
339.76 58.1595 340.126 57.9915 340.422 57.6545 cv
340.718 57.3185 340.866 56.7905 340.866 56.0725 cv
340.866 55.3855 340.714 54.8675 340.409 54.5185 cv
340.104 54.1695 339.737 53.9955 339.307 53.9955 cv
338.884 53.9955 338.525 54.1675 338.229 54.5105 cv
337.933 54.8545 337.785 55.3645 337.785 56.0405 cv
f
343.086 58.9465 mo
343.086 51.2005 343.086 58.9465 343.086 51.2005 cv
344.037 51.2005 343.086 51.2005 344.037 51.2005 cv
344.037 58.9465 344.037 51.2005 344.037 58.9465 cv
343.086 58.9465 344.037 58.9465 343.086 58.9465 cv
f
349.393 57.1395 mo
350.376 57.2615 349.393 57.1395 350.376 57.2615 cv
350.221 57.8355 349.934 58.2805 349.515 58.5975 cv
349.095 58.9145 348.56 59.0735 347.908 59.0735 cv
347.087 59.0735 346.437 58.8205 345.956 58.3155 cv
345.475 57.8095 345.234 57.1005 345.234 56.1885 cv
345.234 55.2445 345.477 54.5115 345.964 53.9905 cv
346.45 53.4685 347.08 53.2085 347.855 53.2085 cv
348.606 53.2085 349.219 53.4635 349.694 53.9745 cv
350.17 54.4855 350.408 55.2035 350.408 56.1305 cv
350.408 56.1865 350.406 56.2715 350.402 56.3835 cv
346.217 56.3835 350.402 56.3835 346.217 56.3835 cv
346.252 57.0005 346.427 57.4725 346.74 57.7995 cv
347.054 58.1275 347.445 58.2915 347.913 58.2915 cv
348.262 58.2915 348.56 58.1995 348.806 58.0165 cv
349.053 57.8335 349.249 57.5415 349.393 57.1395 cv
cp
346.27 55.6015 mo
349.404 55.6015 346.27 55.6015 349.404 55.6015 cv
349.361 55.1295 349.242 54.7755 349.044 54.5395 cv
348.741 54.1735 348.349 53.9905 347.866 53.9905 cv
347.429 53.9905 347.062 54.1365 346.764 54.4285 cv
346.466 54.7215 346.302 55.1125 346.27 55.6015 cv
f
356.546 58.9465 mo
356.546 52.1145 356.546 58.9465 356.546 52.1145 cv
353.994 52.1145 356.546 52.1145 353.994 52.1145 cv
353.994 51.2005 353.994 52.1145 353.994 51.2005 cv
360.134 51.2005 353.994 51.2005 360.134 51.2005 cv
360.134 52.1145 360.134 51.2005 360.134 52.1145 cv
357.571 52.1145 360.134 52.1145 357.571 52.1145 cv
357.571 58.9465 357.571 52.1145 357.571 58.9465 cv
356.546 58.9465 357.571 58.9465 356.546 58.9465 cv
f
364.748 58.2545 mo
364.396 58.5535 364.057 58.7655 363.731 58.8885 cv
363.405 59.0115 363.055 59.0735 362.682 59.0735 cv
362.065 59.0735 361.592 58.9225 361.26 58.6215 cv
360.929 58.3205 360.764 57.9355 360.764 57.4675 cv
360.764 57.1925 360.826 56.9415 360.951 56.7145 cv
361.076 56.4875 361.24 56.3045 361.443 56.1675 cv
361.645 56.0295 361.873 55.9265 362.127 55.8555 cv
362.314 55.8065 362.596 55.7585 362.973 55.7125 cv
363.74 55.6215 364.306 55.5125 364.669 55.3855 cv
364.672 55.2555 364.674 55.1725 364.674 55.1375 cv
364.674 54.7495 364.584 54.4765 364.405 54.3185 cv
364.161 54.1035 363.8 53.9955 363.321 53.9955 cv
362.874 53.9955 362.544 54.0745 362.331 54.2305 cv
362.117 54.3875 361.96 54.6655 361.858 55.0635 cv
360.928 54.9365 361.858 55.0635 360.928 54.9365 cv
361.012 54.5385 361.151 54.2165 361.345 53.9715 cv
361.539 53.7275 361.819 53.5385 362.185 53.4065 cv
362.552 53.2745 362.976 53.2085 363.459 53.2085 cv
363.938 53.2085 364.327 53.2645 364.626 53.3775 cv
364.926 53.4905 365.146 53.6325 365.287 53.8025 cv
365.428 53.9735 365.527 54.1895 365.583 54.4505 cv
365.615 54.6125 365.63 54.9045 365.63 55.3275 cv
365.63 56.5955 365.63 55.3275 365.63 56.5955 cv
365.63 57.4795 365.651 58.0385 365.691 58.2725 cv
365.732 58.5075 365.812 58.7315 365.932 58.9465 cv
364.938 58.9465 365.932 58.9465 364.938 58.9465 cv
364.84 58.7495 364.776 58.5185 364.748 58.2545 cv
cp
364.669 56.1305 mo
364.324 56.2715 363.806 56.3915 363.115 56.4895 cv
362.724 56.5465 362.448 56.6095 362.286 56.6795 cv
362.124 56.7505 361.999 56.8535 361.91 56.9895 cv
361.822 57.1245 361.778 57.2755 361.778 57.4405 cv
361.778 57.6945 361.874 57.9055 362.066 58.0745 cv
362.258 58.2435 362.539 58.3285 362.909 58.3285 cv
363.275 58.3285 363.601 58.2485 363.887 58.0885 cv
364.172 57.9275 364.382 57.7085 364.516 57.4305 cv
364.618 57.2155 364.669 56.8985 364.669 56.4795 cv
364.669 56.1305 364.669 56.4795 364.669 56.1305 cv
f
366.999 58.9465 mo
366.999 51.2005 366.999 58.9465 366.999 51.2005 cv
367.95 51.2005 366.999 51.2005 367.95 51.2005 cv
367.95 58.9465 367.95 51.2005 367.95 58.9465 cv
366.999 58.9465 367.95 58.9465 366.999 58.9465 cv
f
369.469 58.9465 mo
369.469 51.2005 369.469 58.9465 369.469 51.2005 cv
370.42 51.2005 369.469 51.2005 370.42 51.2005 cv
370.42 55.6175 370.42 51.2005 370.42 55.6175 cv
372.671 53.3355 370.42 55.6175 372.671 53.3355 cv
373.902 53.3355 372.671 53.3355 373.902 53.3355 cv
371.757 55.4165 373.902 53.3355 371.757 55.4165 cv
374.119 58.9465 371.757 55.4165 374.119 58.9465 cv
372.946 58.9465 374.119 58.9465 372.946 58.9465 cv
371.091 56.0775 372.946 58.9465 371.091 56.0775 cv
370.42 56.7225 371.091 56.0775 370.42 56.7225 cv
370.42 58.9465 370.42 56.7225 370.42 58.9465 cv
369.469 58.9465 370.42 58.9465 369.469 58.9465 cv
f
375.129 58.9465 mo
375.129 51.2005 375.129 58.9465 375.129 51.2005 cv
378.035 51.2005 375.129 51.2005 378.035 51.2005 cv
378.627 51.2005 379.102 51.2785 379.459 51.4355 cv
379.817 51.5925 380.097 51.8335 380.3 52.1595 cv
380.502 52.4855 380.603 52.8265 380.603 53.1815 cv
380.603 53.5125 380.514 53.8245 380.334 54.1175 cv
380.154 54.4095 379.883 54.6455 379.52 54.8255 cv
379.989 54.9625 380.349 55.1965 380.601 55.5275 cv
380.853 55.8595 380.979 56.2495 380.979 56.7005 cv
380.979 57.0635 380.902 57.4005 380.749 57.7125 cv
380.595 58.0245 380.406 58.2645 380.181 58.4335 cv
379.955 58.6035 379.672 58.7305 379.333 58.8175 cv
378.993 58.9035 378.576 58.9465 378.083 58.9465 cv
375.129 58.9465 378.083 58.9465 375.129 58.9465 cv
cp
376.154 54.4555 mo
377.829 54.4555 376.154 54.4555 377.829 54.4555 cv
378.284 54.4555 378.609 54.4255 378.807 54.3655 cv
379.067 54.2875 379.264 54.1595 379.396 53.9795 cv
379.528 53.8005 379.594 53.5745 379.594 53.3035 cv
379.594 53.0465 379.532 52.8195 379.409 52.6245 cv
379.286 52.4285 379.11 52.2955 378.881 52.2225 cv
378.652 52.1505 378.259 52.1145 377.702 52.1145 cv
376.154 52.1145 377.702 52.1145 376.154 52.1145 cv
376.154 54.4555 376.154 52.1145 376.154 54.4555 cv
cp
376.154 58.0325 mo
378.083 58.0325 376.154 58.0325 378.083 58.0325 cv
378.414 58.0325 378.646 58.0205 378.78 57.9955 cv
379.016 57.9535 379.214 57.8825 379.372 57.7845 cv
379.531 57.6855 379.661 57.5415 379.763 57.3535 cv
379.865 57.1645 379.916 56.9475 379.916 56.7005 cv
379.916 56.4125 379.842 56.1615 379.694 55.9475 cv
379.547 55.7345 379.341 55.5855 379.079 55.4985 cv
378.816 55.4125 378.439 55.3695 377.945 55.3695 cv
376.154 55.3695 377.945 55.3695 376.154 55.3695 cv
376.154 58.0325 376.154 55.3695 376.154 58.0325 cv
f
385.868 58.2545 mo
385.516 58.5535 385.177 58.7655 384.851 58.8885 cv
384.525 59.0115 384.175 59.0735 383.802 59.0735 cv
383.185 59.0735 382.712 58.9225 382.38 58.6215 cv
382.049 58.3205 381.884 57.9355 381.884 57.4675 cv
381.884 57.1925 381.946 56.9415 382.071 56.7145 cv
382.196 56.4875 382.36 56.3045 382.563 56.1675 cv
382.765 56.0295 382.993 55.9265 383.247 55.8555 cv
383.434 55.8065 383.716 55.7585 384.093 55.7125 cv
384.86 55.6215 385.426 55.5125 385.789 55.3855 cv
385.792 55.2555 385.794 55.1725 385.794 55.1375 cv
385.794 54.7495 385.704 54.4765 385.525 54.3185 cv
385.281 54.1035 384.92 53.9955 384.441 53.9955 cv
383.994 53.9955 383.664 54.0745 383.45 54.2305 cv
383.237 54.3875 383.08 54.6655 382.978 55.0635 cv
382.048 54.9365 382.978 55.0635 382.048 54.9365 cv
382.132 54.5385 382.271 54.2165 382.465 53.9715 cv
382.659 53.7275 382.939 53.5385 383.305 53.4065 cv
383.672 53.2745 384.096 53.2085 384.579 53.2085 cv
385.058 53.2085 385.447 53.2645 385.746 53.3775 cv
386.046 53.4905 386.266 53.6325 386.407 53.8025 cv
386.548 53.9735 386.647 54.1895 386.703 54.4505 cv
386.735 54.6125 386.75 54.9045 386.75 55.3275 cv
386.75 56.5955 386.75 55.3275 386.75 56.5955 cv
386.75 57.4795 386.771 58.0385 386.811 58.2725 cv
386.852 58.5075 386.932 58.7315 387.052 58.9465 cv
386.058 58.9465 387.052 58.9465 386.058 58.9465 cv
385.96 58.7495 385.896 58.5185 385.868 58.2545 cv
cp
385.789 56.1305 mo
385.444 56.2715 384.926 56.3915 384.235 56.4895 cv
383.844 56.5465 383.568 56.6095 383.406 56.6795 cv
383.244 56.7505 383.119 56.8535 383.03 56.9895 cv
382.942 57.1245 382.898 57.2755 382.898 57.4405 cv
382.898 57.6945 382.994 57.9055 383.186 58.0745 cv
383.378 58.2435 383.659 58.3285 384.029 58.3285 cv
384.395 58.3285 384.721 58.2485 385.007 58.0885 cv
385.292 57.9275 385.502 57.7085 385.635 57.4305 cv
385.738 57.2155 385.789 56.8985 385.789 56.4795 cv
385.789 56.1305 385.789 56.4795 385.789 56.1305 cv
f
391.803 56.8905 mo
392.738 57.0125 391.803 56.8905 392.738 57.0125 cv
392.636 57.6565 392.375 58.1615 391.954 58.5255 cv
391.533 58.8905 391.016 59.0725 390.403 59.0725 cv
389.635 59.0725 389.017 58.8215 388.551 58.3195 cv
388.084 57.8175 387.85 57.0985 387.85 56.1615 cv
387.85 55.5555 387.951 55.0255 388.152 54.5705 cv
388.352 54.1165 388.658 53.7755 389.068 53.5485 cv
389.479 53.3215 389.925 53.2075 390.408 53.2075 cv
391.017 53.2075 391.516 53.3615 391.903 53.6705 cv
392.291 53.9785 392.539 54.4155 392.648 54.9835 cv
391.724 55.1255 392.648 54.9835 391.724 55.1255 cv
391.636 54.7485 391.48 54.4655 391.256 54.2745 cv
391.032 54.0845 390.762 53.9895 390.445 53.9895 cv
389.966 53.9895 389.577 54.1615 389.277 54.5045 cv
388.978 54.8485 388.828 55.3915 388.828 56.1345 cv
388.828 56.8885 388.972 57.4365 389.261 57.7785 cv
389.55 58.1195 389.927 58.2905 390.392 58.2905 cv
390.766 58.2905 391.077 58.1765 391.327 57.9475 cv
391.578 57.7185 391.736 57.3665 391.803 56.8905 cv
f
393.557 58.9465 mo
393.557 51.2005 393.557 58.9465 393.557 51.2005 cv
394.508 51.2005 393.557 51.2005 394.508 51.2005 cv
394.508 55.6175 394.508 51.2005 394.508 55.6175 cv
396.759 53.3355 394.508 55.6175 396.759 53.3355 cv
397.99 53.3355 396.759 53.3355 397.99 53.3355 cv
395.845 55.4165 397.99 53.3355 395.845 55.4165 cv
398.207 58.9465 395.845 55.4165 398.207 58.9465 cv
397.034 58.9465 398.207 58.9465 397.034 58.9465 cv
395.179 56.0775 397.034 58.9465 395.179 56.0775 cv
394.508 56.7225 395.179 56.0775 394.508 56.7225 cv
394.508 58.9465 394.508 56.7225 394.508 58.9465 cv
393.557 58.9465 394.508 58.9465 393.557 58.9465 cv
f
2.095 lw
286.015 69.5935 mo
312.895 69.5935 li
.610498 1 .138643 .0341802 cmyk
@
303.645 65.5785 mo
295.267 65.5785 li
295.267 73.9563 li
303.645 73.9563 li
cp
f
.698 lw
295.266 65.5785 mo
303.644 65.5785 li
303.644 73.9563 li
295.266 73.9563 li
cp
@
320.672 70.7435 mo
320.672 69.8345 320.672 70.7435 320.672 69.8345 cv
323.953 69.8295 320.672 69.8345 323.953 69.8295 cv
323.953 72.7035 323.953 69.8295 323.953 72.7035 cv
323.45 73.1055 322.93 73.4075 322.395 73.6095 cv
321.859 73.8125 321.31 73.9135 320.746 73.9135 cv
319.985 73.9135 319.294 73.7505 318.672 73.4255 cv
318.05 73.0995 317.581 72.6285 317.264 72.0115 cv
316.947 71.3955 316.788 70.7065 316.788 69.9455 cv
316.788 69.1915 316.946 68.4885 317.261 67.8345 cv
317.576 67.1815 318.03 66.6965 318.622 66.3795 cv
319.214 66.0625 319.895 65.9035 320.667 65.9035 cv
321.227 65.9035 321.733 65.9945 322.186 66.1755 cv
322.639 66.3565 322.993 66.6095 323.251 66.9335 cv
323.508 67.2575 323.703 67.6805 323.837 68.2015 cv
322.912 68.4555 323.837 68.2015 322.912 68.4555 cv
322.796 68.0615 322.652 67.7515 322.479 67.5255 cv
322.307 67.3005 322.06 67.1195 321.739 66.9845 cv
321.419 66.8485 321.063 66.7805 320.672 66.7805 cv
320.203 66.7805 319.798 66.8515 319.457 66.9945 cv
319.115 67.1375 318.839 67.3245 318.63 67.5575 cv
318.42 67.7895 318.257 68.0455 318.141 68.3235 cv
317.944 68.8025 317.845 69.3225 317.845 69.8825 cv
317.845 70.5725 317.964 71.1505 318.202 71.6155 cv
318.439 72.0805 318.786 72.4255 319.24 72.6505 cv
319.694 72.8765 320.177 72.9895 320.688 72.9895 cv
321.132 72.9895 321.565 72.9035 321.988 72.7325 cv
322.41 72.5625 322.731 72.3795 322.949 72.1865 cv
322.949 70.7435 322.949 72.1865 322.949 70.7435 cv
320.672 70.7435 322.949 70.7435 320.672 70.7435 cv
1 /0 /CSD get_res sepcs
1 sep
f
324.95 70.9765 mo
324.95 69.9375 325.239 69.1675 325.817 68.6675 cv
326.299 68.2515 326.888 68.0435 327.582 68.0435 cv
328.353 68.0435 328.984 68.2965 329.473 68.8025 cv
329.963 69.3075 330.208 70.0065 330.208 70.8975 cv
330.208 71.6195 330.099 72.1875 329.883 72.6015 cv
329.666 73.0155 329.351 73.3365 328.937 73.5655 cv
328.523 73.7945 328.071 73.9095 327.582 73.9095 cv
326.796 73.9095 326.161 73.6575 325.677 73.1535 cv
325.192 72.6495 324.95 71.9245 324.95 70.9765 cv
cp
325.928 70.9765 mo
325.928 71.6955 326.084 72.2335 326.398 72.5905 cv
326.711 72.9485 327.106 73.1275 327.582 73.1275 cv
328.054 73.1275 328.446 72.9475 328.76 72.5885 cv
329.073 72.2285 329.23 71.6805 329.23 70.9445 cv
329.23 70.2505 329.073 69.7255 328.757 69.3675 cv
328.442 69.0105 328.05 68.8315 327.582 68.8315 cv
327.106 68.8315 326.711 69.0095 326.398 69.3645 cv
326.084 69.7205 325.928 70.2575 325.928 70.9765 cv
f
330.884 70.9765 mo
330.884 69.9375 331.173 69.1675 331.751 68.6675 cv
332.233 68.2515 332.822 68.0435 333.516 68.0435 cv
334.287 68.0435 334.918 68.2965 335.407 68.8025 cv
335.897 69.3075 336.142 70.0065 336.142 70.8975 cv
336.142 71.6195 336.033 72.1875 335.817 72.6015 cv
335.6 73.0155 335.285 73.3365 334.871 73.5655 cv
334.457 73.7945 334.005 73.9095 333.516 73.9095 cv
332.73 73.9095 332.095 73.6575 331.611 73.1535 cv
331.126 72.6495 330.884 71.9245 330.884 70.9765 cv
cp
331.862 70.9765 mo
331.862 71.6955 332.018 72.2335 332.332 72.5905 cv
332.645 72.9485 333.04 73.1275 333.516 73.1275 cv
333.988 73.1275 334.38 72.9475 334.694 72.5885 cv
335.007 72.2285 335.164 71.6805 335.164 70.9445 cv
335.164 70.2505 335.007 69.7255 334.691 69.3675 cv
334.376 69.0105 333.984 68.8315 333.516 68.8315 cv
333.04 68.8315 332.645 69.0095 332.332 69.3645 cv
332.018 69.7205 331.862 70.2575 331.862 70.9765 cv
f
336.998 74.2465 mo
337.923 74.3835 336.998 74.2465 337.923 74.3835 cv
337.961 74.6695 338.069 74.8775 338.245 75.0075 cv
338.481 75.1835 338.803 75.2715 339.212 75.2715 cv
339.652 75.2715 339.992 75.1835 340.232 75.0075 cv
340.471 74.8315 340.633 74.5845 340.718 74.2675 cv
340.767 74.0735 340.79 73.6675 340.787 73.0475 cv
340.371 73.5365 339.853 73.7815 339.233 73.7815 cv
338.462 73.7815 337.865 73.5035 337.442 72.9465 cv
337.019 72.3905 336.808 71.7225 336.808 70.9445 cv
336.808 70.4085 336.905 69.9145 337.098 69.4615 cv
337.292 69.0095 337.573 68.6595 337.941 68.4135 cv
338.309 68.1665 338.742 68.0435 339.238 68.0435 cv
339.901 68.0435 340.447 68.3105 340.877 68.8465 cv
340.877 68.1705 340.877 68.8465 340.877 68.1705 cv
341.754 68.1705 340.877 68.1705 341.754 68.1705 cv
341.754 73.0205 341.754 68.1705 341.754 73.0205 cv
341.754 73.8945 341.665 74.5135 341.487 74.8775 cv
341.309 75.2425 341.027 75.5305 340.641 75.7415 cv
340.256 75.9535 339.781 76.0585 339.217 76.0585 cv
338.548 76.0585 338.007 75.9085 337.595 75.6075 cv
337.183 75.3055 336.984 74.8525 336.998 74.2465 cv
cp
337.785 70.8755 mo
337.785 71.6115 337.932 72.1485 338.224 72.4865 cv
338.516 72.8255 338.883 72.9945 339.323 72.9945 cv
339.76 72.9945 340.126 72.8265 340.422 72.4895 cv
340.718 72.1535 340.866 71.6255 340.866 70.9075 cv
340.866 70.2205 340.714 69.7025 340.409 69.3535 cv
340.104 69.0045 339.737 68.8305 339.307 68.8305 cv
338.884 68.8305 338.525 69.0025 338.229 69.3455 cv
337.933 69.6895 337.785 70.1995 337.785 70.8755 cv
f
343.086 73.7815 mo
343.086 66.0355 343.086 73.7815 343.086 66.0355 cv
344.037 66.0355 343.086 66.0355 344.037 66.0355 cv
344.037 73.7815 344.037 66.0355 344.037 73.7815 cv
343.086 73.7815 344.037 73.7815 343.086 73.7815 cv
f
349.393 71.9745 mo
350.376 72.0965 349.393 71.9745 350.376 72.0965 cv
350.221 72.6705 349.934 73.1155 349.515 73.4325 cv
349.095 73.7495 348.56 73.9085 347.908 73.9085 cv
347.087 73.9085 346.437 73.6555 345.956 73.1505 cv
345.475 72.6445 345.234 71.9355 345.234 71.0235 cv
345.234 70.0795 345.477 69.3465 345.964 68.8255 cv
346.45 68.3035 347.08 68.0435 347.855 68.0435 cv
348.606 68.0435 349.219 68.2985 349.694 68.8095 cv
350.17 69.3205 350.408 70.0385 350.408 70.9655 cv
350.408 71.0215 350.406 71.1065 350.402 71.2185 cv
346.217 71.2185 350.402 71.2185 346.217 71.2185 cv
346.252 71.8355 346.427 72.3075 346.74 72.6345 cv
347.054 72.9625 347.445 73.1265 347.913 73.1265 cv
348.262 73.1265 348.56 73.0345 348.806 72.8515 cv
349.053 72.6685 349.249 72.3765 349.393 71.9745 cv
cp
346.27 70.4365 mo
349.404 70.4365 346.27 70.4365 349.404 70.4365 cv
349.361 69.9645 349.242 69.6105 349.044 69.3745 cv
348.741 69.0085 348.349 68.8255 347.866 68.8255 cv
347.429 68.8255 347.062 68.9715 346.764 69.2635 cv
346.466 69.5565 346.302 69.9475 346.27 70.4365 cv
f
360.102 71.0665 mo
361.127 71.3255 360.102 71.0665 361.127 71.3255 cv
360.912 72.1675 360.526 72.8095 359.967 73.2515 cv
359.409 73.6935 358.726 73.9145 357.92 73.9145 cv
357.085 73.9145 356.406 73.7445 355.883 73.4045 cv
355.36 73.0645 354.961 72.5725 354.688 71.9275 cv
354.415 71.2835 354.279 70.5905 354.279 69.8515 cv
354.279 69.0445 354.433 68.3405 354.741 67.7405 cv
355.049 67.1395 355.488 66.6835 356.057 66.3715 cv
356.626 66.0605 357.252 65.9045 357.936 65.9045 cv
358.711 65.9045 359.362 66.1015 359.891 66.4955 cv
360.419 66.8905 360.787 67.4455 360.995 68.1605 cv
359.986 68.3985 360.995 68.1605 359.986 68.3985 cv
359.806 67.8345 359.545 67.4245 359.204 67.1665 cv
358.862 66.9095 358.432 66.7815 357.914 66.7815 cv
357.319 66.7815 356.821 66.9235 356.422 67.2095 cv
356.022 67.4945 355.741 67.8775 355.579 68.3585 cv
355.417 68.8395 355.336 69.3355 355.336 69.8455 cv
355.336 70.5045 355.432 71.0795 355.624 71.5715 cv
355.816 72.0625 356.114 72.4295 356.519 72.6725 cv
356.924 72.9155 357.363 73.0375 357.835 73.0375 cv
358.409 73.0375 358.895 72.8715 359.294 72.5405 cv
359.692 72.2095 359.961 71.7185 360.102 71.0665 cv
f
362.308 73.7815 mo
362.308 66.0355 362.308 73.7815 362.308 66.0355 cv
363.259 66.0355 362.308 66.0355 363.259 66.0355 cv
363.259 68.8145 363.259 66.0355 363.259 68.8145 cv
363.703 68.3005 364.263 68.0435 364.94 68.0435 cv
365.355 68.0435 365.716 68.1255 366.023 68.2885 cv
366.329 68.4525 366.549 68.6795 366.681 68.9675 cv
366.813 69.2565 366.879 69.6755 366.879 70.2255 cv
366.879 73.7815 366.879 70.2255 366.879 73.7815 cv
365.928 73.7815 366.879 73.7815 365.928 73.7815 cv
365.928 70.2255 365.928 73.7815 365.928 70.2255 cv
365.928 69.7495 365.825 69.4035 365.619 69.1875 cv
365.412 68.9705 365.121 68.8625 364.744 68.8625 cv
364.462 68.8625 364.197 68.9355 363.949 69.0815 cv
363.7 69.2275 363.523 69.4255 363.418 69.6755 cv
363.312 69.9265 363.259 70.2715 363.259 70.7115 cv
363.259 73.7815 363.259 70.7115 363.259 73.7815 cv
362.308 73.7815 363.259 73.7815 362.308 73.7815 cv
f
368.232 73.7815 mo
368.232 68.1705 368.232 73.7815 368.232 68.1705 cv
369.088 68.1705 368.232 68.1705 369.088 68.1705 cv
369.088 69.0205 369.088 68.1705 369.088 69.0205 cv
369.306 68.6225 369.508 68.3605 369.693 68.2335 cv
369.878 68.1065 370.081 68.0435 370.303 68.0435 cv
370.624 68.0435 370.95 68.1455 371.281 68.3495 cv
370.953 69.2325 371.281 68.3495 370.953 69.2325 cv
370.721 69.0945 370.488 69.0265 370.256 69.0265 cv
370.048 69.0265 369.861 69.0885 369.696 69.2135 cv
369.53 69.3385 369.412 69.5125 369.342 69.7345 cv
369.236 70.0725 369.183 70.4425 369.183 70.8435 cv
369.183 73.7815 369.183 70.8435 369.183 73.7815 cv
368.232 73.7815 369.183 73.7815 368.232 73.7815 cv
f
371.554 70.9765 mo
371.554 69.9375 371.843 69.1675 372.421 68.6675 cv
372.903 68.2515 373.492 68.0435 374.186 68.0435 cv
374.957 68.0435 375.588 68.2965 376.077 68.8025 cv
376.567 69.3075 376.812 70.0065 376.812 70.8975 cv
376.812 71.6195 376.703 72.1875 376.487 72.6015 cv
376.27 73.0155 375.955 73.3365 375.541 73.5655 cv
375.127 73.7945 374.675 73.9095 374.186 73.9095 cv
373.4 73.9095 372.765 73.6575 372.281 73.1535 cv
371.796 72.6495 371.554 71.9245 371.554 70.9765 cv
cp
372.532 70.9765 mo
372.532 71.6955 372.688 72.2335 373.002 72.5905 cv
373.315 72.9485 373.71 73.1275 374.186 73.1275 cv
374.658 73.1275 375.05 72.9475 375.364 72.5885 cv
375.677 72.2285 375.834 71.6805 375.834 70.9445 cv
375.834 70.2505 375.677 69.7255 375.361 69.3675 cv
375.046 69.0105 374.654 68.8315 374.186 68.8315 cv
373.71 68.8315 373.315 69.0095 373.002 69.3645 cv
372.688 69.7205 372.532 70.2575 372.532 70.9765 cv
f
377.842 73.7815 mo
377.842 68.1705 377.842 73.7815 377.842 68.1705 cv
378.693 68.1705 377.842 68.1705 378.693 68.1705 cv
378.693 68.9575 378.693 68.1705 378.693 68.9575 cv
378.869 68.6825 379.103 68.4615 379.396 68.2945 cv
379.688 68.1265 380.021 68.0435 380.394 68.0435 cv
380.81 68.0435 381.151 68.1295 381.417 68.3025 cv
381.683 68.4745 381.87 68.7165 381.979 69.0265 cv
382.423 68.3705 383.001 68.0435 383.713 68.0435 cv
384.269 68.0435 384.697 68.1975 384.997 68.5055 cv
385.296 68.8135 385.446 69.2885 385.446 69.9295 cv
385.446 73.7815 385.446 69.9295 385.446 73.7815 cv
384.5 73.7815 385.446 73.7815 384.5 73.7815 cv
384.5 70.2465 384.5 73.7815 384.5 70.2465 cv
384.5 69.8665 384.469 69.5925 384.408 69.4245 cv
384.346 69.2575 384.234 69.1225 384.072 69.0205 cv
383.91 68.9185 383.72 68.8675 383.501 68.8675 cv
383.107 68.8675 382.779 68.9985 382.518 69.2615 cv
382.258 69.5235 382.127 69.9435 382.127 70.5215 cv
382.127 73.7815 382.127 70.5215 382.127 73.7815 cv
381.176 73.7815 382.127 73.7815 381.176 73.7815 cv
381.176 70.1355 381.176 73.7815 381.176 70.1355 cv
381.176 69.7125 381.099 69.3955 380.944 69.1845 cv
380.789 68.9735 380.535 68.8675 380.183 68.8675 cv
379.915 68.8675 379.668 68.9375 379.44 69.0785 cv
379.213 69.2195 379.049 69.4255 378.946 69.6975 cv
378.844 69.9685 378.793 70.3595 378.793 70.8705 cv
378.793 73.7815 378.793 70.8705 378.793 73.7815 cv
377.842 73.7815 378.793 73.7815 377.842 73.7815 cv
f
390.76 71.9745 mo
391.743 72.0965 390.76 71.9745 391.743 72.0965 cv
391.588 72.6705 391.301 73.1155 390.882 73.4325 cv
390.462 73.7495 389.927 73.9085 389.275 73.9085 cv
388.454 73.9085 387.804 73.6555 387.323 73.1505 cv
386.842 72.6445 386.601 71.9355 386.601 71.0235 cv
386.601 70.0795 386.844 69.3465 387.331 68.8255 cv
387.817 68.3035 388.447 68.0435 389.222 68.0435 cv
389.973 68.0435 390.586 68.2985 391.061 68.8095 cv
391.537 69.3205 391.775 70.0385 391.775 70.9655 cv
391.775 71.0215 391.773 71.1065 391.769 71.2185 cv
387.584 71.2185 391.769 71.2185 387.584 71.2185 cv
387.619 71.8355 387.794 72.3075 388.107 72.6345 cv
388.421 72.9625 388.812 73.1265 389.28 73.1265 cv
389.629 73.1265 389.927 73.0345 390.173 72.8515 cv
390.42 72.6685 390.616 72.3765 390.76 71.9745 cv
cp
387.637 70.4365 mo
390.771 70.4365 387.637 70.4365 390.771 70.4365 cv
390.728 69.9645 390.609 69.6105 390.411 69.3745 cv
390.108 69.0085 389.716 68.8255 389.233 68.8255 cv
388.796 68.8255 388.429 68.9715 388.131 69.2635 cv
387.833 69.5565 387.669 69.9475 387.637 70.4365 cv
f
214.078 363.863 mo
218.636 351.994 214.078 363.863 218.636 351.994 cv
220.329 351.994 218.636 351.994 220.329 351.994 cv
225.187 363.863 220.329 351.994 225.187 363.863 cv
223.397 363.863 225.187 363.863 223.397 363.863 cv
222.013 360.268 223.397 363.863 222.013 360.268 cv
217.049 360.268 222.013 360.268 217.049 360.268 cv
215.746 363.863 217.049 360.268 215.746 363.863 cv
214.078 363.863 215.746 363.863 214.078 363.863 cv
cp
217.503 358.99 mo
221.527 358.99 217.503 358.99 221.527 358.99 cv
220.288 355.702 221.527 358.99 220.288 355.702 cv
219.91 354.703 219.63 353.883 219.446 353.241 cv
219.295 354.002 219.082 354.757 218.806 355.508 cv
217.503 358.99 218.806 355.508 217.503 358.99 cv
f
226.192 367.159 mo
226.192 355.266 226.192 367.159 226.192 355.266 cv
227.52 355.266 226.192 355.266 227.52 355.266 cv
227.52 356.383 227.52 355.266 227.52 356.383 cv
227.833 355.947 228.186 355.618 228.581 355.399 cv
228.975 355.181 229.452 355.072 230.014 355.072 cv
230.748 355.072 231.395 355.26 231.957 355.638 cv
232.518 356.016 232.942 356.549 233.228 357.237 cv
233.514 357.925 233.657 358.68 233.657 359.5 cv
233.657 360.38 233.499 361.172 233.183 361.876 cv
232.868 362.581 232.409 363.12 231.807 363.495 cv
231.205 363.871 230.572 364.059 229.908 364.059 cv
229.423 364.059 228.987 363.956 228.601 363.75 cv
228.215 363.546 227.898 363.286 227.649 362.973 cv
227.649 367.159 227.649 362.973 227.649 367.159 cv
226.192 367.159 227.649 367.159 226.192 367.159 cv
cp
227.512 359.613 mo
227.512 360.72 227.736 361.538 228.184 362.066 cv
228.632 362.595 229.174 362.86 229.811 362.86 cv
230.459 362.86 231.014 362.586 231.475 362.038 cv
231.937 361.49 232.167 360.642 232.167 359.492 cv
232.167 358.396 231.942 357.576 231.491 357.031 cv
231.041 356.485 230.502 356.214 229.876 356.214 cv
229.255 356.214 228.706 356.503 228.228 357.083 cv
227.751 357.664 227.512 358.507 227.512 359.613 cv
f
235.268 367.159 mo
235.268 355.266 235.268 367.159 235.268 355.266 cv
236.596 355.266 235.268 355.266 236.596 355.266 cv
236.596 356.383 236.596 355.266 236.596 356.383 cv
236.909 355.947 237.262 355.618 237.657 355.399 cv
238.051 355.181 238.528 355.072 239.09 355.072 cv
239.824 355.072 240.471 355.26 241.033 355.638 cv
241.594 356.016 242.018 356.549 242.304 357.237 cv
242.59 357.925 242.733 358.68 242.733 359.5 cv
242.733 360.38 242.575 361.172 242.259 361.876 cv
241.944 362.581 241.485 363.12 240.883 363.495 cv
240.281 363.871 239.648 364.059 238.984 364.059 cv
238.499 364.059 238.063 363.956 237.677 363.75 cv
237.291 363.546 236.974 363.286 236.725 362.973 cv
236.725 367.159 236.725 362.973 236.725 367.159 cv
235.268 367.159 236.725 367.159 235.268 367.159 cv
cp
236.588 359.613 mo
236.588 360.72 236.812 361.538 237.26 362.066 cv
237.708 362.595 238.25 362.86 238.887 362.86 cv
239.535 362.86 240.09 362.586 240.551 362.038 cv
241.013 361.49 241.243 360.642 241.243 359.492 cv
241.243 358.396 241.018 357.576 240.567 357.031 cv
240.117 356.485 239.578 356.214 238.952 356.214 cv
238.331 356.214 237.782 356.503 237.304 357.083 cv
236.827 357.664 236.588 358.507 236.588 359.613 cv
f
251.271 363.863 mo
248 355.265 251.271 363.863 248 355.265 cv
249.538 355.265 248 355.265 249.538 355.265 cv
251.384 360.414 249.538 355.265 251.384 360.414 cv
251.584 360.97 251.768 361.547 251.935 362.147 cv
252.064 361.693 252.245 361.148 252.477 360.511 cv
254.388 355.265 252.477 360.511 254.388 355.265 cv
255.886 355.265 254.388 355.265 255.886 355.265 cv
252.631 363.863 255.886 355.265 252.631 363.863 cv
251.271 363.863 252.631 363.863 251.271 363.863 cv
f
262.973 361.095 mo
264.479 361.281 262.973 361.095 264.479 361.281 cv
264.241 362.161 263.802 362.844 263.159 363.33 cv
262.517 363.815 261.696 364.059 260.698 364.059 cv
259.44 364.059 258.443 363.671 257.706 362.896 cv
256.969 362.122 256.601 361.036 256.601 359.638 cv
256.601 358.191 256.973 357.068 257.718 356.27 cv
258.463 355.471 259.429 355.072 260.617 355.072 cv
261.767 355.072 262.706 355.464 263.434 356.245 cv
264.163 357.029 264.528 358.129 264.528 359.549 cv
264.528 359.635 264.525 359.766 264.519 359.938 cv
258.107 359.938 264.519 359.938 258.107 359.938 cv
258.161 360.882 258.428 361.605 258.908 362.107 cv
259.389 362.609 259.988 362.861 260.706 362.861 cv
261.24 362.861 261.696 362.72 262.074 362.439 cv
262.452 362.158 262.752 361.71 262.973 361.095 cv
cp
258.188 358.74 mo
262.989 358.74 258.188 358.74 262.989 358.74 cv
262.924 358.016 262.741 357.473 262.439 357.112 cv
261.974 356.55 261.373 356.27 260.633 356.27 cv
259.964 356.27 259.401 356.494 258.945 356.942 cv
258.489 357.391 258.236 357.99 258.188 358.74 cv
f
266.147 363.863 mo
266.147 355.265 266.147 363.863 266.147 355.265 cv
267.459 355.265 266.147 355.265 267.459 355.265 cv
267.459 356.568 267.459 355.265 267.459 356.568 cv
267.793 355.958 268.102 355.556 268.386 355.362 cv
268.669 355.168 268.981 355.07 269.321 355.07 cv
269.812 355.07 270.311 355.227 270.819 355.54 cv
270.317 356.892 270.819 355.54 270.317 356.892 cv
269.961 356.682 269.604 356.576 269.248 356.576 cv
268.93 356.576 268.643 356.672 268.39 356.865 cv
268.136 357.055 267.955 357.321 267.847 357.661 cv
267.685 358.179 267.604 358.746 267.604 359.361 cv
267.604 363.863 267.604 359.361 267.604 363.863 cv
266.147 363.863 267.604 363.863 266.147 363.863 cv
f
270.991 361.297 mo
272.432 361.07 270.991 361.297 272.432 361.07 cv
272.513 361.648 272.738 362.09 273.108 362.398 cv
273.478 362.706 273.995 362.861 274.659 362.861 cv
275.328 362.861 275.825 362.723 276.149 362.451 cv
276.472 362.178 276.634 361.858 276.634 361.491 cv
276.634 361.162 276.491 360.904 276.205 360.714 cv
276.006 360.585 275.509 360.421 274.715 360.22 cv
273.647 359.951 272.906 359.717 272.493 359.52 cv
272.08 359.323 271.767 359.05 271.554 358.702 cv
271.341 358.354 271.234 357.969 271.234 357.548 cv
271.234 357.165 271.322 356.81 271.497 356.484 cv
271.673 356.158 271.911 355.886 272.214 355.671 cv
272.44 355.503 272.749 355.361 273.141 355.245 cv
273.532 355.129 273.952 355.072 274.4 355.072 cv
275.074 355.072 275.667 355.168 276.177 355.362 cv
276.687 355.557 277.064 355.82 277.306 356.152 cv
277.549 356.484 277.717 356.928 277.808 357.484 cv
276.383 357.678 277.808 357.484 276.383 357.678 cv
276.319 357.236 276.131 356.891 275.821 356.642 cv
275.51 356.393 275.072 356.27 274.505 356.27 cv
273.836 356.27 273.358 356.38 273.072 356.602 cv
272.786 356.822 272.643 357.082 272.643 357.378 cv
272.643 357.567 272.702 357.737 272.821 357.888 cv
272.94 358.046 273.126 358.175 273.38 358.277 cv
273.525 358.331 273.954 358.455 274.667 358.65 cv
275.698 358.925 276.417 359.15 276.825 359.326 cv
277.232 359.501 277.552 359.757 277.784 360.091 cv
278.016 360.425 278.132 360.841 278.132 361.337 cv
278.132 361.823 277.991 362.281 277.707 362.71 cv
277.424 363.139 277.015 363.471 276.481 363.706 cv
275.946 363.94 275.342 364.059 274.667 364.059 cv
273.55 364.059 272.698 363.826 272.112 363.362 cv
271.527 362.897 271.153 362.21 270.991 361.297 cv
f
279.786 353.67 mo
279.786 351.994 279.786 353.67 279.786 351.994 cv
281.243 351.994 279.786 351.994 281.243 351.994 cv
281.243 353.67 281.243 351.994 281.243 353.67 cv
279.786 353.67 281.243 353.67 279.786 353.67 cv
cp
279.786 363.863 mo
279.786 355.265 279.786 363.863 279.786 355.265 cv
281.243 355.265 279.786 355.265 281.243 355.265 cv
281.243 363.863 281.243 355.265 281.243 363.863 cv
279.786 363.863 281.243 363.863 279.786 363.863 cv
f
282.901 359.564 mo
282.901 357.972 283.344 356.792 284.229 356.026 cv
284.968 355.389 285.87 355.071 286.933 355.071 cv
288.115 355.071 289.081 355.458 289.832 356.232 cv
290.582 357.007 290.957 358.077 290.957 359.443 cv
290.957 360.549 290.791 361.419 290.459 362.054 cv
290.127 362.688 289.644 363.18 289.01 363.531 cv
288.376 363.882 287.683 364.057 286.933 364.057 cv
285.729 364.057 284.756 363.671 284.014 362.9 cv
283.272 362.128 282.901 361.016 282.901 359.564 cv
cp
284.399 359.564 mo
284.399 360.665 284.639 361.49 285.119 362.037 cv
285.6 362.585 286.204 362.859 286.933 362.859 cv
287.656 362.859 288.258 362.584 288.739 362.033 cv
289.219 361.483 289.459 360.643 289.459 359.515 cv
289.459 358.452 289.218 357.647 288.735 357.099 cv
288.252 356.551 287.651 356.277 286.933 356.277 cv
286.204 356.277 285.6 356.55 285.119 357.095 cv
284.639 357.64 284.399 358.464 284.399 359.564 cv
f
292.52 363.863 mo
292.52 355.265 292.52 363.863 292.52 355.265 cv
293.832 355.265 292.52 355.265 293.832 355.265 cv
293.832 356.487 293.832 355.265 293.832 356.487 cv
294.463 355.543 295.375 355.07 296.568 355.07 cv
297.087 355.07 297.563 355.164 297.997 355.35 cv
298.432 355.536 298.757 355.78 298.973 356.083 cv
299.189 356.385 299.34 356.744 299.426 357.159 cv
299.48 357.429 299.507 357.902 299.507 358.576 cv
299.507 363.863 299.507 358.576 299.507 363.863 cv
298.05 363.863 299.507 363.863 298.05 363.863 cv
298.05 358.633 298.05 363.863 298.05 358.633 cv
298.05 358.039 297.993 357.595 297.88 357.301 cv
297.767 357.007 297.566 356.772 297.277 356.597 cv
296.988 356.421 296.649 356.334 296.261 356.334 cv
295.64 356.334 295.104 356.531 294.653 356.925 cv
294.203 357.319 293.977 358.066 293.977 359.167 cv
293.977 363.863 293.977 359.167 293.977 363.863 cv
292.52 363.863 293.977 363.863 292.52 363.863 cv
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
